<?php

/**
 * @file
 * Module for the WebformSubmissionEntity Entity - a starting point to create your own Entity
 * and associated administration interface
 */  


/**
 * Implement hook_entity_info().
 */
function webform_submission_entity_entity_info() {
  $return['webform_submission_entity'] = array(
    'label' => t('Webform Submission'),
    // The entity class and controller class extend the classes provided by the
    // Entity API
    'entity class' => 'WebformSubmissionEntity',
    'controller class' => 'WebformSubmissionEntityController',
    'base table' => 'webform_submission_entity',
    'fieldable' => TRUE,
    'entity keys' => array(
        'id' => 'wsid',
        'nid' => 'nid',
    ),
    'uri callback' => 'webform_submission_entity_uri',
    'creation callback' => 'webform_submission_entity_create',
    'access callback' => 'webform_submission_entity_access',
    'module' => 'webform_submission_entity',
    'admin ui' => array(
      'path' => 'webform/submission',
      'controller class' => 'WebformSubmissionEntityUIController',
      'menu wildcard' => '%webform_submission_entity',
    ),
  );
  
  return $return;
}

/**
 * Implements hook_webform_submission_insert();
 */
function webform_submission_entity_webform_submission_insert($node, $submission) {
	$entity = webform_submission_entity_create(array('nid' => $node->nid, 'sid' => $submission->sid));
	webform_submission_entity_save($entity);
}

/**
 * Implements hook_webform_submission_insert();
 */
function webform_submission_entity_webform_submission_delete($node, $submission) {
	$entity = webform_submission_entity_load_sid($node->nid, $submission->sid);
	if($entity) {
		webform_submission_entity_delete($entity);
	}
}

/**
 * Determines whether the given user has access to a webform_submission_entity.
 *
 * @param $op
 *   The operation being performed. One of 'view', 'update', 'create', 'delete'
 *   or just 'edit' (being the same as 'create' or 'update').
 * @param $entity
 *   Optionally a webform_submission_entity or a webform_submission_entity type to check access for. If nothing is
 *   given, access for all webform_submission_entitys is determined.
 * @param $account
 *   The user to check for. Leave it to NULL to check for the global user.
 * @return boolean
 *   Whether access is allowed or not.
 */
function webform_submission_entity_access($op, $entity = NULL, $account = NULL) {
  if(is_object($entity)) {
	  module_load_include('inc', 'webform', 'includes/webform.submissions');
	  $submission = webform_get_submission($entity->nid, $entity->sid);
	  return webform_submission_access(node_load($entity->nid), $submission, $op);
	}
	return FALSE;
}

/**
 * Fetch a webform_submission_entity object. Make sure that the wildcard you choose 
 * in the webform_submission_entity entity definition fits the function name here.
 *
 * @param $wsid
 *   Integer specifying the webform_submission_entity id.
 * @param $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return
 *   A fully-loaded $webform_submission_entity object or FALSE if it cannot be loaded.
 *
 * @see webform_submission_entity_load_multiple()
 */
function webform_submission_entity_load($wsid, $reset = FALSE) {
  $webform_submission_entitys = webform_submission_entity_load_multiple(array($wsid), array(), $reset);
  return reset($webform_submission_entitys);
}

function webform_submission_entity_load_sid($nid, $sid) {
	$wsid = db_select('webform_submission_entity', 'w')
		     ->fields('w', array('wsid'))
		     ->condition('w.sid', $sid)
		     ->condition('w.nid', $nid)
		     ->execute()
		     ->fetchField();
	return webform_submission_entity_load($wsid);
}

/**
 *  Implements hook_node_delete
 */
function webform_submission_entity_node_delete($node) {
   $entities = webform_submission_entity_load_nid($node->nid);
   foreach($entities as $entity) {
   	 webform_submission_entity_delete($entity);
   }
}

function webform_submission_entity_load_nid($nid) {
	$wsids = db_select('webform_submission_entity', 'w')
		     ->fields('w', array('wsid'))
		     ->condition('w.nid', $nid)
		     ->execute()
		     ->fetchAllKeyed();
	return webform_submission_entity_load_multiple($wsids);
}

/**
 * Load multiple webform_submission_entitys based on certain conditions.
 *
 * @param $wsids
 *   An array of webform_submission_entity IDs.
 * @param $conditions
 *   An array of conditions to match against the {webform_submission_entity} table.
 * @param $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return
 *   An array of webform_submission_entity objects, indexed by wsid.
 *
 * @see entity_load()
 * @see webform_submission_entity_load()
 */
function webform_submission_entity_load_multiple($wsids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('webform_submission_entity', $wsids, $conditions, $reset);
}


/**
 * Deletes a webform_submission_entity.
 */
function webform_submission_entity_delete(WebformSubmissionEntity $webform_submission_entity) {
  $webform_submission_entity->delete();
}


/**
 * Delete multiple webform_submission_entitys.
 *
 * @param $wsids
 *   An array of webform_submission_entity IDs.
 */
function webform_submission_entity_delete_multiple(array $wsids) {
  entity_get_controller('webform_submission_entity')->delete($wsids);
}


/**
 * Create a webform_submission_entity object.
 */
function webform_submission_entity_create($values = array()) {
  return entity_get_controller('webform_submission_entity')->create($values);
}


/**
 * Saves a webform_submission_entity to the database.
 *
 * @param $webform_submission_entity
 *   The webform_submission_entity object.
 */
function webform_submission_entity_save(WebformSubmissionEntity $webform_submission_entity) {
  return $webform_submission_entity->save();
}

/**
 * URI callback for webform_submission_entitys
 */
function webform_submission_entity_uri(WebformSubmissionEntity $webform_submission_entity){
  return array(
    'path' => 'webform/submission/' . $webform_submission_entity->wsid,
  );
}


/**
 * Menu title callback for showing individual entities
 */
function webform_submission_entity_page_title(WebformSubmissionEntity $webform_submission_entity){
  return $webform_submission_entity->sid;
}


/**
 * Sets up content to show an individual webform_submission_entity
 * @todo - get rid of drupal_set_title();
 */
function webform_submission_entity_page_view($entity, $view_mode = 'full') {    
  drupal_goto('node/'. $entity->nid .'/submission/'. $entity->sid);
}


/**
 * Implements hook_views_api().
 */
function webform_submission_entity_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'webform_submission_entity') . '/views',
  );
}

/**
 * The class used for webform_submission_entity entities
 */
class WebformSubmissionEntity extends Entity {
  
  public function __construct($values = array()) {
    parent::__construct($values, 'webform_submission_entity');
  }

  protected function defaultLabel() {
    return $this->name;
  }

  protected function defaultUri() {
    return array('path' => 'webform/submission/' . $this->wsid);
  }
  
  
}

/**
 * The Controller for WebformSubmissionEntity entities
 */
class WebformSubmissionEntityController extends EntityAPIController {
  public function __construct($entityType) {
    parent::__construct($entityType);
  }


  /**
   * Create a webform_submission_entity - we first set up the values that are specific
   * to our webform_submission_entity schema but then also go through the EntityAPIController
   * function.
   * 
   * @param $type
   *   The machine-readable type of the webform_submission_entity.
   *
   * @return
   *   A webform_submission_entity object with all default fields initialized.
   */
  public function create(array $values = array()) {
    // Add values that are specific to our WebformSubmissionEntity
    $values += array( 
      'wsid' => '',
      'nid' => 0,
      'created' => '',
    );
    
    $webform_submission_entity = parent::create($values);
    return $webform_submission_entity;
  }
  
  /**
   * Overriding the buldContent function to add entity specific fields
   */
  public function buildContent($entity, $view_mode = 'full', $langcode = NULL, $content = array()) {
    $content = parent::buildContent($entity, $view_mode, $langcode, $content);
    $content['webform_submission_entity_sample_data'] =  array(
      '#markup' => theme('webform_submission_entity_sample_data', array('webform_submission_entity_sample_data' => check_plain($entity->data['sample_data']), 'webform_submission_entity' => $entity)),
    );

    return $content;
  }
  
}

/**
 * UI controller.
 */
class WebformSubmissionEntityUIController extends EntityDefaultUIController {

  /**
   * Overrides hook_menu() defaults. Main reason for doing this is that
   * parent class hook_menu() is optimized for entity type administration.
   */
  public function hook_menu() {
    
    $items = array();
    $id_count = count(explode('/', $this->path));
    $wildcard = isset($this->entityInfo['admin ui']['menu wildcard']) ? $this->entityInfo['admin ui']['menu wildcard'] : '%' . $this->entityType;
    
    // Menu item for viewing webform_submission_entitys
    $items['webform/submission/' . $wildcard] = array(
      //'title' => 'Title',
      'page callback' => 'webform_submission_entity_page_view',
      'page arguments' => array(2),
      'access callback' => 'webform_submission_entity_access',
      'access arguments' => array('view', 2),
      'type' => MENU_CALLBACK,
    );
    
    
    return $items;
  }
  
  
  /**
   * Create the markup for the add CRMCase Entities page within the class
   * so it can easily be extended/overriden.
   */ 
  public function addPage() {
    $item = menu_get_item();
    $content = system_admin_menu_block($item);

    if (count($content) == 1) {
      $item = array_shift($content);
      drupal_goto($item['href']);
    }    
        
    return theme('webform_submission_entity_add_list', array('content' => $content));
  }
  
}