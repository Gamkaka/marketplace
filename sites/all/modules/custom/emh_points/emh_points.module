<?php
/**
 * @file
 * Points managements for EMH website.
 */


define('POINTS_ADDITION', 'addition');
define('POINTS_REMOVAL', 'removal');
define('POINTS_EXPIRATION', 'expiration');
define('POINTS_TRANSFERT', 'transfert');


/**
 * Implements hook_permission().
 */
function emh_points_permission() {
  return array(
    'administer points' => array('title' => t('Administer Points')),
    'use points' => array('title' => t('Use Points')),
    'view others points history' => array('title' => t('View others points history')),
  );
}


/**
 * Implements hook_menu().
 */
function emh_points_menu() {
  $items = array();
  $items['admin/emindhub/points'] = array(
    'title' => 'Points',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('emh_points_admin_form'),
    'access arguments' => array('administer points'),
    'file' => 'emh_points.admin.inc',
  );
  $items['admin/emindhub/points/integrity'] = array(
    'title' => 'Integrity',
    'page callback' => 'emh_points_integrity_check',
    'access arguments' => array('administer points'),
    'file' => 'emh_points.admin.inc',
    'type' => MENU_LOCAL_ACTION,
  );
  $items['admin/emindhub/points/user_add_points'] = array(
    'title' => 'Manage Points for Users',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('emh_points_manage_users_form'),
    'access arguments' => array('administer points'),
    'file' => 'emh_points.admin.inc',
    'type' => MENU_LOCAL_ACTION,
  );
  $items['arrange/%/%/%/%/%'] = array(
    'title' => 'Validate selection and distribute points',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('emh_points_arrange_form', 1, 2, 3, 4, 5),
    'access arguments' => array('use points'),
  );

  // Route for the points history of the current user
  $items['points'] = array(
    'title' => 'Points',
    'page callback' => 'emh_points_show_user_history',
    'access callback' => 'emh_points_user_history_access',
    'menu_name' => 'user-menu',
    'type' => MENU_NORMAL_ITEM,
  );

  // Route for the points history of a specific user
  $items['user/%user/points'] = array(
    'title' => 'Points',
    'page callback' => 'emh_points_show_user_history',
    'page arguments' => array(1),
    'access callback' => 'emh_points_user_history_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}


/**
 * Implements hook_menu_local_tasks_alter().
 */
function emh_points_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  // Changes the href of the points history tab
  // if it goes to the current user's points history.
  if (strpos($root_path, 'user/%') === 0) {
    global $user;
    $account = menu_get_object('user');

    if ($user->uid == $account->uid) {
      foreach ($data['tabs'][0]['output'] as &$tab) {
        if ($tab['#link']['path'] == 'user/%/points') {
          $tab['#link']['href'] = 'points';
          break;
        }
      }
    }
  }
}


/**
 * Access callback for the points history page.
 */
function emh_points_user_history_access($account = NULL) {
  global $user;

  // If the user tries to access its own points history (/points)
  if ($account == NULL) {
    if (user_access('use points')) {
      return TRUE;
    }
  }
  // If the user tries to access the points history of a specific user (/user/%/points)
  else {
    if ($account->uid == $user->uid) {
      return TRUE;
    }
    if (user_access('view others points history')) {
      return TRUE;
    }
  }

  return FALSE;
}


/**
 * Implements hook_views_api().
 */
function emh_points_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'emh_points') . '/views',
  );
}

/**
 * Implements hook_cron().
 * Points expiration & expiration warning.
 */
function emh_points_cron() {
  // Points expiration.
  $query = db_select('emh_points', 'p')
    ->fields('p', array('pid', 'points', 'entity_id', 'entity_type'))
    ->condition('p.points', 0, '>')
    ->condition('p.expiration_date', REQUEST_TIME, '<')
    ->orderBy('p.expiration_date', 'ASC')
    ->execute();
  foreach($query as $row) {
    // Expire points.
    db_merge('emh_points')
      ->key(array('pid' => $row->pid))
      ->fields(array(
        'points' => 0,
        'last_update' => REQUEST_TIME,
      ))
      ->execute();
    // Create transaction.
    db_insert('emh_points_txn')
      ->fields(array(
        'uid' => 1,
        'points'=> (int)$row->points,
        'time_stamp' => REQUEST_TIME,
        'description' => t('Points expiration'),
        'source_type' => 'user',
        'source_id' => 1,
        'dest_type' => $row->entity_type,
        'dest_id' => $row->entity_id,
        'operation' => POINTS_EXPIRATION,
      ))
      ->execute();
    // Update total.
    db_merge('emh_points_total')
      ->key(array('entity_id' => $row->entity_id, 'entity_type' => $row->entity_type))
      ->expression('total_points', 'total_points - :amount', array(':amount' => $row->points))
      ->execute();
  }
  // Expiration warning.
  // @TODO.
}

/**
 * Implements hook_node_delete().
 */
function emh_points_node_delete($node) {
  emh_points_entity_points_delete($node->nid, 'node');
}

/**
 * Implements hook_user_delete().
 */
function emh_points_user_delete($user) {
  emh_points_entity_points_delete($user->uid, 'user');
}

/**
 * Helper callback for points deletion.
 */
function emh_points_entity_points_delete($id, $type) {
  db_delete('emh_points')
    ->condition('entity_id', $id)
    ->condition('entity_type', $type)
    ->execute();
  db_delete('emh_points_total')
    ->condition('entity_id', $id)
    ->condition('entity_type', $type)
    ->execute();
  db_delete('emh_points_txn')
    ->condition('source_id', $id)
    ->condition('source_type', $type)
    ->execute();
  db_delete('emh_points_txn')
    ->condition('dest_id', $id)
    ->condition('dest_type', $type)
    ->execute();
}

/**
 * Add points to an entity.
 */
function emh_points_add_points($entity, $points) {
  // To add point, there are almost no functional checks.
  if (!is_numeric($points) || (int)$points <= 0) {
    drupal_set_message(t('You should only add a positive number of points.'));
    return;
  }
  if (empty($entity)) {
    drupal_set_message(t('You should only add points to a valid entity'));
    return;
  }
  // Add points.
  db_insert('emh_points')
    ->fields(array(
      'entity_id' => $entity->id,
      'entity_type'=> $entity->type,
      'bundle' => $entity->bundle,
      'points' => $points,
      // At the creation, max points = points.
      'max_points' => $points,
      'last_update' => REQUEST_TIME,
      'expiration_date' => strtotime(variable_get('emh_points_expiration', '+ 1 year')),
    ))
    ->execute();
  // Update total.
  // Is there a total already
  $total = db_select('emh_points_total', 't')
    ->fields('t', array('total_points'))
    ->condition('entity_id', $entity->id)
    ->condition('entity_type', $entity->type)
    ->execute()->fetchField();
  if ($total === FALSE) {
    db_insert('emh_points_total')
      ->fields(array(
        'entity_id' => $entity->id,
        'entity_type' => $entity->type,
        'total_points' => $points
      ))
      ->execute();
  } else {
    db_merge('emh_points_total')
      ->key(array('entity_id' => $entity->id,'entity_type' => $entity->type))
      ->expression('total_points', 'total_points + :amount', array(':amount' => $points))
      ->execute();
  }
  // Raise Rules event.
  if ($entity->type == 'user') {
    $account = user_load($entity->id);
    rules_invoke_event('emh_points_new_points', $points, $account);
  }
  // Empty cache to reload the emh_points.
  entity_get_controller($entity->type)->resetCache(array($entity->id));
}

/**
 * Remove points from an entity.
 */
function emh_points_delete_points($entity, $points) {
  // Functional validation.
  if (!is_numeric($points) || (int)$points <= 0) {
    drupal_set_message(t('You should only remove a positive number of points.'));
    return;
  }
  // Does the entity have enough points ?
  $current_points = 0;
  $query = db_select('emh_points', 'p')
    ->condition('p.entity_type', $entity->type)
    ->condition('p.entity_id', $entity->id);
  $query->addExpression('SUM(p.points)');
  $current_points = $query->execute()->fetchField();
  if ($current_points < (int)$points) {
    drupal_set_message(t('It\'s impossible to remove those many points (only @points left).', array('@points' => $current_points)));
  }
  // Functional algorithm, remove points that will expire first.
  $to_be_removed = (int)$points;
  $query = db_select('emh_points', 'p')
    ->fields('p', array('pid', 'points'))
    ->condition('p.entity_type', $entity->type)
    ->condition('p.entity_id', $entity->id)
    ->condition('p.points', 0, '>')
    ->orderBy('p.expiration_date', 'ASC')
    ->execute();
  while($to_be_removed > 0) {
    $record = $query->fetchAssoc();
    if ($record['points'] >= $to_be_removed) {
      db_merge('emh_points')
        ->key(array('pid' => $record['pid']))
        ->fields(array(
          'points' => ($record['points'] - $to_be_removed),
          'last_update' => REQUEST_TIME,
        ))
        ->execute();
      $to_be_removed = 0;
    } else {
      db_merge('emh_points')
        ->key(array('pid' => $record['pid']))
        ->fields(array(
          'points' => 0,
          'last_update' => REQUEST_TIME,
        ))
        ->execute();
      $to_be_removed -= $record['points'];
    }
  }
  // Update total.
  db_merge('emh_points_total')
    ->key(array('entity_id' => $entity->id, 'entity_type' => $entity->type))
    ->expression('total_points', 'total_points - :amount', array(':amount' => $points))
    ->execute();
  // Empty cache to reload the emh_points.
  entity_get_controller($entity->type)->resetCache(array($entity->id));
}

/**
 * Implements hook_entity_load().
 */
function emh_points_entity_load($entities, $type) {
  // Eventually add total points for this entity.
  foreach($entities as $entity) {
    emh_points_entity_load_single($entity, $type);
  }
}

/**
 * Helper callback to load points on a single entity.
 */
function emh_points_entity_load_single($entity, $type) {
  switch($type) {
    case 'node': $wrapper = entity_metadata_wrapper('node', $entity);
    break;
    case 'user': $wrapper = entity_metadata_wrapper('user', $entity);
    break;
  /*
    default: $wrapper = $entity->wrapper();
    break;
   */
  }
  if (empty($wrapper)) {
    // taxonomy_vocabulary, taxonomy_term, field_collection_item
    // entity_legal_document, entity_legal_document_version, ...
    return;
  }
  $query = db_select('emh_points', 'p')
    ->condition('p.entity_type', $type)
    ->condition('p.entity_id', $wrapper->getIdentifier());
  $query->addExpression('SUM(p.points)');
  $points = $query->execute()->fetchField();
  if (!empty($points)) {
    $entity->emh_points = $points;
  } else {
    $entity->emh_points = 0;
  }
}

/**
 * Helper function to build "our" entity.
 */
function emh_points_build_entity_for_points($entity) {
  // If coming from Rules, it's already a metadata_wrapper...
  if ($entity instanceOf EntityDrupalWrapper) {
    $test_entity = clone $entity;
    if ('user' == $test_entity->getBundle()) {
      $type = 'user';
    } else {
      $type = 'node';
    }
  } else if (!empty($entity->type)) {
    $test_entity = entity_metadata_wrapper('node', $entity);
    $type = 'node';
  } else {
    $test_entity = entity_metadata_wrapper('user', $entity);
    $type = 'user';
  }
  $emh_entity = new StdClass();
  $emh_entity->type = $type;
  $emh_entity->bundle = $test_entity->getBundle();
  $emh_entity->id = $test_entity->getIdentifier();
  return $emh_entity;
}

/**
 * Helper function to display an entity.
 */
function emh_points_format_entity($entity) {
  if ($entity instanceOf EntityDrupalWrapper) {
    $test_entity = clone $entity;
    if ('user' == $test_entity->getBundle()) {
      $type = 'user';
    } else {
      $type = 'node';
    }
  } else if (!empty($entity->type)) {
    $test_entity = entity_metadata_wrapper('node', $entity);
    $type = 'node';
  } else if (!empty($entity->cid)) {
    $type = 'comment';
  } else if (!empty($entity->sid)) {
    $type = 'webform_submission';
  } else {
    $test_entity = entity_metadata_wrapper('user', $entity);
    $type = 'user';
  }
  $output = '';
  switch($type) {
    case 'user':
      if ($test_entity->getIdentifier() == 1) {
        $output = 'eMindHub';
      } else {
        $output = $test_entity->field_first_name->value() . ' ' . $test_entity->field_last_name->value();
      }
      break;
    case 'node':
      $output = $test_entity->getBundle();
      $output .= ' ';
      $output .= $test_entity->label();
      break;
    case 'comment':
      $user = user_load($entity->uid);
      $test_user = entity_metadata_wrapper('user', $user);
      $output = 'Comment : ' . $test_user->field_first_name->value() . ' ' . $test_user->field_last_name->value();
      break;
    case 'webform_submission':
      $user = user_load($entity->uid);
      $test_user = entity_metadata_wrapper('user', $user);
      $output = 'Webform : ' . $test_user->field_first_name->value() . ' ' . $test_user->field_last_name->value();
      break;
  }
  return $output;
}

/**
 * Main moving points action.
 */
function emh_points_move_points($source, $destination, $points) {
  $emh_source = emh_points_build_entity_for_points($source);
  $emh_destination = emh_points_build_entity_for_points($destination);
  // Remove points from source.
  emh_points_delete_points($emh_source, $points);
  // Add points to destination.
  emh_points_add_points($emh_destination, $points);
  $log = t('Move points from !source to !destination.', array('!source' => emh_points_format_entity($source), '!destination' => emh_points_format_entity($destination)));
  // Compute transaction.
  global $user;
  db_insert('emh_points_txn')
    ->fields(array(
      'uid' => $user->uid,
      'points'=> (int)$points,
      'time_stamp' => REQUEST_TIME,
      'description' => $log,
      'source_type' => $emh_source->type,
      'source_id' => $emh_source->id,
      'dest_type' => $emh_destination->type,
      'dest_id' => $emh_destination->id,
      'operation' => POINTS_TRANSFERT,
    ))
    ->execute();
}

/**
 * Main repartition form.
 */
function emh_points_arrange_form($form, &$form_state, $points, $type_source, $id_source, $type_dest, $dests) {
  // Access control.
  global $user;
  switch($type_source) {
    case 'user':
      if ($user->uid != $id_source) {
        drupal_access_denied();
        drupal_exit();
      }
      drupal_set_title(emh_points_format_entity($user));
      break;
    case 'node':
      $node = node_load($id_source);
      if (empty($node) || ($user->uid != 1 && $user->uid != $node->uid)) {
        drupal_access_denied();
        drupal_exit();
      }
      drupal_set_title($node->title);
      break;
    default:
      drupal_access_denied();
      drupal_exit();
      break;
  }
  // @TODO : verify that users/nodes have enough points.
  $form = array();
  $dests = explode(',', $dests);
  $default_points = floor($points / count($dests));
  $form['points'] = array(
    '#type' => 'value',
    '#default_value' => $points,
  );
  $form['type_source'] = array(
    '#type' => 'value',
    '#default_value' => $type_source,
  );
  $form['id_source'] = array(
    '#type' => 'value',
    '#default_value' => $id_source,
  );
  $form['type_dest'] = array(
    '#type' => 'value',
    '#default_value' => $type_dest,
  );
  foreach($dests as $dest) {
    if (empty($dest)) {
      continue;
    }
    switch($type_dest) {
    case 'node':
      $entity = node_load($dest);
      break;
    case 'user':
      $entity = user_load($dest);
      break;
    case 'comment':
      $entity = comment_load($dest);
      break;
    case 'webform_submission':
      module_load_include('inc', 'webform', 'includes/webform.submissions');
      $entity = webform_get_submission($id_source, $dest);
      break;
    }
    $form['dest_' . $dest] = array(
      '#type' => 'textfield',
      '#title' => t('Points for @dest', array('@dest' => emh_points_format_entity($entity))),
      '#default_value' => $default_points,
      '#element_validate' => array('element_validate_integer_positive'),
    );
  }
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Validate distribution'),
  );
  if ($type_source == 'node' && in_array($node->type, array('challenge', 'question1', 'webform'))) {
    $form['submit']['#value'] = t('Validate distribution and close the request');
    $form['baseline'] = array(
      '#markup' => '<p class="emh-title-baseline">' . t('Distribute <strong>@count points</strong> to best experts', array('@count' => $points)) . '</p>',
      '#weight' => -100,
    );
  }
  return $form;
}

/**
 * Validation callback to the form above.
 */
function emh_points_arrange_form_validate(&$form, &$form_state) {
  $points = $form_state['values']['points'];
  $total = 0;
  $elements = array();
  foreach($form_state['values'] as $key => $value) {
    if (substr($key, 0, 5) == 'dest_') {
      $elements[] = $key;
      $total += $value;
    }
  }
  if ($points > $total) {
    form_set_error(implode('][', $elements), t('You should assign all the @points points!', array('@points' => $points)));
  }
  if ($points < $total) {
    form_set_error(implode('][', $elements), t('Please distribute no more and no less than @points points.', array('@points' => $points)));
  }
}

/**
 * Submit callback for the form above.
 */
function emh_points_arrange_form_submit(&$form, &$form_state) {
  switch($form_state['values']['type_source']) {
  case 'node':
    $source = node_load($form_state['values']['id_source']);
    break;
  case 'user':
    $source = user_load($form_state['values']['id_source']);
    break;
  }
  foreach($form_state['values'] as $key => $value) {
    if (substr($key, 0, 5) == 'dest_') {
      $id = substr($key, 5);
      switch($form_state['values']['type_dest']) {
      case 'node':
        $dest = node_load($id);
        break;
      case 'user':
        $dest = user_load($id);
        break;
      case 'comment':
        $comment = comment_load($id);
        $dest = user_load($comment->uid);
        // Historise comment points.
        db_insert('emh_points_answers')
          ->fields(array(
            'nid' => $comment->nid,
            'uid' => $comment->uid,
            'answer_id' => $id,
            'points' => $value,
          ))
          ->execute();
        break;
      case 'webform_submission':
        module_load_include('inc', 'webform', 'includes/webform.submissions');
        $entity = webform_get_submission($form_state['values']['id_source'], $id);
        $dest = user_load($entity->uid);
        // Historise comment points.
        db_insert('emh_points_answers')
          ->fields(array(
            'nid' => $entity->nid,
            'uid' => $entity->uid,
            'answer_id' => $id,
            'points' => $value,
          ))
          ->execute();
        break;
      }
      emh_points_move_points($source, $dest, $value);
    }
  }
  switch($form_state['values']['type_source']) {
    case 'node':
      // Points have been distributed, we should close the request.
      emh_points_close_node($form_state['values']['id_source']);
      $form_state['redirect'] = 'node/' . $form_state['values']['id_source'];
      break;
    case 'user':
    default:
      $form_state['redirect'] = '<front>';
      break;
  }
  $points = $form_state['values']['points'];
  drupal_set_message(t('All the points have been distributed.'));
}

/**
 * Close a node if needed.
 */
function emh_points_close_node($nid) {
  $node = node_load($nid);
  if (!empty($node)) {
    switch($node->type) {
      case 'webform':
        $node->webform['status'] = 0;
        node_save($node);
        break;
      case 'question1':
        $node->comment = COMMENT_NODE_CLOSED;
        node_save($node);
        break;
      case 'challenge':
        $node->comment = COMMENT_NODE_CLOSED;
        node_save($node);
        break;
      default:
        // Nothing to do.
        break;
    }
  }
}

/**
 * Implements hook_action_info().
 * Essentially for VBO integration.
 */
function emh_points_action_info() {
  $actions = array();
  $actions['emh_points_give_points'] = array(
    'type' => 'entity',
    'label' => t('Give points to entities'),
    'configurable' => TRUE,
    'triggers' => array(),
    'permissions' => array('administer points'),
    'behavior' => array('emh'),
  );
  $actions['emh_points_remove_points'] = array(
    'type' => 'entity',
    'label' => t('Remove points from entities'),
    'configurable' => TRUE,
    'triggers' => array(),
    'permissions' => array('administer points'),
    'behavior' => array('emh'),
  );
  $actions['emh_points_transfert_points'] = array(
    'type' => 'entity',
    'label' => t('Transfer some of my points to these entities'),
    'configurable' => TRUE,
    'triggers' => array(),
    'permissions' => array('use points'),
    'behavior' => array('emh'),
  );
  $actions['emh_points_arrange_points'] = array(
    'type' => 'entity',
    'label' => t('Distribute some of my points to these entities'),
    'configurable' => TRUE,
    'triggers' => array(),
    'permissions' => array('use points'),
    'aggregate' => TRUE,
    'behavior' => array('emh'),
  );
  $actions['emh_points_arrange_group_points'] = array(
    'type' => 'user',
    'label' => t('Distribute group points to these entities'),
    'configurable' => TRUE,
    'triggers' => array(),
    'permissions' => array('use points'),
    'aggregate' => TRUE,
    'behavior' => array('emh'),
  );
  $actions['emh_points_arrange_node_points'] = array(
    'type' => 'entity',
    'label' => t('Distribute node points to these entities'),
    'configurable' => FALSE,
    'triggers' => array(),
    'permissions' => array('use points'),
    'aggregate' => TRUE,
    'behavior' => array('emh'),
  );
  return $actions;
}

//
// Actions for VBO integration.
//

/**
 * Give points to an entity.
 */
function emh_points_give_points(&$entity, $context) {
  $emh_entity = emh_points_build_entity_for_points($entity);
  $points = $context['points'];
  $log = $context['log'];
  emh_points_add_points($emh_entity, $points);
  // Create transaction.
  global $user;
  db_insert('emh_points_txn')
    ->fields(array(
      'uid' => $user->uid,
      'points'=> (int)$points,
      'time_stamp' => REQUEST_TIME,
      'description' => $log,
      'source_type' => 'user',
      'source_id' => 1,
      'dest_type' => $emh_entity->type,
      'dest_id' => $emh_entity->id,
      'operation' => POINTS_ADDITION,
    ))
    ->execute();
}

/**
 * Remove points from an entity.
 */
function emh_points_remove_points(&$entity, $context) {
  $emh_entity = emh_points_build_entity_for_points($entity);
  $points = $context['points'];
  $log = $context['log'];
  emh_points_delete_points($emh_entity, $points);
  // Compute transaction.
  global $user;
  db_insert('emh_points_txn')
    ->fields(array(
      'uid' => $user->uid,
      'points'=> (int)$points,
      'time_stamp' => REQUEST_TIME,
      'description' => $log,
      'source_type' => 'user',
      'source_id' => 1,
      'dest_type' => $emh_entity->type,
      'dest_id' => $emh_entity->id,
      'operation' => POINTS_REMOVAL,
    ))
    ->execute();
}

/**
 * Transfert points to an entity.
 */
function emh_points_transfert_points(&$entity, $context) {
  global $user;
  $points = $context['points'];
  emh_points_move_points($user, $entity, $points);
}

/**
 * Arrange points between users.
 */
function emh_points_arrange_points(&$entities, $context) {
  $points = $context['points'];
  $output = '';
  $type = 'user';
  foreach($entities as $id => $entity) {
    if (!empty($entity->type)) {
      $type = 'node';
    }
    if (!empty($entity->cid)) {
      $type = 'comment';
    }
    if (!empty($entity->sid)) {
      $type = 'webform_submission';
    }
    $output .= $id;
    $output .= ',';
  }
  $output = substr($output, 0, -1);
  global $user;
  drupal_goto('arrange/' . $points . '/user/' . $user->uid . '/' . $type  . '/' . $output);
}

/**
 * Arrange group points between users.
 */
function emh_points_arrange_group_points(&$entities, $context) {
  $points = $context['points'];
  $group = arg(1);
  $output = '';
  $type = 'user';
  foreach($entities as $id => $entity) {
    $output .= $id;
    $output .= ',';
  }
  $output = substr($output, 0, -1);
  drupal_goto('arrange/' . $points . '/node/' . $group . '/' . $type  . '/' . $output);
}

/**
 * Arrange node points between users.
 */
function emh_points_arrange_node_points(&$entities, $context) {
  $node = arg(1);
  $node = node_load($node);
  $output = '';
  $type = 'user';
  foreach($entities as $id => $entity) {
    $output .= $id;
    $output .= ',';
    if (!empty($entity->cid)) {
      $type = 'comment';
    }
    if (!empty($entity->sid)) {
      $type = 'webform_submission';
    }
  }
  $output = substr($output, 0, -1);
  drupal_goto('arrange/' . $node->emh_points . '/node/' . $node->nid . '/' . $type  . '/' . $output);
}

//
// Configuration forms for VBO integration.
//

/**
 * Configuration form for giving points.
 */
function emh_points_give_points_form($settings, &$form_state) {
  $form = array();
  $form['points'] = array(
    '#type' => 'textfield',
    '#title' => t('Points'),
    '#required' => TRUE,
    '#default_value' => '100',
    '#element_validate' => array('element_validate_integer_positive'),
  );
  $form['log'] = array(
    '#type' => 'textarea',
    '#title' => t('Log message'),
    '#required' => TRUE,
  );
  return $form;
}

/**
 * Submit callback for the form above.
 */
function emh_points_give_points_submit($form, &$form_state) {
  $return = array();
  $return['points'] = $form_state['values']['points'];
  $return['log'] = $form_state['values']['log'];
  return $return;
}

/**
 * Configuration form for removing points.
 */
function emh_points_remove_points_form($settings, &$form_state) {
  $form = array();
  $form['points'] = array(
    '#type' => 'textfield',
    '#title' => t('Points'),
    '#required' => TRUE,
    '#default_value' => '100',
    '#element_validate' => array('element_validate_integer_positive'),
  );
  $form['log'] = array(
    '#type' => 'textarea',
    '#title' => t('Log message'),
    '#required' => TRUE,
  );
  return $form;
}

/**
 * Submit callback for the form above.
 */
function emh_points_remove_points_submit($form, &$form_state) {
  $return = array();
  $return['points'] = $form_state['values']['points'];
  $return['log'] = $form_state['values']['log'];
  return $return;
}

/**
 * Configuration form for transfering points.
 */
function emh_points_transfert_points_form($settings, &$form_state) {
  $form = array();
  $form['points'] = array(
    '#type' => 'textfield',
    '#title' => t('Points'),
    '#required' => TRUE,
    '#default_value' => '100',
    '#element_validate' => array('element_validate_integer_positive'),
  );
  return $form;
}

/**
 * Submit callback for the form above.
 */
function emh_points_transfert_points_submit($form, &$form_state) {
  $return = array();
  $return['points'] = $form_state['values']['points'];
  return $return;
}

/**
 * Configuration for arranging points.
 */
function emh_points_arrange_points_form($settings, &$form_state) {
  $form = array();
  $form['points'] = array(
    '#type' => 'textfield',
    '#title' => t('Points'),
    '#required' => TRUE,
    '#default_value' => '100',
    '#element_validate' => array('element_validate_integer_positive'),
  );
  return $form;
}

/**
 * Submit callback for the form above.
 */
function emh_points_arrange_points_submit($form, &$form_state) {
  $return = array();
  $return['points'] = $form_state['values']['points'];
  return $return;
}

/**
 * Configuration for arranging points.
 */
function emh_points_arrange_group_points_form($settings, &$form_state) {
  $group = arg(1);
  $group = node_load($group);
  $form = array();
  $form['points'] = array(
    '#type' => 'textfield',
    '#title' => t('Points'),
    '#required' => TRUE,
    '#default_value' => $group->emh_points,
    '#element_validate' => array('element_validate_integer_positive', 'emh_points_validate_group_points'),
  );
  return $form;
}

/**
 * Validate callback for the form above.
 */
function emh_points_validate_group_points($element, &$form_state, $form) {
  $points = $element['#value'];
  $group = arg(1);
  $group = node_load($group);
  if ((int)$points > (int)$group->emh_points) {
    form_error($element, t('You don\'t have enough points (@points).', array('@points' => $group->emh_points)));
  }
}

/**
 * Submit callback for the form above.
 */
function emh_points_arrange_group_points_submit($form, &$form_state) {
  $return = array();
  $return['points'] = $form_state['values']['points'];
  return $return;
}


/**
 * Show user points history.
 * @param stdClass $account An user object: the current user is considered if no one is provided
 * @return array Page render array
 *
 * @todo Display a message if we try to view the points history of an user which doesn't use points
 */
function emh_points_show_user_history($account = NULL) {
  global $user;

  if (current_path() == 'points') {
    menu_set_active_item('user/' . $user->uid . '/points');
  }

  if ($account == NULL) {
    $account = $user;
  }

  return views_embed_view('points_history', 'block', $account->uid);
}

/**
 * Implements hook_entity_info().
 */
function emh_points_entity_info() {
  $info = array();
  $info['webform_submission'] = array(
    'label' => t('Simple Webform Submission Entity'),
    'base table' => 'webform_submissions',
    'fieldable' => FALSE,
    'entity keys' => array(
      'id' => 'sid',
      'label' => 'sid',
    ),
  );
  return $info;
}
