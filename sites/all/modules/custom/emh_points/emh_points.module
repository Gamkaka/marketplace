<?php

/**
 * @file
 * Points managements for EMH website.
 */
define('POINTS_ADDITION', 'addition');
define('POINTS_REMOVAL', 'removal');
define('POINTS_EXPIRATION', 'expiration');

/**
 * Implements hook_permission().
 */
function emh_points_permission() {
  return array(
    'administer points' => array('title' => t('Administer Points')),
  );
}

/**
 * Implements hook_menu().
 */
function emh_points_menu() {
  $items = array();
  $items['admin/emindhub/points'] = array(
    'title' => 'Points',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('emh_points_admin_form'),
    'access arguments' => array('administer points'),
    'file' => 'emh_points.admin.inc',
  );
  $items['admin/emindhub/points/user_add_points'] = array(
    'title' => 'Manage Points for Users',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('emh_points_manage_users_form'),
    'access arguments' => array('administer points'),
    'file' => 'emh_points.admin.inc',
    'type' => MENU_LOCAL_ACTION,
  );
  return $items;
}

/**
 * Implements hook_views_api().
 */
function emh_points_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'emh_points') . '/views',
  );
}

/**
 * Implements hook_cron().
 * Points expiration & expiration warning.
 */
function emh_points_cron() {
  // Points expiration.
  $query = db_select('emh_points', 'p')
    ->fields('p', array('pid', 'points', 'entity_id', 'entity_type'))
    ->condition('p.points', 0, '>')
    ->condition('p.expiration_date', REQUEST_TIME, '<')
    ->orderBy('p.expiration_date', 'ASC')
    ->execute();
  foreach($query as $row) {
    // Expire points.
    db_merge('emh_points')
      ->key(array('pid' => $row->pid))
      ->fields(array(
        'points' => 0,
        'last_update' => REQUEST_TIME,
      ))
      ->execute();
    // Create transaction.
    db_insert('emh_points_txn')
      ->fields(array(
        'uid' => 1,
        'points'=> (int)$row->points,
        'time_stamp' => REQUEST_TIME,
        'description' => t('Points expiration'),
        'entity_id' => $row->entity_id,
        'entity_type' => $row->entity_type,
        'operation' => POINTS_EXPIRATION,
      ))
      ->execute();
  }
  // Expiration warning.
  // @TODO.
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function emh_points_form_question1_node_form_alter(&$form, &$form_state) {
  $form['field_reward'][LANGUAGE_NONE]['0']['#element_validate'][] = 'emh_points_validate_enough_points';
}

/**
 * Validation callback to ensure you have enough points to create a Question.
 */
function emh_points_validate_enough_points($element, &$form_state, $form) {
  $points = $element['value']['#value'];
  $current_points = 0;
  global $user;
  $query = db_select('emh_points', 'p')
    ->condition('p.entity_type', 'user')
    ->condition('p.entity_id', $user->uid);
  $query->addExpression('SUM(p.points)');
  $current_points = $query->execute()->fetchField();
  if ($current_points < $points) {
    form_error($element, t('You don\'t have enough points (@count).', array('@count' => $current_points)));
  }
}

/**
 * Add points to an entity.
 */
function emh_points_add_points($entity, $points, $log) {
  // To add point, there are almost no functional checks.
  if (!is_numeric($points) || (int)$points <= 0) {
    drupal_set_message(t('You should only add a positive number of points.'));
    return;
  }
  if (empty($entity)) {
    drupal_set_message(t('You should only add points to a valid entity'));
    return;
  }
  // Add points.
  db_insert('emh_points')
    ->fields(array(
      'entity_id' => $entity->id,
      'entity_type'=> $entity->type,
      'bundle' => $entity->bundle,
      'points' => $points,
      // At the creation, max points = points.
      'max_points' => $points,
      'last_update' => REQUEST_TIME,
      'expiration_date' => strtotime(variable_get('emh_points_expiration', '+ 1 year')),
    ))
    ->execute();
  // Create transaction.
  global $user;
  db_insert('emh_points_txn')
    ->fields(array(
      'uid' => $user->uid,
      'points'=> (int)$points,
      'time_stamp' => REQUEST_TIME,
      'description' => $log,
      'entity_id' => $entity->id,
      'entity_type' => $entity->type,
      'operation' => POINTS_ADDITION,
    ))
    ->execute();
}

/**
 * Remove points from an entity.
 */
function emh_points_delete_points($entity, $points, $log) {
  // Functional validation.
  if (!is_numeric($points) || (int)$points <= 0) {
    drupal_set_message(t('You should only remove a positive number of points.'));
    return;
  }
  // Does the entity have enough points ?
  $current_points = 0;
  $query = db_select('emh_points', 'p')
    ->condition('p.entity_type', $entity->type)
    ->condition('p.entity_id', $entity->id);
  $query->addExpression('SUM(p.points)');
  $current_points = $query->execute()->fetchField();
  if ($current_points < (int)$points) {
    drupal_set_message(t('It\'s impossible to remove those many points (only @points left).', array('@points' => $current_points)));
  }
  // Functional algorithm, remove points that will expire first.
  $to_be_removed = (int)$points;
  $query = db_select('emh_points', 'p')
    ->fields('p', array('pid', 'points'))
    ->condition('p.entity_type', $entity->type)
    ->condition('p.entity_id', $entity->id)
    ->condition('p.points', 0, '>')
    ->orderBy('p.expiration_date', 'ASC')
    ->execute();
  while($to_be_removed > 0) {
    $record = $query->fetchAssoc();
    if ($record['points'] >= $to_be_removed) {
      db_merge('emh_points')
        ->key(array('pid' => $record['pid']))
        ->fields(array(
          'points' => ($record['points'] - $to_be_removed),
          'last_update' => REQUEST_TIME,
        ))
        ->execute();
      $to_be_removed = 0;
    } else {
      db_merge('emh_points')
        ->key(array('pid' => $record['pid']))
        ->fields(array(
          'points' => 0,
          'last_update' => REQUEST_TIME,
        ))
        ->execute();
      $to_be_removed -= $record['points'];
    }
  }
  // Compute transaction.
  global $user;
  db_insert('emh_points_txn')
    ->fields(array(
      'uid' => $user->uid,
      'points'=> (int)$points,
      'time_stamp' => REQUEST_TIME,
      'description' => $log,
      'entity_id' => $entity->id,
      'entity_type' => $entity->type,
      'operation' => POINTS_REMOVAL,
    ))
    ->execute();
}

/**
 * Implements hook_entity_load().
 */
function emh_points_entity_load($entities, $type) {
  // Eventually add total points for this entity.
  foreach($entities as $entity) {
    emh_points_entity_load_single($entity, $type);
  }
}

/**
 * Helper callback to load points on a single entity.
 */
function emh_points_entity_load_single($entity, $type) {
  switch($type) {
    case 'node': $wrapper = entity_metadata_wrapper('node', $entity);
    break;
    case 'user': $wrapper = entity_metadata_wrapper('user', $entity);
    break;
  /*
    default: $wrapper = $entity->wrapper();
    break;
   */
  }
  if (empty($wrapper)) {
    // taxonomy_vocabulary, taxonomy_term, field_collection_item
    // entity_legal_document, entity_legal_document_version, ...
    return;
  }
  $query = db_select('emh_points', 'p')
    ->condition('p.entity_type', $type)
    ->condition('p.entity_id', $wrapper->getIdentifier());
  $query->addExpression('SUM(p.points)');
  $points = $query->execute()->fetchField();
  if (!empty($points)) {
    $entity->emh_points = $points;
  } else {
    $entity->emh_points = 0;
  }
}

/**
 * Helper function to build "our" entity.
 */
function emh_points_build_entity_for_points($entity) {
  $test_entity = entity_metadata_wrapper('node', $entity);
  $type = 'node';
  if (!$test_entity->getIdentifier()) {
    $test_entity = entity_metadata_wrapper('user', $entity);
    $type = 'user';
  }
  $emh_entity = new StdClass();
  $emh_entity->type = $type;
  $emh_entity->bundle = $test_entity->getBundle();
  $emh_entity->id = $test_entity->getIdentifier();
  return $emh_entity;
}

/**
 * Helper function to display an entity.
 */
function emh_points_format_entity($entity) {
  $output = '';
  $test_entity = entity_metadata_wrapper('node', $entity);
  $type = 'node';
  if (!$test_entity->getIdentifier()) {
    $test_entity = entity_metadata_wrapper('user', $entity);
    $type = 'user';
  }
  switch($type) {
    case 'user':
      $output = t('User');
      $output .= ' ';
      $output .= $test_entity->field_first_name->value() . ' ' . $test_entity->field_last_name->value();
      break;
    case 'node':
      $output = t($test_entity->getBundle());
      $output .= ' ';
      $output .= $test_entity->getName();
      break;
  }
  return $output;
}

/**
 * Implements hook_action_info().
 * Essentially for VBO integration.
 */
function emh_points_action_info() {
  $actions = array();
  $actions['emh_points_give_points'] = array(
    'type' => 'entity',
    'label' => t('Give points to an entity'),
    'configurable' => TRUE,
    'triggers' => array(),
    'permissions' => array('administer points'),
  );
  $actions['emh_points_remove_points'] = array(
    'type' => 'entity',
    'label' => t('Remove points from an entity'),
    'configurable' => TRUE,
    'triggers' => array(),
    'permissions' => array('administer points'),
  );
  return $actions;
}

//
// Actions for VBO integration.
//

/**
 * Give points to an entity.
 */
function emh_points_give_points(&$entity, $context) {
  $emh_entity = emh_points_build_entity_for_points($entity);
  $points = $context['points'];
  $log = $context['log'];
  emh_points_add_points($emh_entity, $points, $log);
}

/**
 * Remove points from an entity.
 */
function emh_points_remove_points(&$entity, $context) {
  $emh_entity = emh_points_build_entity_for_points($entity);
  $points = $context['points'];
  $log = $context['log'];
  emh_points_delete_points($emh_entity, $points, $log);
}

//
// Configuration forms for VBO integration.
//

/**
 * Configuration form for giving points.
 */
function emh_points_give_points_form($settings, &$form_state) {
  $form = array();
  $form['points'] = array(
    '#type' => 'textfield',
    '#title' => t('Points'),
    '#required' => TRUE,
    '#default_value' => '100',
    '#element_validate' => array('element_validate_integer_positive'),
  );
  $form['log'] = array(
    '#type' => 'textarea',
    '#title' => t('Log message'),
    '#required' => TRUE,
  );
  return $form;
}

/**
 * Submit callback for the form above.
 */
function emh_points_give_points_submit($form, &$form_state) {
  $return = array();
  $return['points'] = $form_state['values']['points'];
  $return['log'] = $form_state['values']['log'];
  return $return;
}

/**
 * Configuration form for removing points.
 */
function emh_points_remove_points_form($settings, &$form_state) {
  $form = array();
  $form['points'] = array(
    '#type' => 'textfield',
    '#title' => t('Points'),
    '#required' => TRUE,
    '#default_value' => '100',
    '#element_validate' => array('element_validate_integer_positive'),
  );
  $form['log'] = array(
    '#type' => 'textarea',
    '#title' => t('Log message'),
    '#required' => TRUE,
  );
  return $form;
}

/**
 * Submit callback for the form above.
 */
function emh_points_remove_points_submit($form, &$form_state) {
  $return = array();
  $return['points'] = $form_state['values']['points'];
  $return['log'] = $form_state['values']['log'];
  return $return;
}
