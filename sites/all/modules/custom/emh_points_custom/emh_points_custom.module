<?php

/**
 * @file
 * Specific configuration of points for eMindHub.
 */

/**
 * Implements hook_form_FORM_ID_alter().
 */
function emh_points_custom_form_emh_points_admin_form_alter(&$form, &$form_state) {
  // Addition of the 3 global thresholds.
  $form['emh_points_challenge_threshold'] = array(
    '#type' => 'textfield',
    '#title' => t('Points threshold for Challenge'),
    '#default_value' => variable_get('emh_points_challenge_threshold', '100'),
    '#element_validate' => array('element_validate_integer_positive'),
  );
  $form['emh_points_question1_threshold'] = array(
    '#type' => 'textfield',
    '#title' => t('Points threshold for Question1'),
    '#default_value' => variable_get('emh_points_question1_threshold', '100'),
    '#element_validate' => array('element_validate_integer_positive'),
  );
  $form['emh_points_webform_threshold'] = array(
    '#type' => 'textfield',
    '#title' => t('Points threshold for Survey'),
    '#default_value' => variable_get('emh_points_webform_threshold', '100'),
    '#element_validate' => array('element_validate_integer_positive'),
  );
}

/**
 * Implements hook_form_FORM_ID_alter().
 * Add reward field validation.
 */
function emh_points_form_challenge_node_form_alter(&$form, &$form_state) {
  $form['field_reward'][LANGUAGE_NONE]['0']['#element_validate'][] = 'emh_points_validate_enough_points';
  $form['field_reward'][LANGUAGE_NONE]['0']['#element_validate'][] = 'emh_points_validate_challenge_threshold';
}
function emh_points_form_question1_node_form_alter(&$form, &$form_state) {
  $form['field_reward'][LANGUAGE_NONE]['0']['#element_validate'][] = 'emh_points_validate_enough_points';
  $form['field_reward'][LANGUAGE_NONE]['0']['#element_validate'][] = 'emh_points_validate_question1_threshold';
}
function emh_points_form_webform_node_form_alter(&$form, &$form_state) {
  $form['field_reward'][LANGUAGE_NONE]['0']['#element_validate'][] = 'emh_points_validate_enough_points';
  $form['field_reward'][LANGUAGE_NONE]['0']['#element_validate'][] = 'emh_points_validate_webform_threshold';
}

/**
 * Validation callback to ensure you have enough points to create a Question.
 */
function emh_points_validate_enough_points($element, &$form_state, $form) {
  $points = $element['value']['#value'];
  $current_points = 0;
  global $user;
  $query = db_select('emh_points', 'p')
    ->condition('p.entity_type', 'user')
    ->condition('p.entity_id', $user->uid);
  $query->addExpression('SUM(p.points)');
  $current_points = $query->execute()->fetchField();
  if ($current_points < $points) {
    form_error($element, t('You don\'t have enough points (@count).', array('@count' => $current_points)));
  }
}

function emh_points_validate_challenge_threshold($element, &$form_state, $form) {
  $threshold = variable_get('emh_points_challenge_threshold', 100);
  $points = $element['value']['#value'];
  if ($points < $threshold) {
    form_error($element, t('You should at least allocate @count points.', array('@count' => $threshold)));
  }
}

function emh_points_validate_question1_threshold($element, &$form_state, $form) {
  $threshold = variable_get('emh_points_question1_threshold', 100);
  $points = $element['value']['#value'];
  if ($points < $threshold) {
    form_error($element, t('You should at least allocate @count points.', array('@count' => $threshold)));
  }
}

function emh_points_validate_webform_threshold($element, &$form_state, $form) {
  $threshold = variable_get('emh_points_webform_threshold', 100);
  $points = $element['value']['#value'];
  if ($points < $threshold) {
    form_error($element, t('You should at least allocate @count points.', array('@count' => $threshold)));
  }
}
