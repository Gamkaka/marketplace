<?php
/**
 * @file
 * Code for eMindHub Request feature.
 */


/**
 * Implements hook_entity_info().
 */
function emh_request_entity_info() {
  $entities = array();

  $entities['emh_answer'] = array(
    'label' => t('Answer'),
    'entity class' => 'EmhAnswer',
    'controller class' => 'EntityAPIController',
    'base table' => 'emh_answer',
    'load hook' => 'emh_answer_load',
    'fieldable' => TRUE,
    'entity keys' => array(
      'id' => 'answer_id',
    ),
    'view modes' => array(
      'full' => array(
        'label' => t('Full'),
        'custom settings' => FALSE,
      ),
      'teaser' => array(
        'label' => t('Teaser'),
        'custom settings' => FALSE,
      ),
    ),
  );

  return $entities;
}


/**
 * Implements hook_entity_info_alter().
 */
//function emh_request_entity_info_alter(&$info) {
//  dpm($info);
//}


/**
 * Implements hook_entity_insert().
 */
function emh_request_entity_insert($entity, $type) {
  if ($type == 'comment') {
    $node = node_load($entity->nid);

    if ($node->type == 'challenge' || $node->type == 'question1') {
      $answer = new EmhAnswer(array(
        'request_id'      => $entity->nid,
        'ref_entity_type' => $type,
        'ref_entity_id'   => $entity->cid,
        'points'          => 0,
      ));
      $answer->save();
    }
  }
}


/**
 * Implements hook_entity_delete().
 */
function emh_request_entity_delete($entity, $type) {
  if ($type == 'comment') {
    $node = node_load($entity->nid);

    if ($node->type == 'challenge' || $node->type == 'question1') {
      $answer = emh_answer_load_by_ref_entity('comment', $entity);
      $answer->delete();
    }
  }
}


/**
 * Implements hook_webform_submission_insert().
 */
function emh_request_webform_submission_insert($node, $submission) {
  $answer = new EmhAnswer(array(
    'request_id'      => $node->nid,
    'ref_entity_type' => 'webform_submission',
    'ref_entity_id'   => $submission->sid,
    'points'          => 0,
  ));

  $answer->save();
}


/**
 * Implements hook_webform_submission_delete().
 */
function emh_request_webform_submission_delete($node, $submission) {
  $answer = emh_answer_load_by_ref_entity('webform_submission', $entity);
  $answer->delete();
}


/**
 * Loads a single answer entity.
 */
function emh_answer_load($id, $reset = FALSE) {
  $entity = entity_load('emh_answer', array($id), array(), $reset);
  return !empty($entity) ? reset($entity) : NULL;
}


/**
 * Loads multiple answer entities.
 */
function emh_answer_load_multiple($ids = FALSE, $conditions = array(), $reset = FALSE) {
  return entity_load('emh_answer', $ids, $conditions, $reset);
}


/**
 * Loads a single answer entity by the referenced entity info.
 */
function emh_answer_load_by_ref_entity($entity_type, $entity, $reset = FALSE) {
  if ($entity_type != 'webform_submission') {
    $ids = entity_extract_ids($entity_type, $entity);
    $id = $ids[0];
  } else {
    $id = $entity->sid;
  }

  $conditions = array(
    'ref_entity_type' => $entity_type,
    'ref_entity_id'   => $id,
  );

  $entity = entity_load('emh_answer', array(), $conditions, $reset);
  return !empty($entity) ? reset($entity) : NULL;
}


/**
 * Implements hook_views_api().
 */
function emh_request_views_api() {
  return array('api' => 3);
}



function emh_request_get_types() {
  $types = array( 'question1', 'webform', 'challenge' );
  return $types;
}

function emh_request_get_status($node) {

	$node = node_load($node);
  $workflow = array();

  if ($node->status == 0) {
    $workflow = array( 'status' => 'draft', 'label' => t('Draft') );
  }
  else {
    if (!empty($node->emh_points)) {

      $today = date('Y-m-d H:i:s');
      $deadline = $node->field_expiration_date['und'][0]['value'];
      $deadline = date('Y-m-d H:i:s', strtotime("$deadline +1 day"));
      if ($today < $deadline) {
        $workflow = array( 'status' => 'open', 'label' => t('Open') );
      }
      else {
        $workflow = array( 'status' => 'selection', 'label' => t('Selection in progress') );
      }
    }
    else {
      $workflow = array( 'status' => 'closed', 'label' => t('Closed') );
    }
  }

	if (!empty($workflow)) {
		$workflow = '<span class="emh-status ' . $workflow['status'] . '">' . $workflow['label'] . '</span>';
	}

	return $workflow;

}

function emh_request_count_answers($node) {

	$count = '';

	switch($node->type) {
		case 'webform':
			include_once(drupal_get_path('module', 'webform') . '/includes/webform.submissions.inc');
			$count = webform_get_submission_count($node->nid);
			break;
		case 'question1':
		case 'challenge':
			$count = $node->comment_count;
			break;
		default:
			// Nothing to do.
			break;
	}

	return $count;

}



/**
 * Implements hook_node_access().
 */
function emh_request_node_access($node, $op, $account) {
  if ($op == 'update') {
    switch ($node->type) {
    case 'webform':
      module_load_include('inc', 'webform', 'includes/webform.submissions');
      $submissions = webform_get_submissions($node->nid);
      if (!empty($submissions)) {
        return NODE_ACCESS_DENY;
      }
      break;
    case 'question1':
      if (!empty($node->comment_count)) {
        return NODE_ACCESS_DENY;
      }
    case 'challenge':
      if (!empty($node->comment_count)) {
        return NODE_ACCESS_DENY;
      }
      break;
    default:
      break;
    }
  }
  return NODE_ACCESS_IGNORE;
}


/* Hook form alter
 * node/add/type
 * node/$ID/edit
 */
function emh_request_form_node_form_alter(&$form, &$form_state, $form_id) {

  switch ($form['#node']->type) {

    case 'question1':
    case 'webform':
    case 'challenge':

      // Actions : Save as draft + Publish / Save
      $form['actions']['draft']['#value'] = t('Save draft');
      $form['actions']['submit']['#value'] = t('Publish');
      // If nid not empty, we're in the edit page
      if ( !empty($form['nid']['#value']) ) {
        $form['actions']['draft']['#access'] = FALSE;
        $form['actions']['submit']['#value'] = t('Save');
      }

      // Hide node access
    	$form['group_content_access']['#access'] =  FALSE;
      break;

    default:
      break;
  }

}

/**
 * Implements hook_block_info().
 */
function emh_request_block_info() {
  $blocks = array();

  $request_types = emh_request_get_types();
  foreach ($request_types as $type) {

    $blocks["request_help_$type"] = array(
      'info' => t("Add $type - Help"),
      'cache' => DRUPAL_CACHE_PER_ROLE,
      'weight' => -100,
      'status' => 1,
      'region' => 'sidebar_second',
      'visibility' => BLOCK_VISIBILITY_LISTED,
      'pages' => "node/add/$type",
    );

  }

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function emh_request_block_view($delta = '') {
  $block = array();

  $request_types = emh_request_get_types();
  foreach ($request_types as $type) {

    switch ($delta) {

      case 'request_help_' . $type:
        $data = variable_get("emh_block_request_help_$type", array('value' => '', 'format' => 'filtered_html'));
        $block = array(
          'subject' => '<none>',
          'content' => array(
            'text' => array(
              '#markup' => check_markup($data['value'], $data['format']),
            ),
          ),
        );
        break;
    }

  }

  return $block;
}

/**
 * Implements hook_block_configure().
 */
function emh_request_block_configure($delta='') {
  $form = array();

  $request_types = emh_request_get_types();
  foreach ($request_types as $type) {

    switch($delta) {
      case 'request_help_' . $type:

        $data = variable_get("emh_block_request_help_$type", array('value' => '', 'format' => 'filtered_html'));
        $form['text'] = array(
          '#type' => 'text_format',
          '#title' => t('Block text'),
          '#default_value' => $data['value'],
          '#format' => $data['format'],
        );
        break;
    }

  }

  return $form;
}

/**
 * Implements hook_block_save().
 */
function emh_request_block_save($delta = '', $edit = array()) {
  $request_types = emh_request_get_types();
  foreach ($request_types as $type) {

    switch($delta) {
      case 'request_help_' . $type:
        variable_set("emh_block_request_help_$type", $edit['text']);
        break;

    }
  }
}
