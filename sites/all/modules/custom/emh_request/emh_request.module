<?php
/**
 * @file
 * Code for eMindHub Request feature.
 */

/**
 * Implements hook_node_access().
 */
function emh_request_node_access($node, $op, $account) {
  if ($op == 'update') {
    switch ($node->type) {
      case 'question1':
      case 'webform':
      case 'challenge':
        /*
        $count = emh_request_count_answers($node);
        if ($count > 0) {
          return NODE_ACCESS_DENY;
        }
         */
        break;
      default:
        break;
    }
  }
  return NODE_ACCESS_IGNORE;
}

/**
 * Implements hook_preprocess_page().
 */
// #575
/*
function emh_request_preprocess_page(&$variables) {
  global $user;
  $uid = $user->uid;

  $message = '';
  $type = '';
  $count = '';
  $show_message = FALSE;

  $arg0 = arg(0);
  $arg1 = arg(1);
  $arg2 = arg(2);
  if ($arg0 == 'node' && empty($arg2)) {
    $node = node_load($arg1);
    $type = $node->type;
    $count = emh_request_count_answers($node);
    if (($count > 0) && ($node->uid == $uid)) $show_message = TRUE;
  }

  if ($show_message) {
    switch ($type) {

      case 'question1':
        drupal_set_message(t('You cannot edit a question with one or more answers.'), 'warning');
        break;
      case 'webform':
        drupal_set_message(t('You cannot edit a survey with one or more answers.'), 'warning');
        break;
      case 'challenge':
        drupal_set_message(t('You cannot edit a challenge with one or more answers.'), 'warning');
        break;
      default:
        break;

    }
  }

}
 */

/**
 * Implements hook_form_alter().
 * node/add/type
 * node/$ID/edit
 */
function emh_request_form_node_form_alter(&$form, &$form_state, $form_id) {

  switch ($form['#node']->type) {

    case 'question1':
    case 'webform':
    case 'challenge':

      // Actions : Save as draft + Publish / Save
      $form['actions']['draft']['#value'] = t('Save draft');
      $form['actions']['submit']['#value'] = t('Publish');
      // If nid not empty, we're in the edit page
      if ( !empty($form['nid']['#value']) ) {
        $form['actions']['draft']['#access'] = FALSE;
        $form['actions']['submit']['#value'] = t('Save');
      }

      // If node is published & there are some answers, only some updates are possible.
      // #575, 576
      $count = emh_request_count_answers($form['#node']);
      if ($form['#node']->status && $count > 0) {
        // Prevent domain & circle update.
        $form['field_domaine']['#disabled'] = TRUE;
        $form['field_request_circle']['#disabled'] = TRUE;
        $form['og_group_ref']['#disabled'] = TRUE;
      }


      // Hide node access
      $form['group_content_access']['#access'] =  FALSE;
      break;

    default:
      break;
  }

}

/**
 * Implements hook_block_info().
 */
function emh_request_block_info() {
  $blocks = array();

  $request_types = emh_request_get_types();
  foreach ($request_types as $type) {

    $blocks["request_help_$type"] = array(
      'info' => t("Add $type - Help"),
      'cache' => DRUPAL_CACHE_PER_ROLE,
      'weight' => -100,
      'status' => 1,
      'region' => 'sidebar_second',
      'visibility' => BLOCK_VISIBILITY_LISTED,
      'pages' => "node/add/$type",
    );

  }

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function emh_request_block_view($delta = '') {
  $block = array();

  $request_types = emh_request_get_types();
  foreach ($request_types as $type) {

    switch ($delta) {

      case 'request_help_' . $type:
        $data = variable_get("emh_block_request_help_$type", array('value' => '', 'format' => 'filtered_html'));
        $block = array(
          'subject' => '<none>',
          'content' => array(
            'text' => array(
              '#markup' => check_markup($data['value'], $data['format']),
            ),
          ),
        );
        break;
    }

  }

  return $block;
}

/**
 * Implements hook_block_configure().
 */
function emh_request_block_configure($delta='') {
  $form = array();

  $request_types = emh_request_get_types();
  foreach ($request_types as $type) {

    switch($delta) {
      case 'request_help_' . $type:

        $data = variable_get("emh_block_request_help_$type", array('value' => '', 'format' => 'filtered_html'));
        $form['text'] = array(
          '#type' => 'text_format',
          '#title' => t('Block text'),
          '#default_value' => $data['value'],
          '#format' => $data['format'],
        );
        break;
    }

  }

  return $form;
}

/**
 * Implements hook_block_save().
 */
function emh_request_block_save($delta = '', $edit = array()) {
  $request_types = emh_request_get_types();
  foreach ($request_types as $type) {

    switch($delta) {
      case 'request_help_' . $type:
        variable_set("emh_block_request_help_$type", $edit['text']);
        break;

    }
  }
}


/**
 * Implements hook_views_api().
 */
function emh_request_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'emh_request') . '/views',
  );
}


/**
 * Helper function to retrieve an answer, depending on the status.
 */
function emh_request_get_answer($entity, $type) {
  $output = '';

  switch ($type) {
    case 'comment':
      if (empty($entity->field_private_comment)) {
        // No status => body field.
        $output = $entity->comment_body[LANGUAGE_NONE]['0']['value'];
      }
      switch($entity->field_private_comment[LANGUAGE_NONE]['0']['value']) {
        case 0:
          $output = $entity->comment_body[LANGUAGE_NONE]['0']['value'];
          break;
        case 1:
          $output = $entity->field_private_comment_body[LANGUAGE_NONE]['0']['value'];
          break;
      }
      break;
    case 'webform_submission':
      foreach ($entity->data as $answer) {
        $output .= $answer[0] . '&nbsp;';
      }
      break;
  }

  return strip_tags(views_trim_text(
    array(
      'max_length' => 100,
      'word_boundary' => TRUE,
      'ellipsis' => TRUE,
      'html' => TRUE,
    ),
    $output
  ));
}

/**
 * Helper function to retrieve the list of request types.
 */
function emh_request_get_types() {
  $types = array( 'question1', 'webform', 'challenge' );
  return $types;
}

/**
 * Helper function to retrieve the status of a request.
 * draft / open / selection / closed
 */
function emh_request_get_status($nid) {

	$node = node_load($nid);
  $workflow = array();

  if ($node->status == 0) {
    $workflow = array( 'status' => 'draft', 'label' => t('Draft') );
  }
  else {
    if (!emh_points_get_points_closed_status($nid)) {

      $today = date('Y-m-d H:i:s');
      $deadline = $node->field_expiration_date[LANGUAGE_NONE][0]['value'];
      $deadline = date('Y-m-d H:i:s', strtotime("$deadline +1 day"));
      if ($today < $deadline) {
        $workflow = array( 'status' => 'open', 'label' => t('Open') );
      }
      else {
        $workflow = array( 'status' => 'selection', 'label' => t('Selection') );
      }
    }
    else {
      $workflow = array( 'status' => 'closed', 'label' => t('Closed') );
    }
  }

	return $workflow;

}

/**
 * Helper function to retrieve answers count.
 */
function emh_request_count_answers($node) {

	$count = 0;
  if (!empty($node)) {
    switch($node->type) {
    case 'webform':
      include_once(drupal_get_path('module', 'webform') . '/includes/webform.submissions.inc');
      $count = webform_get_submission_count($node->nid);
      break;
    case 'question1':
    case 'challenge':
      $count = $node->comment_count;
      break;
    default:
      // Nothing to do.
      break;
    }
  }

	return $count;

}

/**
 * Helper function to check if node has points.
 */
function emh_request_has_points($nid) {
  $node = node_load($nid);
  if (!empty($node) && !empty($node->emh_points)) return TRUE;
}

/**
 * Implements hook_node_insert().
 */
function emh_request_node_insert($node) {
  if ($node->status == NODE_PUBLISHED) {
    emh_request_try_to_notify($node);
  }
}

/**
 * Implements hook_node_update().
 */
function emh_request_node_update($node) {
  if ($node->status == NODE_PUBLISHED && $node->original->status == NODE_NOT_PUBLISHED) {
    emh_request_try_to_notify($node);
  }
}

/**
 * Helper function to notify people.
 */
function emh_request_try_to_notify($node) {
  // Validate pre-requisites.
  if (empty($node->field_domaine) || empty($node->og_group_ref)) {
    return;
  }
  // Get all user from groups.
  $users = array();
  $domains = array();
  $mails = array();
  foreach($node->og_group_ref[LANGUAGE_NONE] as $delta => $group) {
    $query = new EntityFieldQuery();
    $query
      ->entityCondition('entity_type', 'og_membership')
      ->propertyCondition('group_type', 'node', '=')
      ->propertyCondition('gid', $group['target_id'], '=')
      ->propertyCondition('entity_type', 'user', '=');
    $result = $query->execute();
    if (!empty($result['og_membership'])) {
      $og_memberships = og_membership_load_multiple(array_keys($result['og_membership']));
      foreach ($og_memberships as $og_membership) {
        $users[] = $og_membership->etid;
      }
    }
  }
  // Get all domains from node.
  foreach($node->field_domaine[LANGUAGE_NONE] as $delta => $term) {
    $domains[] = $term['tid'];
  }
  // Load users.
  $users = user_load_multiple($users);
  // For each user of each group, check domain.
  foreach($users as $user) {
    // If user has the right role(s) and wants to be notified.
    if (emh_user_is_expert($user) && !empty($user->field_notification_frequency[LANGUAGE_NONE]) && $user->field_notification_frequency[LANGUAGE_NONE][0]['tid'] == 48) {
      foreach($user->field_domaine[LANGUAGE_NONE] as $delta => $term) {
        // If right domain && notification authorized.
        if (in_array($term['tid'], $domains)) {
          rules_invoke_event('emh_request_notify_new_request', $node, $user);
          continue;
        }
      }
    }
  }
  // Webmaster copy
  rules_invoke_event('emh_request_notify_webmaster_new_request', $node);
}
