<?php
/**
 * @file
 * Code for eMindHub Request feature.
 */

/**
 * Implements hook_node_access().
 */
function emh_request_node_access($node, $op, $account) {
  if ($op == 'update') {
    switch ($node->type) {
      case 'question1':
      case 'webform':
      case 'challenge':
        $count = emh_request_count_answers($node);
        if ($count > 0) {
          return NODE_ACCESS_DENY;
        }
        break;
      default:
        break;
    }
  }
  return NODE_ACCESS_IGNORE;
}

/**
 * Implements hook_preprocess_page().
 */
function emh_request_preprocess_page(&$variables) {
  global $user;
  $uid = $user->uid;

  $message = '';
  $type = '';
  $count = '';
  $show_message = FALSE;

  if (arg(0) == 'node') {
    $node = node_load(arg(1));
    $type = $node->type;
    $count = emh_request_count_answers($node);
    if (($count > 0) && ($node->uid == $uid)) $show_message = TRUE;
  }

  if ($show_message) {
    switch ($type) {

      case 'question1':
        drupal_set_message(t('You cannot edit a question with one or more answers.'), 'warning');
        break;
      case 'webform':
        drupal_set_message(t('You cannot edit a survey with one or more answers.'), 'warning');
        break;
      case 'challenge':
        drupal_set_message(t('You cannot edit a challenge with one or more answers.'), 'warning');
        break;
      default:
        break;

    }
  }

}


/**
 * Implements hook_form_alter().
 * node/add/type
 * node/$ID/edit
 */
function emh_request_form_node_form_alter(&$form, &$form_state, $form_id) {

  switch ($form['#node']->type) {

    case 'question1':
    case 'webform':
    case 'challenge':

      // Actions : Save as draft + Publish / Save
      $form['actions']['draft']['#value'] = t('Save draft');
      $form['actions']['submit']['#value'] = t('Publish');
      // If nid not empty, we're in the edit page
      if ( !empty($form['nid']['#value']) ) {
        $form['actions']['draft']['#access'] = FALSE;
        $form['actions']['submit']['#value'] = t('Save');
      }

      // Hide node access
      $form['group_content_access']['#access'] =  FALSE;
      break;

    default:
      break;
  }

}

/**
 * Implements hook_block_info().
 */
function emh_request_block_info() {
  $blocks = array();

  $request_types = emh_request_get_types();
  foreach ($request_types as $type) {

    $blocks["request_help_$type"] = array(
      'info' => t("Add $type - Help"),
      'cache' => DRUPAL_CACHE_PER_ROLE,
      'weight' => -100,
      'status' => 1,
      'region' => 'sidebar_second',
      'visibility' => BLOCK_VISIBILITY_LISTED,
      'pages' => "node/add/$type",
    );

  }

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function emh_request_block_view($delta = '') {
  $block = array();

  $request_types = emh_request_get_types();
  foreach ($request_types as $type) {

    switch ($delta) {

      case 'request_help_' . $type:
        $data = variable_get("emh_block_request_help_$type", array('value' => '', 'format' => 'filtered_html'));
        $block = array(
          'subject' => '<none>',
          'content' => array(
            'text' => array(
              '#markup' => check_markup($data['value'], $data['format']),
            ),
          ),
        );
        break;
    }

  }

  return $block;
}

/**
 * Implements hook_block_configure().
 */
function emh_request_block_configure($delta='') {
  $form = array();

  $request_types = emh_request_get_types();
  foreach ($request_types as $type) {

    switch($delta) {
      case 'request_help_' . $type:

        $data = variable_get("emh_block_request_help_$type", array('value' => '', 'format' => 'filtered_html'));
        $form['text'] = array(
          '#type' => 'text_format',
          '#title' => t('Block text'),
          '#default_value' => $data['value'],
          '#format' => $data['format'],
        );
        break;
    }

  }

  return $form;
}

/**
 * Implements hook_block_save().
 */
function emh_request_block_save($delta = '', $edit = array()) {
  $request_types = emh_request_get_types();
  foreach ($request_types as $type) {

    switch($delta) {
      case 'request_help_' . $type:
        variable_set("emh_block_request_help_$type", $edit['text']);
        break;

    }
  }
}


/**
 * Helper function to retrieve an answer, depending on the status.
 */
function emh_request_get_answer($entity, $type) {
  $output = '';

  switch ($type) {
    case 'comment':
      if (empty($entity->field_private_comment)) {
        // No status => body field.
        $output = $entity->comment_body[LANGUAGE_NONE]['0']['value'];
      }
      switch($entity->field_private_comment[LANGUAGE_NONE]['0']['value']) {
        case 0:
          $output = $entity->comment_body[LANGUAGE_NONE]['0']['value'];
          break;
        case 1:
          $output = $entity->field_private_comment_body[LANGUAGE_NONE]['0']['value'];
          break;
      }
      break;
    case 'webform_submission':
      foreach ($entity->data as $answer) {
        $output .= $answer[0] . '&nbsp;';
      }
      break;
  }

  return strip_tags(views_trim_text(
    array(
      'max_length' => 50,
      'word_boundary' => TRUE,
      'ellipsis' => TRUE,
      'html' => TRUE,
    ),
    $output
  ));
}

/**
 * Helper function to retrieve the list of request types.
 */
function emh_request_get_types() {
  $types = array( 'question1', 'webform', 'challenge' );
  return $types;
}

/**
 * Helper function to retrieve the status of a request.
 */
function emh_request_get_status($node) {

	$node = node_load($node);
  $workflow = array();

  if ($node->status == 0) {
    $workflow = array( 'status' => 'draft', 'label' => t('Draft') );
  }
  else {
    if (!empty($node->emh_points)) {

      $today = date('Y-m-d H:i:s');
      $deadline = $node->field_expiration_date['und'][0]['value'];
      $deadline = date('Y-m-d H:i:s', strtotime("$deadline +1 day"));
      if ($today < $deadline) {
        $workflow = array( 'status' => 'open', 'label' => t('Open') );
      }
      else {
        $workflow = array( 'status' => 'selection', 'label' => t('Selection in progress') );
      }
    }
    else {
      $workflow = array( 'status' => 'closed', 'label' => t('Closed') );
    }
  }

	if (!empty($workflow)) {
		$workflow = '<span class="emh-status ' . $workflow['status'] . '">' . $workflow['label'] . '</span>';
	}

	return $workflow;

}

/**
 * Helper function to retrieve answers count.
 */
function emh_request_count_answers($node) {

	$count = '';

	switch($node->type) {
		case 'webform':
			include_once(drupal_get_path('module', 'webform') . '/includes/webform.submissions.inc');
			$count = webform_get_submission_count($node->nid);
			break;
		case 'question1':
		case 'challenge':
			$count = $node->comment_count;
			break;
		default:
			// Nothing to do.
			break;
	}

	return $count;

}
