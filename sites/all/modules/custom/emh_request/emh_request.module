<?php

/**
 * Implements hook_node_access().
 */
function emh_request_node_access($node, $op, $account) {
  if ($op == 'update') {
    switch ($node->type) {
    case 'webform':
      module_load_include('inc', 'webform', 'includes/webform.submissions');
      $submissions = webform_get_submissions($node->nid);
      if (!empty($submissions)) {
        return NODE_ACCESS_DENY;
      }
      break;
    case 'question1':
      if (!empty($node->comment_count)) {
        return NODE_ACCESS_DENY;
      }
    case 'challenge':
      if (!empty($node->comment_count)) {
        return NODE_ACCESS_DENY;
      }
      break;
    default:
      break;
    }
  }
  return NODE_ACCESS_IGNORE;
}


/* Hook form alter
 * node/add/type
 * node/$ID/edit
 */
function emh_request_form_node_form_alter(&$form, &$form_state, $form_id) {

  switch ($form['#node']->type) {

    case 'question1':
    case 'webform':
    case 'challenge':

      // Actions : Save as draft + Publish / Save
      $form['actions']['draft']['#value'] = t('Save draft');
      $form['actions']['submit']['#value'] = t('Publish');
      // If nid not empty, we're in the edit page
      if ( !empty($form['nid']['#value']) ) {
        $form['actions']['draft']['#access'] = FALSE;
        $form['actions']['submit']['#value'] = t('Save');
      }

      // Hide node access
    	$form['group_content_access']['#access'] =  FALSE;
      break;

    default:
      break;
  }

}


function emh_request_get_status($node) {

	$node = node_load($node);
  $workflow = array();

  if ($node->status == 0) {
    $workflow = array( 'status' => 'draft', 'label' => t('Draft') );
  }
  else {
    if (!empty($node->emh_points)) {

      $today = date('Y-m-d H:i:s');
      $deadline = $node->field_expiration_date['und'][0]['value'];
      $deadline = date('Y-m-d H:i:s', strtotime("$deadline +1 day"));
      if ($today < $deadline) {
        $workflow = array( 'status' => 'open', 'label' => t('Open') );
      }
      else {
        $workflow = array( 'status' => 'selection', 'label' => t('Selection in progress') );
      }
    }
    else {
      $workflow = array( 'status' => 'closed', 'label' => t('Closed') );
    }
  }

	if (!empty($workflow)) {
		$workflow = '<span class="emh-status ' . $workflow['status'] . '">' . $workflow['label'] . '</span>';
	}

	return $workflow;

}


function emh_request_count_answers($node) {

	$count = '';

	switch($node->type) {
		case 'webform':
			include_once(drupal_get_path('module', 'webform') . '/includes/webform.submissions.inc');
			$count = webform_get_submission_count($node->nid);
			break;
		case 'question1':
		case 'challenge':
			$count = $node->comment_count;
			break;
		default:
			// Nothing to do.
			break;
	}

	return $count;

}


/**
 * Implements hook_block_configure().
 */
function emh_request_block_configure($delta='') {
  $form = array();

  switch($delta) {
    case 'question_help':
    case 'survey_help':
    case 'challenge_help':
      // Text field form element
      $form['text_body'] = array(
        '#type' => 'text_format',
        '#title' => t('Block body'),
        '#default_value' => variable_get('text_variable', ''),
      );
      break;
  }
  return $form;
}

/**
 * Implements hook_block_save().
 */
function emh_request_block_save($delta = '', $edit = array()) {
  switch($delta) {
    case 'question_help':
    case 'survey_help':
    case 'challenge_help':
      // Saving the WYSIWYG text
      variable_set('text_variable', $edit['text_body']['value']);
      break;
  }
}

/**
 * Implements hook_block_info().
 */
function emh_request_block_info() {
  $blocks = array();

  $blocks['question_help'] = array(
    'info' => t('Add question - Help'),
    'cache' => DRUPAL_CACHE_PER_ROLE,
    'weight' => -100,
    'status' => 1,
    'region' => 'sidebar_second',
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'pages' => 'node/add/question\nnode/add/question1',
  );

  $blocks['survey_help'] = array(
    'info' => t('Add survey - Help'),
    'cache' => DRUPAL_CACHE_PER_ROLE,
    'weight' => -100,
    'status' => 1,
    'region' => 'sidebar_second',
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'pages' => 'node/add/webform\nnode/add/survey',
  );

  $blocks['challenge_help'] = array(
    'info' => t('Add challenge - Help'),
    'cache' => DRUPAL_CACHE_PER_ROLE,
    'weight' => -100,
    'status' => 1,
    'region' => 'sidebar_second',
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'pages' => 'node/add/challenge',
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function emh_request_block_view($delta = '') {
  $block = array();

  switch ($delta) {

    case 'question_help':
    case 'survey_help':
    case 'challenge_help':
      if (!user_is_logged_in()) {
        break;
      }

      $block = array(
        'title' => '<none>',
        'content' => request_help_view(),
      );
      break;
  }

  return $block;
}

/**
 * Custom function to assemble renderable array for block content.
 * Returns a renderable array with the block content.
 * @return
 *   returns a renderable array of block content.
 */
function request_help_view() {
  $block = array();

  // Capture WYSIWYG text from the variable
  $text = variable_get('text_variable', '');

  // Block output in HTML with div wrapper
  $block = array(
    'message' => array(
      '#type' => 'markup',
      '#markup' => $text,
      '#suffix' => '',
    ),
  );

  return $block;
}
