<?php
/**
* @file
* Code for eMindHub survey feature.
*/


/**
 * Implements hook_menu_alter().
 */
function emh_survey_menu_alter(&$items) {
  // Alters webform items titles
  // $items['node/%node/edit']['title callback'] = 'emh_survey_title_callback';
  // $items['node/%node/edit']['title arguments'] = array(1);
  $items['node/%webform_menu/webform']['title'] = t('Questions');

  // Disable access
  $items['node/%webform_menu/webform/conditionals']['access callback'] = FALSE;
  $items['node/%webform_menu/webform/emails']['access callback'] = FALSE;
  $items['node/%webform_menu/webform/configure']['access callback'] = FALSE;
  $items['node/%webform_menu/webform-results']['access callback'] = FALSE;
  $items['node/%webform_menu/webform-results/analysis']['access callback'] = FALSE;
  $items['node/%webform_menu/webform-results/table']['access callback'] = FALSE;
  $items['node/%webform_menu/webform-results/download']['access callback'] = FALSE;

}


/**
 * Title callback.
 */
// function emh_survey_title_callback($node) {
//   if ($node->type == 'webform') {
//     return t('Edit survey');
//   }
//   return t('Edit');
// }


/**
 * Implements hook_form_alter().
 */
function emh_survey_form_alter(&$form, &$form_state, $form_id) {

  // TODO: cibler le formulaire de soumission

	if ((isset($form['#node']) && $form['#node']->type == 'webform')) {
		// $form['actions']['submit']['#value'] = t('Submit my answer');

		// echo '<pre>' . print_r($form, TRUE) . '</pre>';
	  // echo '<pre>' . print_r(element_children($form), TRUE) . '</pre>';
    if ( isBusinessUser() && !empty($form['submitted']) ) {
      foreach( $form['submitted'] as $key => $element ) {
        if (is_array($element) && !empty($element['#type']) && $element['#type'] == 'textarea') {
          $form['submitted'][$key]['#disabled'] = 'disabled';
          $form['actions']['#access'] = FALSE;
        }
      }
    }
  }

}


/* Webform hook form alter
 * node/add/webform
 * node/$ID/edit
 */
function emh_survey_form_webform_node_form_alter(&$form, &$form_state, $form_id) {

	// Add class before & after fields
  $form['field_duration_of_the_mission']['#prefix'] = '<div class="form-group-2col row">';
  $form['field_start_date']['#suffix'] = '</div>';

  $form['field_document']['#prefix'] = '<div class="form-group-2col row">';
  $form['field_image']['#suffix'] = '</div>';

  $form['field_domaine']['#prefix'] = '<div class="form-group-2col row">';
  $form['field_tags']['#suffix'] = '</div>';

  $form['field_anonymous']['#prefix'] = '<div class="form-group-3col row">';
  $form['field_use_my_entreprise']['#suffix'] = '</div>';

  $form['field_expiration_date']['#prefix'] = '<div class="form-group-2col row">';
	$form['field_reward']['und'][0]['value']['#title'] = t('Cost (minimum 500 points required)');
  $form['field_reward']['#suffix'] = '</div>';

	$form['field_document']['und'][0]['#process'][] = 'emindhub_my_file_element_process';
  $form['field_image']['und'][0]['#process'][] = 'emindhub_my_file_element_process';

	$form['actions']['draft']['#value'] = t('Save as draft');

  $form['actions']['submit']['#value'] = t('Publish');
  if ($form['#node']->type == 'webform' && empty($form['#node']->webform['components'])) {
    $form['actions']['submit']['#disabled'] = TRUE;
  }

  $webform_id = $form['#node']->nid;
  if (!empty($webform_id)) {
    $form['actions']['goquestions']['#markup'] = t('<a href="@url" class="btn btn-default pull-right" id="edit-back">Questions <span class="glyphicon glyphicon-chevron-right" aria-hidden="true"></span></a>', array('@url' => url('node/' . $webform_id . '/webform')));
  	$form['actions']['goquestions']['#access'] = TRUE;
  }

	$form['group_content_access']['#access'] =  FALSE;

  // echo '<pre>' . print_r($form, TRUE) . '</pre>';

}


/* Webform hook form alter
 * node/$ID/webform
 * node/$ID/webform/components
 */
function emh_survey_form_webform_components_form_alter(&$form, &$form_state, $form_id) {

	// echo '<pre>' . print_r($form, TRUE) . '</pre>';
	// echo '<pre>' . print_r($form_state, TRUE) . '</pre>';

	// Hide unnecessary fields
	foreach (
		array(
			'type',
			'required',
		) as $field) {
		$form['add'][$field]['#type'] = 'hidden';
	}

	$form['add']['type']['#default_value'] = 'textarea';

	$form['actions']['submit']['#value'] = t('Save order of questions');

	$webform_id = $form['#node']->nid;
	$form['actions']['goback']['#markup'] = t('<a href="@url" class="btn btn-default pull-right" id="edit-back"><span class="glyphicon glyphicon-chevron-left" aria-hidden="true"></span> Edit</a>', array('@url' => url('node/' . $webform_id . '/edit')));
	$form['actions']['goback']['#access'] = TRUE;

	// $form['actions']['see']['#markup'] = t('<a href="@url" class="btn-submit btn btn-primary form-submit" id="edit-view">Publish your survey</a>', array('@url' => url('node/' . $webform_id)));
	// $form['actions']['see']['#access'] = TRUE;

  $form['#submit'][] = 'emh_survey_remove_param';
}

/**
 * Helper submit callback that removes cid parameter.
 */
function emh_survey_remove_param($form, &$form_state) {
  $nid = $form_state['values']['nid'];
  $form_state['redirect'] = 'node/' . $nid . '/webform/components';
}


/* Webform hook form alter
 * node/$ID/webform/components/$ID
 */
function emh_survey_form_webform_component_edit_form_alter(&$form, &$form_state, $form_id) {

	// echo '<pre>' . print_r($form, TRUE) . '</pre>';
	// echo '<pre>' . print_r($form_state, TRUE) . '</pre>';

	// Question label
	$form['name']['#title'] = t('Your question');

	// Hide unnecessary fields
	foreach (
		array(
			'form_key',
			'value',
			'display',
			'validation',
			'position',
		) as $field) {
		$form[$field]['#access'] = FALSE;
	}

	// Hide unnecessary field description
	$form['name']['#description'] = '';
	$form['extra']['description']['#title'] = t('Description (additional information to clarify the meaning of your question)');
	$form['extra']['description']['#description'] = '';

	// Change description format (textarea is too big)
	$form['extra']['description']['#type'] = 'textfield';

	// We hide mandatory field BUT we don't forget to force it
	$form['validation']['required']['#default_value'] = 1;

	// Action submit label
	$form['actions']['submit']['#value'] = t('Save your question');

	// echo '<pre>' . print_r($form, TRUE) . '</pre>';
}

/**
 * Implements hook_node_defaults_alter().
 */
function emh_survey_webform_node_defaults_alter(&$defaults) {
  $defaults['allow_draft'] = '1';
  $defaults['enforce_limit'] = 'yes';
  $defaults['progressbar_bar'] = '0';
  $defaults['submit_limit'] = '1';
  $defaults['submit_interval'] = '-1';
  $defaults['submit_notice'] = '0';
  // echo '<pre>' . print_r($defaults, true) . '</pre>'; die;
}

/**
 * Implements hook_views_api().
 */
function emh_survey_views_api() {
  return array('api' => 3);
}

/**
 * Implements hook_node_presave().
 */
function emh_survey_node_presave($node) {
  if ($node->type == 'webform') {
    if ($node->status == 1 && (empty($node->webform) || empty($node->webform['components']))) {
      // Unpublish the node
      $node->status = 0;
      // Inform the user.
      drupal_set_message(t('You cannot publish a survey without any question.'), 'warning');
    }
  }
}
