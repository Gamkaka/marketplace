<?php
/**
* @file
* Code for eMindHub survey feature.
*/

/**
 * Implements hook_menu_alter().
 */
function emh_survey_menu_alter(&$items) {

  // Disable access
  $items['node/%webform_menu/webform']['access callback'] = '_emh_access_full_access';
  $items['node/%webform_menu/webform']['access arguments'] = array(1);
  $items['node/%webform_menu/webform/components']['access callback'] = '_emh_access_full_access';
  $items['node/%webform_menu/webform/components']['access arguments'] = array(1);
  $items['node/%webform_menu/webform/components/%webform_menu_component/clone']['access callback'] = '_emh_access_full_access';
  $items['node/%webform_menu/webform/components/%webform_menu_component/clone']['access arguments'] = array(1);
  $items['node/%webform_menu/webform/conditionals']['access callback'] = '_emh_access_full_access';
  $items['node/%webform_menu/webform/conditionals']['access arguments'] = array(1);
  $items['node/%webform_menu/webform/configure']['access callback'] = '_emh_access_full_access';
  $items['node/%webform_menu/webform/configure']['access arguments'] = array(1);
  $items['node/%webform_menu/webform/emails']['access callback'] = '_emh_access_full_access';
  $items['node/%webform_menu/webform/emails']['access arguments'] = array(1);
  $items['node/%webform_menu/webform-results']['access callback'] = '_emh_access_full_access';
  $items['node/%webform_menu/webform-results']['access arguments'] = array(1);
  $items['node/%webform_menu/webform-results/analysis']['access callback'] = '_emh_access_full_access';
  $items['node/%webform_menu/webform-results/analysis']['access arguments'] = array(1);
  $items['node/%webform_menu/webform-results/table']['access callback'] = '_emh_access_full_access';
  $items['node/%webform_menu/webform-results/table']['access arguments'] = array(1);
  $items['node/%webform_menu/webform-results/download']['access callback'] = '_emh_access_full_access';
  $items['node/%webform_menu/webform-results/download']['access arguments'] = array(1);

  // Node page tabs.
  $items['node/%webform_menu/edit/components'] = array(
    'title' => t('General infos'),
    'page callback' => 'webform_components_page',
    'page arguments' => array(1),
    'access callback' => 'webform_node_update_access',
    'access arguments' => array(1),
    'file' => 'includes/webform.components.inc',
    'file path' => drupal_get_path('module', 'webform'), // Useful outside of webform directory !
    'weight' => 0,
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['node/%webform_menu/edit/questions'] = array(
    'title' => t('Questions'),
    'page callback' => 'webform_components_page',
    'page arguments' => array(1),
    'access callback' => 'webform_node_update_access',
    'access arguments' => array(1),
    'file' => 'includes/webform.components.inc',
    'file path' => drupal_get_path('module', 'webform'), // Useful outside of webform directory !
    'weight' => 1,
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );

}

/**
 * Implements hook_webform_results_access().
 */
function emh_survey_webform_results_access($node, $account) {
  return emh_access_user_can_see_full_answer($node->nid);
}

/**
 * Implements hook_webform_submission_access().
 */
function emh_survey_webform_submission_access($node, $submission, $op = 'view', $account = NULL) {
  switch ($op) {
    case 'view':
      return emh_access_user_can_see_full_answer($node->nid);
      break;
  }
}

/**
 * Implements hook_form_alter().
 */
function emh_survey_form_alter(&$form, &$form_state, $form_id) {

  if (isset($form['#node']->type) && $form_id == $form['#node']->type . '_node_form' && variable_get('webform_node_' . $form['#node']->type, FALSE)) {
    $node = $form['#node'];
    // Preserve all Webform options currently set on the node.
    $form['webform'] = array(
      '#type' => 'value',
      '#value' => $node->webform,
    );
  }

  if (isset($form['#node']->nid)) {
    $survey_ID = $form['#node']->nid;
    switch ($form_id) {
      case "webform_client_form_$survey_ID":
        if (!empty($form['#is_draft']) || empty($form['#submission'])) {
          $form['actions']['submit']['#value'] = t('Publish my answer');
          $form['#submit'][] = '_emh_survey_webform_client_form_submit';
        }
        break;
      default:
        break;
    }
  }

	if ((isset($form['#node']) && $form['#node']->type == 'webform')) {
    $nid = $form['#node']->nid;
    if (emh_access_user_can_see_full_answer($nid) && !empty($form['submitted']) ) {
      foreach( $form['submitted'] as $key => $element ) {
        if (is_array($element) && !empty($element['#type']) && $element['#type'] == 'textarea') {
          $form['submitted'][$key]['#disabled'] = 'disabled';
          $form['actions']['#access'] = FALSE;
        }
      }
    }
  }

}


/**
 * Submit handler for the webform node form.
 *
 * Redirect the user to the components form on new node inserts. Note that this
 * fires after the hook_submit() function above.
 */
function emh_survey_webform_form_submit($form, &$form_state) {
  $form_state['redirect'] = 'node/' . $form_state['nid'] . '/edit/questions';
}


/**
 * Implements hook_form_alter().
 * node/add/webform
 * node/$ID/edit
 */
function emh_survey_form_webform_node_form_alter(&$form, &$form_state, $form_id) {

  $form['field_reward'][LANGUAGE_NONE][0]['value']['#title'] = t('Cost');
  $form['field_reward'][LANGUAGE_NONE][0]['value']['#description'] = t('A minimum of !value points is required only if you have selected circle <i>All experts</i> or <i>Sponsors</i>.', array('!value' => variable_get('emh_points_webform_threshold', '500')));

	$form['field_document'][LANGUAGE_NONE][0]['#process'][] = 'emindhub_my_file_element_process';
  $form['field_image'][LANGUAGE_NONE][0]['#process'][] = 'emindhub_my_file_element_process';

  // Publication unactive unless there's 1 question added
  // Node in creation state = no nid
  if (!isset($form['#node']->nid)) {
    $form['actions']['draft']['#value'] = t('Save draft and continue');
    $form['actions']['submit']['#disabled'] = TRUE;
    $form['actions']['draft']['#submit'][] = 'emh_survey_webform_form_submit';
  }
  // Node created, unpublished
  if ($form['#node']->status == NODE_NOT_PUBLISHED) {
    $form['actions']['submit']['#value'] = t('Save draft');
    $form['actions']['publish'] = array(
      '#type' => 'submit',
      '#value' => t('Publish'),
      '#submit' => array('emh_survey_webform_components_form_publish'),
    );
    // Without components
    if (empty($form['#node']->webform['components'])) {
      drupal_set_message(t('You cannot publish a survey without any question, please add one or more questions.'), 'warning');
      $form['actions']['publish']['#disabled'] = TRUE;
    }
  } else {
    $form['actions']['delete']['#access'] = FALSE;
  }

}


/**
 * Implements hook_form_alter().
 * node/add/webform
 * node/$ID/edit
 */
function emh_survey_form_webform_configure_form_alter(&$form, &$form_state, $form_id) {

  $form['advanced']['allow_draft']['#default_value'] = 1;
  $form['#node']->webform['allow_draft'] = 1;

}


/**
 * Implements hook_form_alter().
 * node/$ID/webform
 * node/$ID/webform/components
 */
function emh_survey_form_webform_components_form_alter(&$form, &$form_state, $form_id) {

	// Hide unnecessary fields
	foreach (
		array(
			'type',
			'required',
		) as $field) {
		$form['add'][$field]['#type'] = 'hidden';
	}

	$form['add']['name']['#size'] = '60';
	$form['add']['type']['#default_value'] = 'textarea';

	$form['actions']['submit']['#value'] = t('Save order of questions');

  if ($form['#node']->status == NODE_NOT_PUBLISHED) {
    $form['actions']['delete'] = array(
      '#type' => 'submit',
      '#value' => t('Delete'),
      '#submit' => array('node_form_delete_submit'),
    );
    $form['actions']['draft'] = array(
      '#type' => 'submit',
      '#value' => t('Save draft'),
      '#submit' => array('emh_survey_webform_components_form_draft'),
    );
    $form['actions']['publish'] = array(
      '#type' => 'submit',
      '#value' => t('Publish'),
      '#submit' => array('emh_survey_webform_components_form_publish'),
    );
    if (empty($form['#node']->webform['components'])) {
      drupal_set_message(t('You cannot publish a survey without any question, please add one or more questions.'), 'warning');
      $form['actions']['publish']['#disabled'] = TRUE;
    }
  } else {
    $form['actions']['save'] = array(
      '#type' => 'submit',
      '#value' => t('Save'),
      '#submit' => array('emh_survey_webform_components_form_save'),
    );
  }

}

/**
 * Additionnal submit callback for the webform components form.
 * Added to the "Save" button.
 */
function emh_survey_webform_components_form_save($form, &$form_state) {
  // Only if the user clicked the "Publish" button
  if ($form_state['triggering_element']['#value'] == $form['actions']['save']['#value']) {
    try {
      node_save($form['#node']);

      $msg_args = array(
        '@type' => node_type_get_name($form['#node']),
        '%title' => $form['#node']->title,
      );

      // Redirects to the survey view
      $form_state['redirect'] = 'node/' . $form['#node']->nid . '/edit/questions';
      drupal_set_message(t('@type %title has been updated.', $msg_args));
    }
    catch (Exception $e) {
      drupal_set_message(t('The survey could not be saved.'), 'error');
    }
  }
}

/**
 * Additionnal submit callback for the webform components form.
 * Added to the "Publish" button.
 */
function emh_survey_webform_components_form_publish($form, &$form_state) {
  // Only if the user clicked the "Publish" button
  if ($form_state['triggering_element']['#value'] == $form['actions']['publish']['#value']) {
    $form['#node']->status = NODE_PUBLISHED;

    try {
      node_save($form['#node']);

      $msg_args = array(
        '@type' => node_type_get_name($form['#node']),
        '%title' => $form['#node']->title,
      );

      drupal_set_message(t('@type %title has been published.', $msg_args));

      // Redirects to the survey view
      $form_state['redirect'] = 'node/' . $form['#node']->nid;
    }
    catch (Exception $e) {
      drupal_set_message(t('The survey could not be saved.'), 'error');
    }
  }
}

/**
 * Additionnal submit callback for the webform components form.
 * Added to the "Save draft" button.
 */
function emh_survey_webform_components_form_draft($form, &$form_state) {
  // Only if the user clicked the "Save draft" button
  if ($form_state['triggering_element']['#value'] == $form['actions']['draft']['#value']) {
    try {
      node_save($form['#node']);

      $msg_args = array(
        '@type' => node_type_get_name($form['#node']),
        '%title' => $form['#node']->title,
      );

      // Redirects to the survey edit questions view
      $form_state['redirect'] = 'node/' . $form['#node']->nid . '/edit/questions';
      drupal_set_message(t('@type %title has been updated.', $msg_args));
    }
    catch (Exception $e) {
      drupal_set_message(t('The survey could not be saved.'), 'error');
    }
  }
}


/**
 * Implements hook_form_alter().
 * node/$ID/webform/components/$ID
 */
function emh_survey_form_webform_component_edit_form_alter(&$form, &$form_state, $form_id) {

	// Question label
	$form['name']['#title'] = t('Your question');

	// Hide unnecessary fields
	foreach (
		array(
			'form_key',
			'value',
			'display',
			'validation',
			'position',
		) as $field) {
		$form[$field]['#access'] = FALSE;
	}

	// Hide unnecessary field description
	$form['name']['#description'] = '';
	$form['extra']['description']['#title'] = t('Description (additional information to clarify the meaning of your question)');
	$form['extra']['description']['#description'] = '';

	// Change description format (textarea is too big)
	$form['extra']['description']['#type'] = 'textfield';

	// We hide mandatory field BUT we don't forget to force it
	$form['validation']['required']['#default_value'] = 1;

	// Action submit label
	$form['actions']['submit']['#value'] = t('Save your question');

  $form['#submit'][] = 'emh_survey_webform_component_edit_form_redirect';

}


/**
 * Additionnal submit callback for the webform component edition form.
 */
function emh_survey_webform_component_edit_form_redirect($form, &$form_state) {
  $nid = $form_state['values']['nid'];
  $form_state['redirect'] = 'node/' . $nid . '/edit/questions';
}


/**
 * Implements hook_node_defaults_alter().
 */
function emh_survey_webform_node_defaults_alter(&$defaults) {
  $defaults['allow_draft'] = '1';
  $defaults['enforce_limit'] = 'yes';
  $defaults['progressbar_bar'] = '0';
  $defaults['submit_limit'] = '1';
  $defaults['submit_interval'] = '-1';
  $defaults['submit_notice'] = '0';
}

/**
 * Implements hook_views_api().
 */
function emh_survey_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'emh_survey') . '/views',
  );
}

/**
 * Implements hook_node_presave().
 */
function emh_survey_node_presave($node) {
  if ($node->type == 'webform') {
    if ($node->status == 1 && (empty($node->webform) || empty($node->webform['components']))) {
      // Unpublish the node
      $node->status = 0;
      // Inform the user.
      drupal_set_message(t('You cannot publish a survey without any question.'), 'warning');
    }
  }
}

/**
 * Implements hook_block_info().
 */
function emh_survey_block_info() {
  $blocks = array();

  $blocks['survey_add_submenu'] = array(
    'info' => t('Survey - Add page submenu'),
    'cache' => DRUPAL_CACHE_PER_ROLE,
    'weight' => -100,
    'status' => 1,
    'region' => 'sidebar_first',
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'pages' => "node/add/webform\nnode/add/survey",
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function emh_survey_block_view($delta = '') {
  $block = array();

  switch ($delta) {

    case 'survey_add_submenu':
      if (!user_is_logged_in()) {
        break;
      }

      $menu = '<ul class="tabs--secondary nav-subtabs">'
              . '<li class="active"><span class="active">' . t('General infos') . '<span class="element-invisible">(active tab)</span></span></li>'
              . '<li class="disabled"><span>' . t('Questions') . '</span></li>'
            . '</ul>';

      $block = array(
        'title' => '<none>',
        'content' => $menu,
      );
      break;

  }

  return $block;
}

function _emh_survey_webform_client_form_submit($form, &$form_state) {
  $node = $form['#node'];
  $author = user_load($node->uid);
  $module = 'emh_survey';
  $key = 'notify_survey_author_new_submission';
  $mail = $author->mail;
  $language = language_default();
  $params = array(
    '@url' => url('node/' . $node->nid . '/results?pk_campaign=new_answer_survey_' . $node->nid, array('absolute' => TRUE)),
    '@title' => $node->title,
    '@author' => $author->field_first_name[LANGUAGE_NONE][0]['value'],
  );

  drupal_mail($module, $key, $mail, $language, $params);
}

/**
 * Implements hook_mail().
 */
function emh_survey_mail($key, &$message, $params) {
  switch($key) {
    case 'notify_survey_author_new_submission':
      $message['subject'] = t('New answer: @title', $params);
      $message['body'] = array();
      $message['body'][] = '<h1 style="text-align:left;font-family:Helvetica,Arial,sans-serif;font-size:22px;margin-bottom:20px;color:#333;line-height:150%;">' . t('A new answer just came up on your request') . '</h1>';
      $message['body'][] = t('Dear @author,', $params);
      $message['body'][] = t('A new answer has been published on your request') . ' <strong><a href="' . t('@url', $params) . '&amp;pk_kwd=link" title="' .  t('@title', $params) . '" target="_blank" style="font-weight:bold!important;">' . t('@title', $params) . ' </a></strong>';
      $message['body'][] = t('Should you like to know more, just log into the platform now.');
      $message['body'][] = '<table style="min-width:100%;" width="100%" border="0" cellpadding="0" cellspacing="0" class="emailButton">
        <tbody>
          <tr>
            <td style="padding-top:0;padding-right:18px;padding-bottom:18px;padding-left:18px;" valign="top" align="center">
              <table style="border-collapse:separate!important;border-radius:0px;background-color:rgb(0,159,227);" border="0" cellpadding="0" cellspacing="0">
                <tbody>
                  <tr>
                    <td style="font-family:Arial;font-size:16px;padding:15px;color:rgb(255, 255, 255);" valign="middle" align="center">
                      <a href="' . t('@url', $params) . '&amp;pk_kwd=calltoaction" title="' .  t('Log in to eMindHub') . '" target="_blank" style="font-weight:bold!important;letter-spacing:normal;line-height:100%;text-align:center;text-decoration:none;color:#FFFFFF!important;">' . t('Log in to eMindHub') . ' </a>
                    </td>
                  </tr>
                </tbody>
              </table>
            </td>
          </tr>
        </tbody>
      </table>';
      break;
    default:
      break;
  }
}
