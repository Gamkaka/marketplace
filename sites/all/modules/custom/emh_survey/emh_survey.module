<?php
/**
* @file
* Code for eMindHub survey feature.
*/


/**
 * Implements hook_menu_alter().
 */
function emh_survey_menu_alter(&$items) {
  // Alters webform items titles
  // $items['node/%node/edit']['title callback'] = 'emh_survey_title_callback';
  // $items['node/%node/edit']['title arguments'] = array(1);
  // $items['node/%webform_menu/webform']['title'] = t('Questions');

  // Disable access
  $items['node/%webform_menu/webform/emails']['access callback'] = FALSE;
  $items['node/%webform_menu/webform-results']['access callback'] = FALSE;
  $items['node/%webform_menu/webform-results/analysis']['access callback'] = FALSE;
  $items['node/%webform_menu/webform-results/table']['access callback'] = FALSE;
  $items['node/%webform_menu/webform-results/download']['access callback'] = FALSE;

  // Node page tabs.

  $items['node/%webform_menu/webform']['access callback'] = FALSE;
  $items['node/%webform_menu/edit/questions'] = array(
    'title' => t('Questions'),
    'page callback' => 'webform_components_page',
    'page arguments' => array(1),
    'access callback' => 'webform_node_update_access',
    'access arguments' => array(1),
    'file' => 'includes/webform.components.inc',
    'file path' => drupal_get_path('module', 'webform'), // Useful outside of webform directory !
    'weight' => 1,
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );

  $items['node/%webform_menu/webform/components']['access callback'] = FALSE;
  $items['node/%webform_menu/edit/components'] = array(
    'title' => t('General infos'),
    'page callback' => 'webform_components_page',
    'page arguments' => array(1),
    'access callback' => 'webform_node_update_access',
    'access arguments' => array(1),
    'file' => 'includes/webform.components.inc',
    'file path' => drupal_get_path('module', 'webform'), // Useful outside of webform directory !
    'weight' => 0,
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['node/%webform_menu/webform/conditionals']['access callback'] = FALSE;
  $items['node/%webform_menu/webform/configure']['access callback'] = FALSE;

  // Node component forms.

  $items['node/%webform_menu/webform/components/%webform_menu_component']['access callback'] = FALSE;
  $items['node/%webform_menu/edit/questions/%webform_menu_component'] = array(
    'load arguments' => array(1, 5),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('webform_component_edit_form', 1, 4, FALSE),
    'access callback' => 'webform_node_update_access',
    'access arguments' => array(1),
    'file' => 'includes/webform.components.inc',
    'file path' => drupal_get_path('module', 'webform'), // Useful outside of webform directory !
    'type' => MENU_LOCAL_TASK,
  );

  $items['node/%webform_menu/webform/components/%webform_menu_component/clone']['access callback'] = FALSE;

  $items['node/%webform_menu/webform/components/%webform_menu_component/delete']['access callback'] = FALSE;
  $items['node/%webform_menu/edit/questions/%webform_menu_component/delete'] = array(
    'load arguments' => array(1, 5),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('webform_component_delete_form', 1, 4),
    'access callback' => 'webform_node_update_access',
    'access arguments' => array(1),
    'file' => 'includes/webform.components.inc',
    'file path' => drupal_get_path('module', 'webform'), // Useful outside of webform directory !
    'type' => MENU_LOCAL_TASK,
  );

}


/**
 * Title callback.
 */
// function emh_survey_title_callback($node) {
//   if ($node->type == 'webform') {
//     return t('Edit survey');
//   }
//   return t('Edit');
// }


/**
 * Implements hook_form_alter().
 */
function emh_survey_form_alter(&$form, &$form_state, $form_id) {

  $matches = array();
  if (isset($form['#node']->type) && $form_id == $form['#node']->type . '_node_form' && variable_get('webform_node_' . $form['#node']->type, FALSE)) {
    $node = $form['#node'];
    // Preserve all Webform options currently set on the node.
    $form['webform'] = array(
      '#type' => 'value',
      '#value' => $node->webform,
    );

    // If a new node, redirect the user to the components form after save.
    if (empty($node->nid) && in_array($node->type, webform_variable_get('webform_node_types_primary'))) {
      $form['actions']['submit']['#submit'][] = 'emh_survey_webform_form_submit';
    }
  }

  // TODO: cibler le formulaire de soumission

	if ((isset($form['#node']) && $form['#node']->type == 'webform')) {
		// $form['actions']['submit']['#value'] = t('Submit my answer');

		// echo '<pre>' . print_r($form, TRUE) . '</pre>';
	  // echo '<pre>' . print_r(element_children($form), TRUE) . '</pre>';
    if ( isBusinessUser() && !empty($form['submitted']) ) {
      foreach( $form['submitted'] as $key => $element ) {
        if (is_array($element) && !empty($element['#type']) && $element['#type'] == 'textarea') {
          $form['submitted'][$key]['#disabled'] = 'disabled';
          $form['actions']['#access'] = FALSE;
        }
      }
    }
  }

}


/**
 * Submit handler for the webform node form.
 *
 * Redirect the user to the components form on new node inserts. Note that this
 * fires after the hook_submit() function above.
 */
function emh_survey_webform_form_submit($form, &$form_state) {
  drupal_set_message(t('The new webform %title has been created. Add new fields to your webform with the form below.', array('%title' => $form_state['values']['title'])));
  $form_state['redirect'] = 'node/' . $form_state['nid'] . '/edit/questions';
}


/* Webform hook form alter
 * node/add/webform
 * node/$ID/edit
 */
function emh_survey_form_webform_node_form_alter(&$form, &$form_state, $form_id) {

	$form['field_reward']['und'][0]['value']['#title'] = t('Cost (minimum !value points required)', array( '!value' => variable_get('emh_points_webform_threshold', '500')));

	$form['field_document']['und'][0]['#process'][] = 'emindhub_my_file_element_process';
  $form['field_image']['und'][0]['#process'][] = 'emindhub_my_file_element_process';

  // Publication unactive unless there's 1 question added
  if (empty($form['#node']->webform['components'])) {
    $form['actions']['submit']['#disabled'] = TRUE;
  }

}


/**
 * Webform hook form alter
 * node/$ID/webform
 * node/$ID/webform/components
 */
function emh_survey_form_webform_components_form_alter(&$form, &$form_state, $form_id) {

	// echo '<pre>' . print_r($form, TRUE) . '</pre>';
	// echo '<pre>' . print_r($form_state, TRUE) . '</pre>';

	// Hide unnecessary fields
	foreach (
		array(
			'type',
			'required',
		) as $field) {
		$form['add'][$field]['#type'] = 'hidden';
	}

	$form['add']['name']['#size'] = '60';
	$form['add']['type']['#default_value'] = 'textarea';
  $form['add']['add']['#submit'][] = 'emh_survey_webform_components_form_add_submit';

	$form['actions']['submit']['#value'] = t('Save order of questions');

  if ($form['#node']->status == NODE_NOT_PUBLISHED && count($form['components'])) {
    $form['actions']['publish'] = array(
      '#type' => 'submit',
      '#value' => t('Publish'),
      '#submit' => array('emh_survey_webform_components_form_publish'),
    );
  } else {
    $form['actions']['publish'] = array(
      '#type' => 'submit',
      '#value' => t('Publish'),
      '#submit' => array('emh_survey_webform_components_form_publish'),
      '#disabled' => TRUE,
    );
  }

  // echo '<pre>' . print_r($form, TRUE) . '</pre>';

}


/**
 * Submit handler for webform_components_form() that adds a new component.
 */
function emh_survey_webform_components_form_add_submit($form, &$form_state) {
  $node = node_load($form_state['values']['nid']);

  $component = $form_state['values']['add'];

  // Set the values in the query string for the add component page.
  $query = array(
    'name' => $component['name'],
    'required' => $component['required'],
    'pid' => $component['pid'],
    'weight' => $component['weight'],
  );

  // Forward the "destination" query string value to the next form.
  if (isset($_GET['destination'])) {
    $query['destination'] = $_GET['destination'];
    unset($_GET['destination']);
    drupal_static_reset('drupal_get_destination');
  }
  $form_state['redirect'] = array('node/' . $node->nid . '/edit/questions/new/' . $component['type'], array('query' => $query));
}


/**
 * Additionnal submit callback for the webform components form.
 * Added to the "Publish" button.
 */
function emh_survey_webform_components_form_publish($form, &$form_state) {
  // Only if the user clicked the "Publish" button
  if ($form_state['triggering_element']['#value'] == $form['actions']['publish']['#value']) {
    $form['#node']->status = NODE_PUBLISHED;

    try {
      node_save($form['#node']);

      $msg_args = array(
        '@type' => node_type_get_name($form['#node']),
        '%title' => $form['#node']->title,
      );

      drupal_set_message(t('@type %title has been published.', $msg_args));

      // Redirects to the survey view
      $form_state['redirect'] = 'node/' . $form['#node']->nid;
    }
    catch (Exception $e) {
      drupal_set_message(t('The survey could not be saved.'), 'error');
    }
  }
}


/* Webform hook form alter
 * node/$ID/webform/components/$ID
 */
function emh_survey_form_webform_component_edit_form_alter(&$form, &$form_state, $form_id) {

	// echo '<pre>' . print_r($form, TRUE) . '</pre>';
	// echo '<pre>' . print_r($form_state, TRUE) . '</pre>';

	// Question label
	$form['name']['#title'] = t('Your question');

	// Hide unnecessary fields
	foreach (
		array(
			'form_key',
			'value',
			'display',
			'validation',
			'position',
		) as $field) {
		$form[$field]['#access'] = FALSE;
	}

	// Hide unnecessary field description
	$form['name']['#description'] = '';
	$form['extra']['description']['#title'] = t('Description (additional information to clarify the meaning of your question)');
	$form['extra']['description']['#description'] = '';

	// Change description format (textarea is too big)
	$form['extra']['description']['#type'] = 'textfield';

	// We hide mandatory field BUT we don't forget to force it
	$form['validation']['required']['#default_value'] = 1;

	// Action submit label
	$form['actions']['submit']['#value'] = t('Save your question');

  $form['#submit'][] = 'emh_survey_webform_component_edit_form_redirect';

  // echo '<pre>' . print_r($form, TRUE) . '</pre>';
}


/**
 * Additionnal submit callback for the webform component edition form.
 */
function emh_survey_webform_component_edit_form_redirect($form, &$form_state) {
  $nid = $form_state['values']['nid'];
  $form_state['redirect'] = 'node/' . $nid . '/edit/questions';
}


/**
 * Implements hook_node_defaults_alter().
 */
function emh_survey_webform_node_defaults_alter(&$defaults) {
  $defaults['allow_draft'] = '1';
  $defaults['enforce_limit'] = 'yes';
  $defaults['progressbar_bar'] = '0';
  $defaults['submit_limit'] = '1';
  $defaults['submit_interval'] = '-1';
  $defaults['submit_notice'] = '0';
  // echo '<pre>' . print_r($defaults, true) . '</pre>'; die;
}

/**
 * Implements hook_views_api().
 */
function emh_survey_views_api() {
  return array('api' => 3);
}

/**
 * Implements hook_node_presave().
 */
function emh_survey_node_presave($node) {
  if ($node->type == 'webform') {
    if ($node->status == 1 && (empty($node->webform) || empty($node->webform['components']))) {
      // Unpublish the node
      $node->status = 0;
      // Inform the user.
      drupal_set_message(t('You cannot publish a survey without any question.'), 'warning');
    }
  }
}
