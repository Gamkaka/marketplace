<?php
/**
 * @file
 * Code for eMindHub Profiles feature.
 */

/**
* Implements hook_views_api().
*/
function emh_user_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'emh_user') . '/views',
  );
}

/*
 * Implements hook_menu().
*/
function emh_user_menu() {
	$items = array();
	$items['client/register'] = array(
		'title' => 'Register as an client',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('user_register_form_client'),
		'access arguments' => array('access content'),
	);
	$items['expert/register'] = array(
		'title' => 'Register as an expert',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('user_register_form_expert'),
		'access arguments' => array('access content'),
	);
	return $items;
}

/**
* Implements hook_menu_alter().
*/
function emh_user_menu_alter(&$items) {
  unset($items['user/register']);
  $items['user/%user/hybridauth']['access callback'] = FALSE;
  $items['user/%user/edit']['title'] = t('Edit account');
  $items['user/%user/change-password']['title'] = t('Change password');
}

/**
 * Implements hook_form_alter().
 */
function emh_user_form_user_profile_form_alter(&$form, &$form_state, $form_id) {

  $form['account']['name']['#access'] = FALSE;

  unset($form['account']['current_pass']);
  unset($form['account']['current_pass_required_values']);
  $form['#validate'] = array_diff($form['#validate'], array('user_validate_current_pass'));
  $form['#submit'][] = '_emh_user_form_user_profile_handler';

}

/**
 * Implements hook_preprocess_status_messages().
 */
function emh_user_preprocess_status_messages(&$variables) {
  if (module_exists('user_registrationpassword')) {
    // https://api.drupal.org/comment/51793#comment-51793
    $message = 'You have just used your one-time login link. Your account is now active and you are authenticated.';
    if (isset($_SESSION['messages'])) {
      foreach ($_SESSION['messages'] as $type => $messages) {
        if ($type == 'status') {
          $pos = array_search($message, $messages);
          if ($pos !== FALSE) {
            unset($_SESSION['messages'][$type][$pos]);
            // http://dropbucket.org/node/547
            // Remove the empty status message wrapper if no other messages have been set.
            if (empty($_SESSION['messages'][$type])) {
              unset($_SESSION['messages'][$type]);
            }
          }
        }
      }
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function emh_user_form_alter(&$form, &$form_state, $form_id) {
  switch ($form_id) {
    case 'user_login':
    case 'user_login_block':
      unset($form['#action']);
      $form['#submit'][] = 'emh_user_redirect_submit';
      break;
    case 'user_register_form_client':
    case 'user_register_form_expert':
      return $form;
      break;
    default:
      break;
  }
}

/**
 * Implements hook_block_view_MODULE_DELTA_alter().
 */
function emh_user_block_view_roleswitcher_switcher_alter(&$data, $block) {
  $data['content']['#theme'] = 'emh_user_roleswitcher_list';
  $roles = emh_user_roleswitcher_roles();
  $data['content']['#roles'] = $roles;
}

/**
 * Implements hook_theme().
 */
function emh_user_theme() {
  return array(
    'emh_user_roleswitcher_list' => array(
      'variables' => array('roles' => array(), 'attributes' => array()),
    )
  );
}

/**
 * Theme function for roles list.
 */
function theme_emh_user_roleswitcher_list($variables) {
  $output = '';
  foreach ($variables['roles'] as $rid => $name) {
    if ($name != 'roleswitcher') {
      if ($name == 'expert') {
        $output .= l(t('Answer requests'), "roleswitcher/$rid", $variables['attributes']);
      }
      else if ($name == 'business') {
        $output .= l(t('Submit requests'), "roleswitcher/$rid", $variables['attributes']);
      } else {
        $output .= l($name, "roleswitcher/$rid", $variables['attributes']);
      }
    }
  }
  return $output;
}

/*
 * Implements hook_forms().
 */
function emh_user_forms($form_id, $args) {
  $forms = array();
  switch ($form_id) {
    case 'user_register_form_client':
      $forms['user_register_form_client'] = array (
        'callback' => 'user_register_form',
      );
      break;
    case 'user_register_form_expert':
      $forms['user_register_form_expert'] = array (
        'callback' => 'user_register_form',
      );
      break;
    default:
      break;
  }
  return $forms;
}


// HELPERS
function _emh_user_form_user_profile_handler(&$form, &$form_state) {
  $path = $_SERVER['HTTP_REFERER'];
  if (isset($_GET['current'])) {            //if (isset($_GET['destination'])) {
    $path = $_GET['current'];             // $path = $_GET['destination'];
  }                                               // }
  // echo $path;
  $form_state['redirect'] = $path;
}

function emh_user_redirect_submit($form, &$form_state) {
  $form_state['redirect'] = url('<front>', array('absolute'=> true, 'language' =>  (object)array('language' =>  FALSE)));
}

/**
 * Helper function to get user realname instead of username.
 */
function emh_user_get_beautiful_realname($uid) {
  $account = user_load($uid);
  $firstName = '';
  if (!empty($account->field_first_name[LANGUAGE_NONE])) {
    $firstName = $account->field_first_name[LANGUAGE_NONE][0]['value'];
    $firstName = ucwords($firstName);
  }
  $lastName = '';
  if (!empty($account->field_last_name[LANGUAGE_NONE])) {
    $lastName = $account->field_last_name[LANGUAGE_NONE][0]['value'];
    $lastName = strtoupper($lastName);
  }
  if (!empty($firstName) && !empty($lastName)) {
    return '<span class="author firstname">' . $firstName  . '</span>'. ' ' . '<span class="author lastname">' . $lastName . '</span>';
  }
  else {
    return $account->name;
  }
}

/**
 * Helper function to check if current user has access to other user's realname.
 */
function emh_user_get_beautiful_author($node) {
  if (empty($node)) {
    $node = node_load(arg(1));
  }
  if (emh_access_author_name($node)) {
    return emh_user_get_beautiful_realname($node->uid);
  }
  else {
    return '<span class="author anonymous">' . t('Anonymous') . '</span>';
  }
}

/**
 * Helper function to check access to user profile url.
 */
function emh_user_get_beautiful_profile_link($uid) {
  global $user;
  $name = emh_user_get_beautiful_realname($uid);
  if (emh_access_user_can_see_full_user($user->uid, $uid)) {
    return '<a href="' . url('user/' . $uid) . '">' . $name . '</a>';
  }
  else {
    return $name;
  }
}

function emh_user_roleswitcher_roles() {
  $roles = array(
    'expert',
    'business',
  );
  $allowed_roles = array();
  foreach ($roles as $role) {
    $rid = user_role_load_by_name($role)->rid;
    $name = user_role_load_by_name($role)->name;
    $allowed_roles[$rid] = $name;
  }
  global $user;
  if (variable_get('roleswitcher_store_mode') == 'session' && !empty($_SESSION['roleswitcher_roles'])) {
    $user->roles = $_SESSION['roleswitcher_roles'];
  }
  $user_roles = $user->roles;
  // We unset current roles matching with allowed ones in order to propose only the other ones
  foreach ($user_roles as $user_role) {
    $rid = user_role_load_by_name($user_role)->rid;
    unset($allowed_roles[$rid]);
  }
  return $allowed_roles;
}
