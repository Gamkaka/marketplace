<?php
/**
 * @file
 * Virality's features.
 */

/**
 * Maximum of invitations that an user can send at the same time.
 */
define('VIRAL_INVITATIONS_MAX', 10);


//----------------------------------------------------------------------
//-- MENU & PERMISSIONS
//----------------------------------------------------------------------


/**
 * Implements hook_menu().
 */
function emh_virality_menu() {
  $items = array();
  return $items;
}


/**
 * Implements hook_permission().
 */
function emh_virality_permission() {
  return array();
}


//----------------------------------------------------------------------
//-- ENTITIES
//----------------------------------------------------------------------


/**
 * Implements hook_entity_info().
 */
function emh_virality_entity_info() {
  $entities = array();

  // Defines the emh_invitation entity
  $entities['emh_invitation'] = array(
    'label' => t('Invitation'),
    'entity class' => 'EmhInvitation',
    'controller class' => 'EntityAPIController',
    'base table' => 'emh_invitation',
    'fieldable' => FALSE,
    'entity keys' => array('id' => 'invitation_id'),
  );

  return $entities;
}


/**
 * Loads a single invitation entity.
 */
function emh_invitation_load($id, $reset = FALSE) {
  $entity = entity_load('emh_invitation', array($id), array(), $reset);
  return !empty($entity) ? reset($entity) : NULL;
}


/**
 * Loads multiple invitation entities.
 */
function emh_invitation_load_multiple($ids = FALSE, $conditions = array(), $reset = FALSE) {
  return entity_load('emh_invitation', $ids, $conditions, $reset);
}


//----------------------------------------------------------------------
//-- BLOCKS
//----------------------------------------------------------------------


/**
 * Implements hook_block_info().
 */
function emh_virality_block_info() {
  $blocks = array();

  $blocks['invitation_form'] = array(
    'info' => t('Virality - Invitation form'),
    'status' => 1,
    'region' => 'content',
    'weight' => -100,
    'visibility' => BLOCK_VISIBILITY_PHP,
    'pages' => '<?php
        global $user;

        if (drupal_match_path(current_path(), \'user/*/points\')) {
          $account = menu_get_object(\'user\');
          if ($account->uid == $user->uid) {
            return TRUE;
          }
        }

        return FALSE;
      ?>',
    'cache' => DRUPAL_CACHE_PER_ROLE,
  );

  return $blocks;
}


/**
 * Implements hook_block_view().
 */
function emh_virality_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'invitation_form':
      if (!user_is_logged_in()) {
        break;
      }

      global $user;

      if (in_array('business', $user->roles)) {
        $reward = variable_get('emh_virality_business_invitation_reward');
      }
      elseif (in_array('expert', $user->roles)) {
        $reward = variable_get('emh_virality_expert_invitation_reward');
      }
      else {
        // If the user is neither a business nor an expert,
        // we don't display the block.
        break;
      }

      $text = 'You can earn points by inviting <b>experts</b> to grow eMindHub network:'
        . ' each time your referral will respond to a request and be recognized by the client, you\'ll earn !amount points.'
        . ' You can therefore monetize your points once you have reached a threshold of at least 1500 points.';

      $block = array(
        'subject' => t('Invite experts and earn points!'),
        'content' => array(
          'text' => array(
            '#theme' => 'html_tag',
            '#tag' => 'p',
            '#value' => t($text, array('!amount' => $reward)),
          ),
          'form' => drupal_get_form('emh_virality_invitation_form'),
        ),
      );
      break;
  }

  return $block;
}


//----------------------------------------------------------------------
//-- FORMS
//----------------------------------------------------------------------


/**
 * Builds the invitation form.
 */
function emh_virality_invitation_form($form, &$form_state) {
  $form['emails'] = array(
    '#type' => 'textarea',
    '#title' => t('Emails'),
    '#required' => TRUE,
    '#attributes' => array(
      'placeholder' => t('Add emails separated by commas'),
    ),
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Send invitation'),
  );

  return $form;
}


/**
 * Validation callback of the invitation form.
 */
function emh_virality_invitation_form_validate($form, &$form_state) {
  $values = $form_state['values'];

  $emails = explode(',', $values['emails']);

  if (count($emails) > VIRAL_INVITATIONS_MAX) {
    form_set_error('emails', t('You can not send more than !max invitations at the same time', array('!max' => VIRAL_INVITATIONS_MAX)));
  }

  foreach ($emails as $email) {
    if (($email = trim($email)) && (!valid_email_address($email))) {
      form_set_error('emails', t('This email is not valid: @email', array('@email' => $email)));
    }
  }
}


/**
 * Submit callback of the invitation form.
 */
function emh_virality_invitation_form_submit($form, &$form_state) {
  global $user;
  $values = $form_state['values'];

  // Cleans the received emails list
  $valid_emails = array();
  foreach (explode(',', $values['emails']) as $email) {
    if ($email = trim($email)) {
      $valid_emails[] = $email;
    }
  }

  // Retrieves the emails already recorded
  $query = db_select('users', 'u')
    ->fields('u', array('mail'))
    ->condition('mail', $valid_emails, 'IN');

  $existing_emails = $query->execute()->fetchCol();

  // Records each invitation if the email doesn't already exist in the users table
  $recorded_emails = array();

  foreach ($valid_emails as $email) {
    if (!in_array($email, $existing_emails)) {
      try {
        $invitation = new EmhInvitation(array(
          'referrer_id' => $user->uid,
          'referral_mail' => $email,
          'date' => time(),
        ));

        $invitation->save();

        $recorded_emails[] = check_plain($email);
      }
      catch (Exception $e) {
        watchdog('emh_virality', t('Invitation recording failed: @error', array('@error' => $e->getMessage())));
      }
    }
    else {
      drupal_set_message(t('@email is already registered on eMindHub, the invitation hasn\'t been sent', array('@email' => $email)), 'warning');
    }
  }

  // Displays a success message if some invitations have been recorded
  if (count($recorded_emails)) {
    $record_list = theme('item_list', array(
      '#theme' => 'item_list',
      '#items' => $recorded_emails,
    ));

    drupal_set_message(t('You just sent invitations to: !emails', array('!emails' => $record_list)));
  }
}


//----------------------------------------------------------------------
//-- MISC
//----------------------------------------------------------------------


/**
 * Implements hook_views_api().
 */
//function emh_virality_views_api() {
//  return array(
//    'api' => 3,
//    'path' => drupal_get_path('module', 'emh_virality') . '/views',
//  );
//}
