<?php

/**
 * @file Main hooks implementation for LinkedIn Profile module
 */
module_load_include('pages.inc', 'emh_linkedin');

/*
 * Implementation of hook_init()
 */

function emh_linkedin_init() {
  global $theme_path;
  $li_css = $theme_path . '/emh_linkedin.css';
  if (file_exists($li_css)) {
    drupal_add_css($li_css);
  }
  else {
    drupal_add_css(drupal_get_path('module', 'emh_linkedin') . '/emh_linkedin.css');
  }
  
  if (!@include_once(variable_get('linkedin_liboauth_path', ''))) {
  	if (file_exists(drupal_get_path('module', 'oauth_common') . '/lib/OAuth.php')) {
  		variable_set('linkedin_liboauth_path', drupal_get_path('module', 'oauth_common') . '/lib/OAuth.php');
  	}
  	else {
  		drupal_set_message(t('Unable to find the OAuth library. Please check your settings for the Linkedin module.'), 'warning');
  	}
  }
}

/*
 * Implementation of hook_menu
 */

function emh_linkedin_menu() {
  $items = array();
  if (variable_get('emh_linkedin_user_page_enabled', 0) === 1) {
    //LinkedIn profile tab for users
    $items['user/%user/emh_linkedin'] = array(
      'title' => 'Linkedin',
      'type' => MENU_LOCAL_TASK,
      'page callback' => 'emh_linkedin_display',
      'page arguments' => array(1),
      'access callback' => 'emh_linkedin_display_access',
      'access arguments' => array(1),
      'file' => 'emh_linkedin.pages.inc',
    );
  }
  
  //global settings form
  $items['admin/config/services/emh_linkedin'] = array(
  		'title' => 'LinkedIn integration',
  		'description' => 'linkedin module settings',
  		'page callback' => 'drupal_get_form',
  		'page arguments' => array('emh_linkedin_admin'),
  		'access arguments' => array('administer site configuration'),
  		'file' => 'emh_linkedin.pages.inc',
  );
  
  
  
  return $items;
}

/*
 * Custom access callback for user/%user/emh_linkedin
 */

function emh_linkedin_display_access($account) {
  if (variable_get('emh_linkedin_user_page_enabled', 0) < 1) {
    return FALSE;
  }
  if (!user_access('display LinkedIn profile', $account)) {
    return FALSE;
  }
  if (!isset($account->data['emh_linkedin_user_page_enabled']) || $account->data['emh_linkedin_user_page_enabled'] != 1) {
    return FALSE;
  }
  global $user;
  if (!user_access('access user profiles') && $user->uid != $account->uid) {
    return FALSE;
  }
  $check = emh_linkedin_get_profile_fields($account->uid, array('id'));
  if (isset($check['error-code'])) { // no need to display an empty tab
    return FALSE;
  }
  return TRUE;
}

/*
 * Implementation of hook_perm()
 */

function emh_linkedin_permission() {
  return array(
    'display LinkedIn profile' => array(
      'title' => t('display LinkedIn profile'),
      'description' => t('Display own LinkedIn profile on user page.'),
    ),
  );
}

/*
 * Implementation of hook_linkedin_user_edit_perms :
 * Let Linkedin module know what permissions are available at user/%user/edit/emh_linkedin
 */

function emh_linkedin_linkedin_user_edit_perms() {
  return array('display LinkedIn profile');
}

/*
 * Implementation of hook_module_implements_alter
 */
function emh_linkedin_module_implements_alter(&$implementations, $hook) {

	switch ($hook) {
		case 'user_login':
			if (array_key_exists('emh_linkedin', $implementations)) {
				// On veut que le hook_form_alter my_module soit le dernier exécuté
				// On le remet à la fin du tableau
				$my_module = $implementations['emh_linkedin'];
				unset($implementations['emh_linkedin']);
				$implementations['emh_linkedin'] = $my_module;

			}
			break;
	}
}

function emh_linkedin_user_login(&$edit, $account) {
	
	//on récupère s'il existe l'url du compte linkedin de la personne loggé
	//via la bd hybridauth_identity
	$identity = db_select('hybridauth_identity', 'ha_id')
				->fields('ha_id')
				->condition('uid', $account->uid, '=')
				->execute()
				->fetchAssoc();
	//$authname = $identity['provider_identity'];
	//$identity = _hybridauth_identity_load_by_uid(4413);
	
	if(isset($identity['data'])) {
		$linkedin_profile = $identity['data'];
		$linkedin_profile = unserialize($linkedin_profile);
		
		if(isset($linkedin_profile['profileURL'])) {
			$profileURL = $linkedin_profile['profileURL'];
			
			
			//test si l'utilisateur à déja un compte linkedin à son compte
			$select = db_select('field_data_field_linkedin', 'f');
			$field_linkedin = $select->fields('f')
				->condition('entity_id',$account->uid, '=')
				->execute()
				->fetchAssoc();
			
			if(empty($field_linkedin)) {
				//on ajoute dans le profile utilisateur le lien du profile linkedin
				$insert = db_insert('field_data_field_linkedin');
				$insert->fields(array(
						'entity_type' => 'user',
						'bundle' => 'user',
						'deleted' => 0,
						'entity_id' => $account->uid,
						'revision_id' => $account->uid,
						'language' => 'und',
						'delta' => 0,
						'field_linkedin_url' => $profileURL,
						'field_linkedin_attributes' => 'a:0:{}'
				));
				$insert->execute();
				
				$insert2 = db_insert('field_revision_field_linkedin');
				$insert2->fields(array(
						'entity_type' => 'user',
						'bundle' => 'user',
						'deleted' => 0,
						'entity_id' => $account->uid,
						'revision_id' => $account->uid,
						'language' => 'und',
						'delta' => 0,
						'field_linkedin_url' => $profileURL,
						'field_linkedin_attributes' => 'a:0:{}'
				));
				$insert2->execute();
				
			}
			else {
				//maj de l'adresse
				if(strcmp($field_linkedin['field_linkedin_url'], $profileURL) != 0) {
					$update = db_update('field_data_field_linkedin');
					$update->fields(array(
							'field_linkedin_url' => $profileURL
					))
					->condition('entity_id', $account->uid)
					->execute();
					
					$update = db_update('field_revision_field_linkedin');
					$update->fields(array(
							'field_linkedin_url' => $profileURL
					))
					->condition('entity_id', $account->uid)
					->execute();
				}
			}
		}
	}
}



/**
 * Implements hook_user_load().
 */
function emh_linkedin_user_load($users) {
	foreach ($users as $account) {
		//error_log("coucou : ".var_export($account));
		break;
		
	}
	//$query = db_select('users', 'u');
	
	//select name from users
	//$query->fields('u', array('name'));
	
	//$result = $query->execute();
	
	//$output = '<h2>Requete monotable</h2>';
	
	/*while ($row = $result->fetchAssoc()) {
		$output .= $row ["name"].'<br/>';
	}*/
	
	/*
  if (variable_get('emh_linkedin_user_page_enabled', 0) > 0) {
    foreach ($users as $account) {
      module_load_include('inc', 'emh_linkedin', 'emh_linkedin');
      $fields = _emh_linkedin_vget_user_page_linkedin_fields();
      $profile = emh_linkedin_get_profile_fields($account->uid, $fields);

      if (!isset($profile['error-code'])) {
        //Let themers hook into items
        $multiples = array(
          'positions' => 'position',
          'educations' => 'education',
        );
        foreach ($profile as $key => $value) {
          $item = array(
            'name' => $key,
            'value' => $value,
          );
          //deal with multi-values structured fields
          if (array_key_exists($key, $multiples)) {
            $items = array();
            $items_val = $profile[$key][$multiples[$key]];
            if (is_array($items_val)) {
              if ($items_val['id']) {
                $variables[$multiples[$key]] = $items_val;
                $items[] = theme('emh_linkedin_user_page_' . $multiples[$key] . '_item', $variables);
              }
              else {
                foreach ($items_val as $item_val) {
                  $variables[$multiples[$key]] = $item_val;
                  $items[] = theme('emh_linkedin_user_page_' . $multiples[$key] . '_item', $variables);
                }
              }
              $variables[$key] = $items;
              $item['value'] = theme('emh_linkedin_user_page_' . $key, $variables);
            }
            else {
              unset($item['value']);
            }
          }
          //Simpler fields go directly through generic theme function
          if (!empty($item['value'])) {
            $account->linkedin[$key] = theme('emh_linkedin_user_page_item', array('item' => $item));
          }
        }
      }
    }
  }*/
}

/**
 * Implements hook_user_view().
 */
function emh_linkedin_user_view($account, $view_mode) {
  if (variable_get('emh_linkedin_user_page_enabled', 0) == 2 && emh_linkedin_display_access($account)) {
    $account->content['linkedin'] = array(
      '#type' => 'user_profile_item',
      '#title' => t('Linkedin'),
      '#markup' => theme('emh_linkedin_user_page', array('profile' => $account->linkedin)),
      '#weight' => variable_get('emh_linkedin_user_page_weight', 2),
    );
  }
}

/*
 * Implements hook_block_info().
 */

function emh_linkedin_block_info() {
  $blocks = array();
  if (variable_get('emh_linkedin_user_page_enabled', 0) == 3) {
    $blocks['emh_linkedin'] = array(
      'info' => t('LinkedIn Profile'),
      'description' => t('User\'s LinkedIn profile'),
    );
  }
  return $blocks;
}

/*
 * Implements hook_block_view().
 */

function emh_linkedin_block_view($delta = '') {
  if (variable_get('emh_linkedin_user_page_enabled', '0') == 3 && arg(0) == 'user' && is_numeric(arg(1))) {
    $account = user_load(arg(1));
    if (emh_linkedin_display_access($account)) {
      $block['subject'] = t('Linkedin Profile');
      $block['content'] = theme('emh_linkedin_user_page', array('profile' => $account->linkedin));
      return $block;
    }
  }
  return;
}

/*
 * Implementation of hook_theme()
 */

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function emh_linkedin_theme($existing, $type, $theme, $path) {

  $return = array();

  //Define the main template file for users profile
  $return['emh_linkedin_user_page'] = array(
    'variables' => array('profile' => NULL),
    'template' => 'emh-linkedin-user-page',
  );

  //Deal with multi-structured fields
  $multiples = array(
    'positions' => 'position',
    'educations' => 'education',
  );
  foreach ($multiples as $key => $val) {
    //Template files for multi-values structured fields
    $return['emh_linkedin_user_page_' . $key] = array(
      'variables' => array($key => NULL),
      'template' => 'emh-linkedin-user-page-' . $key,
    );
    //Template file for multi-values structured fields items
    $return['emh_linkedin_user_page_' . $val . '_item'] = array(
      'variables' => array($val => NULL),
      'template' => 'emh-linkedin-user-page-' . $val . '-item',
    );
  }

  //Let themers hook into other profile items
  $return['emh_linkedin_user_page_item'] = array(
    'variables' => array('item' => NULL),
    'file' => 'emh_linkedin.theme.inc',
  );

  return $return;
}

/*
 * Helper function : defines default values
 */

function _emh_linkedin_list_default_fields() {
  $default_fields = array(
    'first-name',
    'last-name',
    'headline',
    'location',
    'industry',
    'summary',
    'specialties',
    'interests',
    'picture-url',
    'public-profile-url'
    ,
  );
  return $default_fields;
}

/*
 * Helper function : wraps around variable_get
 */

function _emh_linkedin_vget_user_page_linkedin_fields() {
  $fields = array();
  $var_fields = variable_get('emh_linkedin_user_page_linkedin_fields', _emh_linkedin_list_default_fields());
  foreach ($var_fields as $field) {
    if ($field !== 0) {
      $fields[] = $field;
    }
  }
  return $fields;
}


/*
 * Let us retrieve profile fields.
 * Returns an array contening the fields requested.
 * @params
 * $uid : the uid of the user we want to access infos
 * $fields : the fields we want to retrieve, as an array (see http://developer.linkedin.com/docs/DOC-1061 for complete list).
 */

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function emh_linkedin_get_profile_fields($uid, $fields = array()) {
	module_load_include('inc', 'linkedin');
	return _emh_linkedin_get_profile_fields($uid, $fields);
}


/*
 * Returns an array contening the fields requested.
 * @params
 * $url : full request url to a linkedin API ressource (see API doc for syntax)
 * $tokens : the user tokens, as an array containing keys 'token_key' and 'token_secret' with their value
 */

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function emh_linkedin_get_fields($url, $tokens) {
	module_load_include('inc', 'emh_linkedin');
	return _emh_linkedin_get_fields($url, $tokens);
}