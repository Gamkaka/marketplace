<?php
/*
 * @file
 * Module de test pour afficher des requetes.
 */

/*
 * Implementation of hook_menu()
 */
function test_menu() {
	$items['test'] = array(
			'title' => 'Test Drupal',
			'access arguments' => array(true),
			'type' => MENU_CALLBACK,
			'page callback' => 'test_content',
	);	
	
	$items['test/addUser'] = array(
			'title' => 'Ajouter un utilisateur',
			'access arguments' => array(true),
			'type' => MENU_CALLBACK,
			'page callback' => 'test_myform'
	);
	
	return $items;
}

function test_content() {
	
	$user = user_load(4418);
	//var_dump($user);
	$path = $user->name . ".jpg";
	var_dump(file_build_uri($path));
	
	
	
	$url="https://media.licdn.com/mpr/mprx/0_0eo-q-CnPPwiXTy_Ke-pxhUn1-Qxb8C7JurytbDnKlFOGrGize--yqfnvPUuXKGizeYPvrh90qHYTXwjnRfap63VsqH0TXQ7zRfAcFqclzjPw-g1MEMxBPV6VT-fHXAYyZwOKJMfE7u";
	$fp = fopen($path, 'w');
	
	$ch = curl_init($url);
	curl_setopt($ch, CURLOPT_FILE, $fp);
	$data = curl_exec($ch);
	$curl_errno = curl_errno($ch);
	$curl_error = curl_error($ch);
	curl_close($ch);
	fclose($fp);
	
	
	if ($curl_errno > 0) {
		echo "cURL Error ($curl_errno): $curl_error\n";
	} else {
		echo "Data received: $data\n";
	}
	
	$handle = fopen($path, 'r');
	$file = file_save_data($handle,file_build_uri($path));
	//var_dump($file);
	
	
	/*$file= file_load(1163);
	var_dump($file->fid);*/
	
	/*$edit = array(
		'field_photo' => array(
			'und' => array(
				0 => array(
					'cropbox_x' => '45'
				),
			),
		),
	);
	
	user_save($user,$edit);

	$user = user_load(4418);
	var_dump($user->field_photo);
	/*
	 * 
	 * ************************************
	 * $path = "mon-fichier2.jpg";
	//var_dump(file_build_uri($path));
	
	
	
	$url="https://media.licdn.com/mpr/mprx/0_0eo-q-CnPPwiXTy_Ke-pxhUn1-Qxb8C7JurytbDnKlFOGrGize--yqfnvPUuXKGizeYPvrh90qHYTXwjnRfap63VsqH0TXQ7zRfAcFqclzjPw-g1MEMxBPV6VT-fHXAYyZwOKJMfE7u";
	$fp = fopen($path, 'w');
	
	$ch = curl_init($url);
	curl_setopt($ch, CURLOPT_FILE, $fp);
	$data = curl_exec($ch);
	$curl_errno = curl_errno($ch);
	$curl_error = curl_error($ch);
	curl_close($ch);
	fclose($fp);
	
	
	if ($curl_errno > 0) {
		echo "cURL Error ($curl_errno): $curl_error\n";
	} else {
		echo "Data received: $data\n";
	}
	
	$handle = fopen($path, 'r');
	$file = file_save_data($handle,file_build_uri($path));
	******************************************************************
	image_resize($file, 20, 20);
	image_save($file, file_build_uri($path));
	var_dump($file);*/
	
	$output = 'coucou';
	//file_display_new($file_type, $view_mode, $formatter_name)
	/*$path = "mon-fichier2.jpg";
	*/
	
	/*$uid = 4418;
	
	$identity = db_select('hybridauth_identity', 'ha_id')
	->fields('ha_id')
	->condition('uid', $uid, '=')
	->execute()
	->fetchAssoc();
	
	var_dump(unserialize($identity['data']));*/
	/*
	
	$uid = 4418;
	
	$identity = db_select('hybridauth_identity', 'ha_id')
	->fields('ha_id')
	->condition('uid', $uid, '=')
	->execute()
	->fetchAssoc();
	//$authname = $identity['provider_identity'];
	//$identity = _hybridauth_identity_load_by_uid(4413);
	var_dump($identity['data']);
	echo '<br/>isset : ' . print_r(isset($identity['data']),true);
	echo '<br/>empty : ' . empty($identity['data']) . '<br/>';
	
	//on regarde si l'utilisateur à déjà utilisé la connection via linkedin (module hybridauth)
	if(isset($identity['data'])) {
		$linkedin_profile = $identity['data'];
		$linkedin_profile = unserialize($linkedin_profile);
	
		if(isset($linkedin_profile['profileURL'])) {
			$profileURL = $linkedin_profile['profileURL'];
				
			//echo $profileURL . '</br>';
				
			//test si l'utilisateur à déja le lien de son compte linkedin dans son profile
			$select = db_select('field_data_field_linkedin', 'f');
			$field_linkedin = $select->fields('f')
				->condition('entity_id',$uid, '=')
				->execute()
				->fetchAssoc();
			
			echo 'before<br/>';
			var_dump($field_linkedin);
			echo 'after<br/>';
				
			if(empty($field_linkedin)) {
				echo "J'ajoute mon gars";
				//on ajoute dans le profile utilisateur le lien du profile linkedin
				$insert = db_insert('field_data_field_linkedin');
				$insert->fields(array(
						'entity_type' => 'user',
						'bundle' => 'user',
						'deleted' => 0,
						'entity_id' => $uid,
						'revision_id' => $uid,
						'language' => 'und',
						'delta' => 0,
						'field_linkedin_url' => $profileURL,
						'field_linkedin_attributes' => 'a:0:{}'
				));
				$insert->execute();
	
			}
			else {
				echo 'Je vais la';
				//maj de l'adresse
				if(strcmp($field_linkedin['field_linkedin_url'], $profileURL) != 0) {
					echo '<br/>je maj';
					$update = db_update('field_data_field_linkedin');
					$update->fields(array(
							'field_linkedin_url' => $profileURL
					))
					->condition('entity_id', $uid)
					->execute();
				}
			}
		}
	}
	else {
		echo "T'as rien mon gars";
	}
	*/
	
	return $output;
	
}

function test_myform() {
	$content = drupal_get_form('test_add_user_form');
	return $content;
}

function test_add_user_form () {
	$form['name'] = array(
			'#title' => 'Nom utilisateur',
			'#type' => 'textfield'
	);
	
	$form['mail'] = array(
			'#title' => 'Mail',
			'#type' => 'textfield'
	);
	
	$form['valider'] = array(
		'#type' => 'submit',
		'#value' => t('Soumettre')
	);
	
	return $form;
}

//permet de traiter après envoie formulaire
function test_add_user_form_submit($form, &$form_state) {
	/* insertion d'un utilisateur */
	//on s'occupe d'abord de la table users
	
	 $insert = db_insert('users');
	 $insert->fields(array(
	 'uid' => '15',
	 'name' => $form_state['values']['name'],
	 'mail' => $form_state['values']['mail'],
	 'status' => '1'
	 ));
	 $insert->execute();
	
}
