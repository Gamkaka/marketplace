<?php
/**
 * @file
 * Code for the eMindHub Circles module installation.
 */

/**
 * Implements hook_enable
 */
function emh_circles_enable() {
  emh_circles_enable_strings();
}

/**
 * Implements hook_disable().
 */
function emh_circles_disable() {
  emh_circles_disable_strings();
}

function emh_circles_enable_strings() {
  global $language;
  $lang = $language->language;
  $strings = variable_get("locale_custom_strings_$lang", array());
  foreach (_emh_circles_string_overrides() as $string => $override) {
    $strings[''][$string] = $override;
  }
  variable_set("locale_custom_strings_$lang", $strings);
}

function emh_circles_disable_strings() {
  global $language;
  $lang = $language->language;
  $strings = variable_get("locale_custom_strings_$lang", array());
  foreach (_emh_circles_string_overrides() as $string => $override) {
    unset($strings[''][$string]);
  }
  variable_set("locale_custom_strings_$lang", $strings);
}

/**
 * Provides string overrides.
 */
function _emh_circles_string_overrides() {

  return array(
    "%1's groups" => "My circles",
    "Member's groups" => "Member's circles",
    "Subscribe to group" => "Subscribe",
    "Unsubscribe from group" => "Leave circle",
    "Request group membership" => "Request membership",
    "Are you sure you want to join the group %title?" => "Join %title circle",
    "Are you sure you want to unsubscribe from the group %title?" => "Leave %title circle",
  );

}

/**
* Add OG role in Circles : Referent member & Creator member.
*/
function emh_circles_update_7002() {
  $group = 'node';
  $bundle = 'circle';

  // Create new OG roles
  $roles = array(
    'Creator member',
    'Referent member',
  );
  foreach ($roles as $role) {
    $role = og_role_create($role, $group, 0, $bundle); // $name, $group_type = '', $gid = 0, $group_bundle = ''
    og_role_save($role);
  }

  // Change permissions
  $og_roles = array_flip(og_roles($group, $bundle)); // group, bundle

  // Member role
  $permissions = array(
    'delete own challenge content' => 0,
    'delete own question1 content' => 0,
    'delete own webform content' => 0,
    'update own challenge content' => 0,
    'update own question1 content' => 0,
    'update own webform content' => 0,
  );
  og_role_change_permissions($og_roles[OG_AUTHENTICATED_ROLE], $permissions);

  // Creator role
  $permissions = array(
    'unsubscribe' => 1,
    'create challenge content' => 1,
    'update own challenge content' => 1,
    'create question1 content' => 1,
    'update own question1 content' => 1,
    'create webform content' => 1,
    'update own webform content' => 1,
  );
  og_role_change_permissions($og_roles['Creator member'], $permissions);

  // Referent role
  $permissions = array(
    'access all webform results' => 1,
    'unsubscribe' => 1,
    'update any challenge content' => 1,
    'update any question1 content' => 1,
    'update any webform content' => 1,
  );
  og_role_change_permissions($og_roles['Referent member'], $permissions);
}

/**
* Delete old circle rules.
*/
function emh_circles_update_7003() {
  if ($rules_config = rules_config_load('rules_set_clients_as_admin_in_mandatory_group')) {
    $rules_config->delete();
  }
  if ($rules_config = rules_config_load('rules_mandatory_group')) {
    $rules_config->delete();
  }
}

/**
* Revert circle rules.
*/
function emh_circles_update_7004() {
  if ($rules_config = rules_config_load('rules_emh_circles_set_clients_as_creator_in_circles')) {
    $rules_config->delete();
  }
  if ($rules_config = rules_config_load('rules_emh_circles_add_users_in_all_experts_circle')) {
    $rules_config->delete();
  }
}

/**
* Revert circle rules.
*/
function emh_circles_update_7005() {
  if ($rules_config = rules_config_load('rules_emh_circles_set_clients_as_creator_in_circles')) {
    $rules_config->delete();
  }
}

/**
* CHG: Circles views, Menu links, OG permissions for subscribing.
*/
function emh_circles_update_7006() {

  // Revert views & rules
  features_revert(array('ft_views' => array('views_view')));
  features_revert(array('ft_rules' => array('rules_config')));

  // All circles
  db_update('menu_links')
    ->fields(array(
      'link_title' => 'All circles',
    ))
    ->condition('mlid', '9138')
    ->execute();
  // Delete Network roles
  db_delete('menu_links_visibility_role')
    ->condition('mlid', '7577')
    ->execute();
  variable_set('menu_rebuild_needed', TRUE);

  emh_circles_disable_strings();
  emh_circles_enable_strings();

  // Change OG permissions
  $group = 'node';
  $bundle = 'circle';
  $og_roles = array_flip(og_roles($group, $bundle)); // group, bundle

  // Non-member role
  $permissions = array(
    'subscribe' => 1,
    'subscribe without approval' => 0,
  );
  og_role_change_permissions($og_roles[OG_ANONYMOUS_ROLE], $permissions);

  // Member role
  $permissions = array(
    'subscribe without approval' => 0,
  );
  og_role_change_permissions($og_roles[OG_AUTHENTICATED_ROLE], $permissions);

}

/**
* CHG: Menu links & circle logo field.
*/
function emh_circles_update_7007() {
  // My circles
  db_update('menu_links')
    ->fields(array(
      'plid' => '7577',
    ))
    ->condition('link_title', 'My circles')
    ->execute();
  variable_set('menu_rebuild_needed', TRUE);

  features_revert(array('ft_field_base' => array('field_base')));
  features_revert(array('ft_content_type' => array('field_instance')));
}

/**
* CHG: Remove Reset button in Views.
*/
// function emh_circles_update_7008() {
//   emh_circles_reset_views();
// }

/**
* CHG: Revert circle rules.
*/
function emh_circles_update_7009() {
  if ($rules_config = rules_config_load('rules_emh_circles_send_email_membership_pending')) {
    $rules_config->delete();
  }
  if ($rules_config = rules_config_load('rules_emh_circles_send_email_membership_accepted')) {
    $rules_config->delete();
  }
  if ($rules_config = rules_config_load('rules_emh_circles_send_email_membership_refused')) {
    $rules_config->delete();
  }
}
