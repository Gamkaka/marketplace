<?php

/**
 * @file
 * Code for the eMindHub Circles module installation.
 */

/**
 * Implements hook_enable().
 */
function emh_circles_enable() {
  emh_circles_enable_strings();
}

/**
 * Implements hook_disable().
 */
function emh_circles_disable() {
  emh_circles_disable_strings();
}

/**
 * Implements hook_field_schema().
 */
function emh_circles_field_schema($field) {
  if ($field['type'] == 'emh_option_cost_modifier') {
    return array(
      'columns' => array(
        'option' => array(
          'description' => 'Machine name (ID) of the option',
          'type' => 'varchar',
          'length' => 64,
          'not null' => TRUE,
        ),
        'cost' => array(
          'description' => 'Cost of the option (number of credits)',
          'type' => 'int',
          'not null' => TRUE,
          'default' => 0,
        ),
      ),
    );
  }
}

/**
 * Add OG role in Circles : Referent member & Creator member.
 */
function emh_circles_update_7002() {
  $group = 'node';
  $bundle = 'circle';

  // Create new OG roles.
  $roles = array(
    'Creator member',
    'Referent member',
  );
  foreach ($roles as $role) {
    $role = og_role_create($role, $group, 0, $bundle);
    og_role_save($role);
  }

  // Change permissions.
  $og_roles = array_flip(og_roles($group, $bundle));

  // Member role.
  $permissions = array(
    'delete own challenge content' => 0,
    'delete own question1 content' => 0,
    'delete own webform content' => 0,
    'update own challenge content' => 0,
    'update own question1 content' => 0,
    'update own webform content' => 0,
  );
  og_role_change_permissions($og_roles[OG_AUTHENTICATED_ROLE], $permissions);

  // Creator role.
  $permissions = array(
    'unsubscribe' => 1,
    'create challenge content' => 1,
    'update own challenge content' => 1,
    'create question1 content' => 1,
    'update own question1 content' => 1,
    'create webform content' => 1,
    'update own webform content' => 1,
  );
  og_role_change_permissions($og_roles['Creator member'], $permissions);

  // Referent role.
  $permissions = array(
    'access all webform results' => 1,
    'unsubscribe' => 1,
    'update any challenge content' => 1,
    'update any question1 content' => 1,
    'update any webform content' => 1,
  );
  og_role_change_permissions($og_roles['Referent member'], $permissions);
}

/**
 * Delete old circle rules.
 */
function emh_circles_update_7003() {
  if ($rules_config = rules_config_load('rules_set_clients_as_admin_in_mandatory_group')) {
    $rules_config->delete();
  }
  if ($rules_config = rules_config_load('rules_mandatory_group')) {
    $rules_config->delete();
  }
}

/**
 * Revert circle rules.
 */
function emh_circles_update_7004() {
  if ($rules_config = rules_config_load('rules_emh_circles_set_clients_as_creator_in_circles')) {
    $rules_config->delete();
  }
  if ($rules_config = rules_config_load('rules_emh_circles_add_users_in_all_experts_circle')) {
    $rules_config->delete();
  }
}

/**
 * Revert circle rules.
 */
function emh_circles_update_7005() {
  if ($rules_config = rules_config_load('rules_emh_circles_set_clients_as_creator_in_circles')) {
    $rules_config->delete();
  }
}

/**
 * CHG: Circles views, Menu links, OG permissions for subscribing.
 */
function emh_circles_update_7006() {
  // Revert views & rules.
  features_revert(array('ft_views' => array('views_view')));
  features_revert(array('ft_rules' => array('rules_config')));

  // All circles.
  db_update('menu_links')
    ->fields(array(
      'link_title' => 'All circles',
    ))
    ->condition('mlid', '9138')
    ->execute();

  // Delete Network roles.
  db_delete('menu_links_visibility_role')
    ->condition('mlid', '7577')
    ->execute();
  variable_set('menu_rebuild_needed', TRUE);

  emh_circles_disable_strings();
  emh_circles_enable_strings();

  // Change OG permissions.
  $group = 'node';
  $bundle = 'circle';
  $og_roles = array_flip(og_roles($group, $bundle));

  // Non-member role.
  $permissions = array(
    'subscribe' => 1,
    'subscribe without approval' => 0,
  );
  og_role_change_permissions($og_roles[OG_ANONYMOUS_ROLE], $permissions);

  // Member role.
  $permissions = array(
    'subscribe without approval' => 0,
  );
  og_role_change_permissions($og_roles[OG_AUTHENTICATED_ROLE], $permissions);
}

/**
 * CHG: Menu links & circle logo field.
 */
function emh_circles_update_7007() {
  // My circles.
  db_update('menu_links')
    ->fields(array(
      'plid' => '7577',
    ))
    ->condition('link_title', 'My circles')
    ->execute();
  variable_set('menu_rebuild_needed', TRUE);

  features_revert(array('ft_field_base' => array('field_base')));
  features_revert(array('ft_content_type' => array('field_instance')));
}

/**
 * CHG: Remove Reset button in Views.
 */
function emh_circles_update_7008() {
  emh_circles_reset_views();
}

/**
 * CHG: Revert circle rules.
 */
function emh_circles_update_7009() {
  if ($rules_config = rules_config_load('rules_emh_circles_send_email_membership_pending')) {
    $rules_config->delete();
  }
  if ($rules_config = rules_config_load('rules_emh_circles_send_email_membership_accepted')) {
    $rules_config->delete();
  }
  if ($rules_config = rules_config_load('rules_emh_circles_send_email_membership_refused')) {
    $rules_config->delete();
  }
}

/**
 * CHG: Remove All experts from /circles.
 */
function emh_circles_update_7010() {
  emh_circles_reset_views();
}

/**
 * CHG: Revert circle creator member rules.
 */
function emh_circles_update_7011() {
  if ($rules_config = rules_config_load('rules_emh_circles_set_clients_as_creator_in_circles')) {
    $rules_config->delete();
  }
}

/**
 * CHG: OG permissions for new Request content type.
 */
function emh_circles_update_7012() {
  // Change permissions.
  $group = 'node';
  $bundle = 'circle';
  $og_roles = array_flip(og_roles($group, $bundle));

  // Administrator role.
  $permissions = array(
    'create request content' => 1,
    'update own request content' => 1,
    'update any request content' => 1,
    'delete own request content' => 1,
    'delete any request content' => 1,
  );
  og_role_change_permissions($og_roles[OG_ADMINISTRATOR_ROLE], $permissions);

  // Creator role.
  $permissions = array(
    'create request content' => 1,
    'update own request content' => 1,
  );
  og_role_change_permissions($og_roles['Creator member'], $permissions);

  // Referent role.
  $permissions = array(
    'update any request content' => 1,
  );
  og_role_change_permissions($og_roles['Referent member'], $permissions);
}

/**
 * ADD: new field to overwrite request options costs.
 */
function emh_circles_update_7013() {
  features_revert(array('ft_field_base' => array('field_base')));
  features_revert(array('ft_content_type' => array('field_instance', 'variable')));
}

/**
 * CHG: Circles wording.
 */
function emh_circles_update_7014() {
  emh_circles_disable_strings();
  emh_circles_enable_strings();
}

/**
 * CHG: update Member permissions in Circles + CHG: disable old rule + CHG: update authentificated permission.
 */
function emh_circles_update_7015() {
  $group = 'node';
  $bundle = 'circle';

  // Change permissions.
  $og_roles = array_flip(og_roles($group, $bundle));

  // Member role.
  $permissions = array(
    'create request content' => 1,
    'update own request content' => 1,
  );
  og_role_change_permissions($og_roles[OG_AUTHENTICATED_ROLE], $permissions);

  if ($rules_config = rules_config_load('rules_emh_circles_set_clients_as_creator_in_circles')) {
    $rules_config->delete();
  }

  user_role_grant_permissions(DRUPAL_AUTHENTICATED_RID, array('access ckeditor link'));
}

/**
 * CHG: Circles wording.
 */
function emh_circles_update_7016() {
  module_enable(array('ft_circle'));
}

/**
 * ADD: Modify membership status to authentificated users.
 */
function emh_circles_update_7017() {
  user_role_grant_permissions(DRUPAL_AUTHENTICATED_RID, array('execute og_set_state_action'));

  emh_configuration_revert_views(array('og_members_admin'));
}

/**
 * ADD: Permission to modify EMH circles for admin and webmaster roles.
 */
function emh_circles_update_7018() {
  user_role_grant_permissions(3, array('modify EMH circles'));
  user_role_grant_permissions(6, array('modify EMH circles'));
}

/**
 * CHG: OG permissions for admin members.
 */
function emh_circles_update_7019() {
  $group = 'node';
  $bundle = 'circle';
  $og_roles = array_flip(og_roles($group, $bundle));

  $permissions = array(
    'administer group' => 0,
    'add user' => 0,
    'manage roles' => 0,
    'manage permissions' => 0,
  );
  og_role_change_permissions($og_roles[OG_ADMINISTRATOR_ROLE], $permissions);

  variable_set('og_group_manager_full_access', FALSE);
}

/**
 * CHG: Revert OG Member admin + update strings.
 */
function emh_circles_update_7020() {
  emh_configuration_revert_views(array('og_members_admin'));

  emh_circles_disable_strings();
  emh_circles_enable_strings();
}

/**
 * ADD: New OG admin permission for unpublishing submission.
 */
function emh_circles_update_7021() {
  // Change permissions.
  $group = 'node';
  $bundle = 'circle';
  $og_roles = array_flip(og_roles($group, $bundle));

  $permissions = array(
    'unpublish all webform submissions' => 1,
  );
  og_role_change_permissions($og_roles[OG_ADMINISTRATOR_ROLE], $permissions);
}

/**
 * CHG: Update Recruitement Smart Mobility term name.
 */
function emh_circles_update_7022() {
  $term = taxonomy_term_load(1266);
  $term->name = 'Smart Mobility';
  taxonomy_term_save($term);
}
