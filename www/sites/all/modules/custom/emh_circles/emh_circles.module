<?php
/**
* @file
* Code for eMindHub circles feature.
*/

include_once 'emh_circles.inc';
include_once 'emh_circles.admin.inc';
include_once 'emh_circles.block.inc';
include_once 'emh_circles.fields.inc';
include_once 'emh_circles.pages.inc';
include_once 'emh_circles.theme.inc';
include_once 'emh_circles.views.inc';

/**
 * Implements hook_theme().
 */
function emh_circles_theme() {
  return array(
    'emh_circles_membership_infos__block' => array(
      'template' => 'emh-circles-membership-infos--block',
      'path' => drupal_get_path('module', 'emh_circles') . '/theme',
      'variables' => array(
        'state' => NULL,
        'subscribe_link' => NULL,
      ),
    ),
    'emh_circles_instructions_page' => array(
      'template' => 'emh-circles-instructions--page',
      'path' => drupal_get_path('module', 'emh_circles') . '/theme',
      'variables' => array(
        'instructions' => NULL,
        'qa' => NULL,
      ),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function emh_circles_menu() {
  $items = array();

  $items['node/%/instructions'] = array(
    'title' => t('How it works?'),
    'page callback' => 'emh_circles_instructions_page',
    'page arguments' => array(1),
    'access callback' => 'emh_circles_instructions_page_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Implements hook_og_ui_get_group_admin_alter().
 */
function emh_circles_og_ui_get_group_admin_alter(&$data, $context) {
  global $user;
  if (module_exists('og_manager_change') && !og_user_access_entity('administer group', $context['entity_type'], $context['etid'], $user)) {
    unset($data['manager']);
  }
}

/**
 * Implements hook_views_api().
 */
function emh_circles_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'emh_circles') . '/views',
  );
}

/**
 * Implements hook_preprocess_page().
 */
function emh_circles_preprocess_page(&$variables) {
  if (isset($variables['node']->type)) {

		switch ($variables['node']->type) {
			case 'circle':
        $group = og_context();

        $variables['gid'] = NULL;
        $variables['subscriber_count'] = NULL;

        if (empty($group)) {
          return NULL;
        }

        $variables['gid'] = $group['gid'];
        $variables['subscriber_count'] = og_extras_subscriber_count($variables['gid']);
        $variables['subscriber_count'] = format_plural($variables['subscriber_count'], '@count member', '@count members');

        break;

      default:
        break;
    }
  }
}

/**
 * Implements hook_preprocess_node().
 */
function emh_circles_preprocess_node(&$variables) {
  if (isset($variables['node']->type)) {

		switch ($variables['node']->type) {
			case 'circle':
        $group = og_context();

        $variables['group_node_links'] = array();
        $variables['gid'] = NULL;
        $variables['group_type'] = NULL;
        $variables['group_node'] = NULL;
        $variables['created'] = NULL;
        $variables['subscribe_link'] = NULL;
        $variables['subscriber_count'] = NULL;
        $variables['subscriber_link'] = NULL;
        $variables['manager_uids'] = array();
        $variables['managers'] = array();

        if (empty($group)) {
          return NULL;
        }

        $variables['group_node_links'] = og_extras_node_links();
        $variables['gid'] = $group['gid'];
        $variables['group_type'] = $group['group_type'];
        $variables['group_node'] = node_load($group['gid']);

        $variables['subscribe_link'] = og_extras_subscribe('node', $variables['group_node']);

        $variables['created'] = format_date($variables['group_node']->created, 'custom', 'M d Y');

        $variables['subscriber_count'] = og_extras_subscriber_count($variables['gid']);
        $variables['subscriber_count'] = format_plural($variables['subscriber_count'], '@count member', '@count members');
        // $variables['subscriber_link'] = l(format_plural($variables['subscriber_count'], '@count member', '@count members'), 'node/' . $variables['gid'] . '/members');

        $variables['manager_uids'] = _emh_circles_get_managers_from_group($group);
        $variables['manager_uids'] = $variables['manager_uids']['group_managers'];
        foreach ($variables['manager_uids'] as $i => $manager_id) {
          $variables['managers'][$i] = '';
          $account = user_load($manager_id);
          $variables['managers'][$i] .= theme('user_picture', array('account' => $account));
          $variables['managers'][$i] .= theme('username', array('account' => $account));
        }

        break;

      default:
        break;
    }
  }
}

/**
 * Implements hook_node_access().
 */
function emh_circles_node_access($node, $op, $account) {
  if ($op == 'view') {
    switch ($node->type) {
      case 'circle':
        return (og_is_member('node', $node->nid, 'user', $account)) ? NODE_ACCESS_IGNORE : NODE_ACCESS_DENY;
        break;
      default:
        break;
    }
  }
  return NODE_ACCESS_IGNORE;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function emh_circles_form_og_ui_confirm_subscribe_alter(&$form, &$form_state) {
  $form['actions']['submit']['#value'] = t('Ask to join');
  $form['#submit'][] = 'emh_circles_form_og_ui_confirm_subscribe_submit';
}

/**
 * Submit handler; Confirm OG membership.
 */
function emh_circles_form_og_ui_confirm_subscribe_submit($form, &$form_state) {
  $form_state['redirect'] = 'circles';
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function emh_circles_form_og_ui_confirm_unsubscribe_alter(&$form, &$form_state) {
  $form['actions']['submit']['#value'] = t('Yes');
  $form['description']['#markup'] = '<p>' . t('Do you really want to leave this circle?') . '</p>';
}


/**
 * Implements hook_form_FORM_ID_alter().
 */
function emh_circles_form_request_node_form_alter(&$form, &$form_state, $form_id) {
  if (
    module_exists('emh_request') &&
    (empty($form['#node']->nid) || $form['#node']->status == NODE_NOT_PUBLISHED)
  ) {
    global $user;

    // Prepares data for Javascript
    $settings = array(
      'default' => array(),
      'circles' => array(),
    );

    foreach (emh_request_get_options() as $id => $option) {
      $settings['default'][$id] = $option['cost'];
    }

    $groups = og_get_groups_by_user($user, 'node');
    $groups = node_load_multiple($groups);

    foreach ($groups as $group) {
      if ($group->type != 'circle') {
        continue;
      }

      if ($costs = field_get_items('node', $group, 'field_options_costs')) {
        $settings['circles'][$group->nid] = array();
        foreach ($costs as $cost) {
          $settings['circles'][$group->nid][$cost['option']] = $cost['cost'];
        }
      }
    }

    // Attaches script and data to the form
    if (empty($form['#attached']['js'])) {
      $form['#attached']['js'] = array();
    }

    $form['#attached']['js'] += array(
      // Attaches JS script for the dynamic update of options costs
      drupal_get_path('module', 'emh_circles') . '/js/options-costs.js' => array('type' => 'file'),
      // Attaches settings
      array('data' => array('circlesOptionsCosts' => $settings), 'type' => 'setting'),
    );
  }
}
