<?php

/**
 * @file
 * Code for eMindHub circles feature.
 */

include_once 'emh_circles.inc';
include_once 'emh_circles.admin.inc';
include_once 'emh_circles.block.inc';
include_once 'emh_circles.fields.inc';
include_once 'emh_circles.pages.inc';
include_once 'emh_circles.theme.inc';
include_once 'emh_circles.views.inc';

/**
 * Implements hook_theme().
 */
function emh_circles_theme() {
  return array(
    'emh_circles_membership_infos__block' => array(
      'template' => 'emh-circles-membership-infos--block',
      'path' => drupal_get_path('module', 'emh_circles') . '/theme',
      'variables' => array(
        'state' => NULL,
        'subscribe_link' => NULL,
      ),
    ),
    'emh_circles_instructions_page' => array(
      'template' => 'emh-circles-instructions--page',
      'path' => drupal_get_path('module', 'emh_circles') . '/theme',
      'variables' => array(
        'instructions' => NULL,
        'qa' => NULL,
      ),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function emh_circles_menu() {
  $items = array();

  $items['node/%/instructions'] = array(
    'title' => 'How it works?',
    'page callback' => 'emh_circles_instructions_page',
    'page arguments' => array(1),
    'access callback' => 'emh_circles_instructions_page_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'weight' => 3,
  );

  return $items;
}

/**
 * Implements hook_menu_alter().
 */
function emh_circles_menu_alter(&$items) {
  unset($items['node/%node/view']['title']);
  $items['node/%node/view']['title callback'] = 'emh_circles_node_view_title';
  $items['node/%node/view']['title arguments'] = array(1);

  unset($items['node/%node/edit']['title']);
  $items['node/%node/edit']['title callback'] = 'emh_circles_node_edit_title';
  $items['node/%node/edit']['title arguments'] = array(1);

  unset($items['node/%/group']['title']);
  $items['node/%/group']['title callback'] = 'emh_circles_node_group_title';
  $items['node/%/group']['title arguments'] = array(1);
  $items['node/%/group']['weight'] = 6;

  foreach (og_get_all_group_entity() as $entity_type => $value) {
    if ($entity_type == 'taxonomy_term') {
      $path = 'taxonomy/term/%/group';
      $argument = 2;
    }
    else {
      $path = "$entity_type/%/group";
      $argument = 1;
    }

    $items[$path]['page callback'] = 'emh_circles_og_ui_group_admin_overview';
    $items[$path]['page arguments'] = array($entity_type, $argument);
  }

  if (module_exists('node_export')) {
    $items['node/%node/node_export']['weight'] = 6;
  }
}

/**
 * Provide an overview of the administrator menu items.
 *
 * @param string $entity_type
 *   The entity type.
 * @param string $etid
 *   The entity ID.
 *
 * @see og_ui_group_admin_overview()
 */
function emh_circles_og_ui_group_admin_overview($entity_type, $etid) {
  og_set_breadcrumb($entity_type, $etid);

  $items = og_ui_get_group_admin($entity_type, $etid);

  foreach ($items as &$item) {
    // Re-format the URL.
    $item['href'] = "group/$entity_type/$etid/" . $item['href'];
    // Imitate the menu_get_item() content, so we can pass it to
    // theme_admin_block_content(), so we add the localized_options key.
    $item['localized_options'] = array();
  }

  $custom_items['circle_edit'] = array(
    'title' => t('Circle infos'),
    'description' => t('Manage the circle informations.'),
    'href' => "node/$etid/edit",
    // Imitate the menu_get_item() content, so we can pass it to
    // theme_admin_block_content(), so we add the localized_options key.
    'localized_options' => array(),
  );

  $items = array_merge($custom_items, $items);

  $form['admin_block_content'] = array('#theme' => 'admin_block_content', '#content' => $items);
  return $form;
}

/**
 * Menu title callback for Circle default tab.
 */
function emh_circles_node_view_title($node) {
  if ($node->type == 'circle') {
    return t('Home');
  }
  return t('View');
}

/**
 * Menu title callback for Circle edit tab.
 */
function emh_circles_node_edit_title($node) {
  if ($node->type == 'circle') {
    return t('Administrate Circle');
  }
  return t('Edit');
}

/**
 * Menu title callback for Circle edit tab.
 */
function emh_circles_node_group_title($nid) {
  $node = node_load($nid);
  if ($node->type == 'circle') {
    return t('Administrate');
  }
  return t('Group');
}

/**
 * Implements hook_og_ui_get_group_admin_alter().
 */
function emh_circles_og_ui_get_group_admin_alter(&$data, $context) {
  global $user;

  if (module_exists('og_manager_change') && !og_user_access_entity('administer group', $context['entity_type'], $context['etid'], $user)) {
    unset($data['manager']);
  }
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function emh_circles_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  // Hide Edit tab in circle node type.
  // @see https://www.drupal.org/node/2367395#comment-11883487
  $type = NULL;
  foreach ($router_item['map'] as $map) {
    if (!isset($map->type)) {
      continue;
    }
    if ($map->type == 'circle') {
      $type = $map->type;
      break;
    }
  }

  if ($type == NULL) {
    return;
  }

  foreach ($data['tabs'][0]['output'] as $key => $value) {
    if ($value['#link']['path'] == 'node/%/edit') {
      unset($data['tabs'][0]['output'][$key]);
    }
  }
}

/**
 * Implements hook_translated_menu_link_alter().
 */
function emh_circles_translated_menu_link_alter(&$item, $map) {
  if (!empty($item['link_path']) && $item['router_path'] == 'node/%') {
    $alias = $item['link_path'];
    $node = menu_get_object('node', 1, $alias);

    if ($node->type == 'circle') {
      $item['access'] = !empty($node);
      $item['hidden'] = empty($node);
    } 
  }
}

/**
 * Implements hook_views_api().
 */
function emh_circles_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'emh_circles') . '/views',
  );
}

/**
 * Implements hook_preprocess_page().
 */
function emh_circles_preprocess_page(&$variables) {
  if (isset($variables['node']->type)) {

    switch ($variables['node']->type) {
      case 'circle':
        $group = og_context();

        $variables['gid'] = NULL;
        $variables['subscriber_count'] = NULL;

        if (empty($group)) {
          return NULL;
        }

        $variables['gid'] = $group['gid'];
        $variables['subscriber_count'] = og_extras_subscriber_count($variables['gid']);
        $variables['subscriber_count'] = format_plural($variables['subscriber_count'], '@count member', '@count members');

        break;

      default:
        break;
    }
  }
}

/**
 * Implements hook_preprocess_node().
 */
function emh_circles_preprocess_node(&$variables) {
  if (isset($variables['node']->type)) {

    switch ($variables['node']->type) {
      case 'circle':
        $group = og_context();

        $variables['group_node_links'] = array();
        $variables['gid'] = NULL;
        $variables['group_type'] = NULL;
        $variables['group_node'] = NULL;
        $variables['created'] = NULL;
        $variables['subscribe_link'] = NULL;
        $variables['subscriber_count'] = NULL;
        $variables['subscriber_link'] = NULL;
        $variables['admin_uids'] = array();
        $variables['admins'] = array();

        if (empty($group)) {
          return NULL;
        }

        $variables['group_node_links'] = og_extras_node_links();
        $variables['gid'] = $group['gid'];
        $variables['group_type'] = $group['group_type'];
        $variables['group_node'] = node_load($group['gid']);

        $variables['subscribe_link'] = og_extras_subscribe('node', $variables['group_node']);

        $variables['created'] = format_date($variables['group_node']->created, 'custom', 'M d Y');

        $variables['subscriber_count'] = og_extras_subscriber_count($variables['gid']);
        $variables['subscriber_count'] = format_plural($variables['subscriber_count'], '@count member', '@count members');

        $variables['admin_uids'] = _emh_circles_get_group_admins();
        foreach ($variables['admin_uids'] as $i => $admin_id) {
          $variables['admins'][$i] = '';
          $account = user_load($admin_id);
          $variables['admins'][$i] .= theme('user_picture', array('account' => $account));
          $variables['admins'][$i] .= theme('username', array('account' => $account));
        }

        break;

      default:
        break;
    }
  }
}

/**
 * Implements hook_permission().
 */
function emh_circles_permission() {
  return array(
    'modify EMH circles' => array('title' => t('Circle: Edit all EMH Circles')),
  );
}

/**
 * Implements hook_field_access().
 */
function emh_circles_field_access($op, $field, $entity_type, $entity, $account) {
  if ($op == 'edit') {
    if (empty($entity)) {
      return TRUE;
    }

    if (empty($account)) {
      global $user;
      $account = $user;
    }

    if ($entity_type == 'node') {
      switch ($entity->type) {
        case 'circle':
          switch ($field['field_name']) {
            case 'field_circle_logo':
            case 'body':
            case 'field_circle_message':
            case 'field_circle_website':
            case 'field_circle_instructions':
            case 'field_circle_qa':
              return TRUE;

            default:
              return user_access('modify EMH circles');
          }
      }
    }
  }

  return TRUE;
}

/**
 * Implements hook_node_access().
 */
function emh_circles_node_access($node, $op, $account) {
  if ($op == 'view') {
    switch ($node->type) {
      case 'circle':
        $states = array(OG_STATE_ACTIVE);
        return (og_is_member('node', $node->nid, 'user', $account, $states)) ? NODE_ACCESS_IGNORE : NODE_ACCESS_DENY;
    }
  }

  return NODE_ACCESS_IGNORE;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function emh_circles_form_og_ui_confirm_subscribe_alter(&$form, &$form_state) {
  global $user;
  $account = user_load($user->uid);

  if (og_user_access('node', arg(2), 'subscribe', $account)) {
    $form['actions']['submit']['#value'] = t('Ask to join');
  }
  if (og_user_access('node', arg(2), 'subscribe without approval', $account)) {
    $form[OG_MEMBERSHIP_REQUEST_FIELD]['#access'] = FALSE;
  }

  $form['#submit'][] = 'emh_circles_form_og_ui_confirm_subscribe_submit';
}

/**
 * Submit handler: Confirm OG membership.
 */
function emh_circles_form_og_ui_confirm_subscribe_submit($form, &$form_state) {
  $group_type = $form_state['values']['group_type'];
  $gid = $form_state['values']['gid'];
  $group = entity_load_single($group_type, $gid);

  if (entity_access('view', $group_type, $group)) {
    drupal_set_message(t('You are now a member of this circle.'));
  }
  else {
    $form_state['redirect'] = 'circles';
  }
}

/**
 * Implements hook_og_membership_presave().
 */
function emh_circles_og_membership_presave($og_membership) {
  if ($og_membership->entity_type == 'user') {
    $account = user_load($og_membership->etid);
    // New membership without approval.
    if (og_user_access('node', $og_membership->gid, 'subscribe without approval', $account) && !isset($og_membership->original)) {
      $og_membership->state = OG_STATE_ACTIVE;
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function emh_circles_form_og_ui_confirm_unsubscribe_alter(&$form, &$form_state) {
  $form['actions']['submit']['#value'] = t('Yes');
  $form['description']['#markup'] = '<p>' . t('Do you really want to leave this circle?') . '</p>';
  $form['#submit'][] = 'emh_circles_form_og_ui_confirm_unsubscribe_submit';
}

/**
 * Submit handler: Confirm OG unsubscribe membership.
 */
function emh_circles_form_og_ui_confirm_unsubscribe_submit($form, &$form_state) {
  $form_state['redirect'] = 'circles';
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function emh_circles_form_request_node_form_alter(&$form, &$form_state, $form_id) {
  if (
    module_exists('emh_request') &&
    (empty($form['#node']->nid) || $form['#node']->status == NODE_NOT_PUBLISHED)
  ) {
    global $user;

    // Prepares data for Javascript.
    $settings = array(
      'default' => array(),
      'circles' => array(),
    );

    foreach (emh_request_get_options() as $id => $option) {
      $settings['default'][$id] = $option['cost'];
    }

    $groups = og_get_groups_by_user($user, 'node');
    $groups = node_load_multiple($groups);

    foreach ($groups as $group) {
      if ($group->type != 'circle') {
        continue;
      }

      if ($costs = field_get_items('node', $group, 'field_options_costs')) {
        $settings['circles'][$group->nid] = array();
        foreach ($costs as $cost) {
          $settings['circles'][$group->nid][$cost['option']] = $cost['cost'];
        }
      }
    }

    // Attaches script and data to the form.
    if (empty($form['#attached']['js'])) {
      $form['#attached']['js'] = array();
    }

    $form['#attached']['js'] += array(
      // Attaches JS script for the dynamic update of options costs.
      drupal_get_path('module', 'emh_circles') . '/js/options-costs.js' => array('type' => 'file'),
      // Attaches settings.
      array('data' => array('circlesOptionsCosts' => $settings), 'type' => 'setting'),
    );
  }
}
