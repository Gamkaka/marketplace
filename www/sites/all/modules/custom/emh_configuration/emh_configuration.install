<?php
/**
 * @file
 * Installation hooks for the EMH configuration module.
 */


/**
* Implements hook_enable().
*/
function emh_configuration_enable() {
  emh_configuration_update_7001();
  emh_configuration_update_7002();
  emh_configuration_update_7003();
  emh_configuration_update_7004();
  emh_configuration_update_7005();
  emh_configuration_update_7006();

  variable_set('date_format_short_date', 'Y/m/d');
}

/**
 * Uninstall modules : EMH blocks, forum, poll
 */
function emh_configuration_update_7001() {
  module_disable(array('emh_blocks', 'forum', 'poll'));
  drupal_uninstall_modules(array('emh_blocks', 'forum', 'poll'));
}

/**
 * Delete roles : expert preview, business preview
 */
function emh_configuration_update_7002() {
  user_role_delete('expert preview');
  user_role_delete('business preview');
}

/**
 * Install modules : Autologout, PCP
 */
function emh_configuration_update_7003() {
  module_enable(array('autologout', 'pcp'));
}

/**
 * Populate PCP fields parameters
 */
function emh_configuration_update_7004() {
  $value = array(
    'user:user:field_first_name' => 'user:user:field_first_name',
    'user:user:field_last_name' => 'user:user:field_last_name',
    'user:user:field_entreprise' => 'user:user:field_entreprise',
    'user:user:field_telephone' => 'user:user:field_telephone',
    'user:user:field_address' => 'user:user:field_address',
    'user:user:field_titre_metier' => 'user:user:field_titre_metier',
    'user:user:field_working_status' => 'user:user:field_working_status',
    'user:user:field_domaine' => 'user:user:field_domaine',
    'user:user:field_skills_set' => 'user:user:field_skills_set',
    'user:user:field_employment_history' => 'user:user:field_employment_history',
    'user:user:field_notification_frequency' => 'user:user:field_notification_frequency',
    'user:user:field_entreprise_description' => 'user:user:field_entreprise_description',
    'user:user:field_specific_skills3' => 'user:user:field_specific_skills3',
    'user:user:field_photo' => 'user:user:field_photo',
    'user:user:field_position' => 'user:user:field_position',
    'user:user:field_cv' => 'user:user:field_cv',
    'user:user:field_position_list' => 'user:user:field_position_list',
    'user:user:field_needs_for_expertise' => 'user:user:field_needs_for_expertise',
  );
  variable_set('pcp_enabled_fields', $value);
  variable_set('pcp_hide_block_on_complete', '1');
}

/**
 * Delete Search module tables.
 */
function emh_configuration_update_7005() {
  db_delete('search_total')
    ->execute();
  db_delete('search_index')
    ->execute();
}

/**
* Delete old blocks and revert block features.
*/
function emh_configuration_update_7006() {
  $module = 'block';
  $deltas = array('24', '25');
  foreach ($deltas as $delta) {
    db_delete('block')
      ->condition('module', $module)
      ->condition('delta', $delta)
      ->execute();
    db_delete('block_custom')
      ->condition('bid', $delta)
      ->execute();
    db_delete('block_role')
      ->condition('module', $module)
      ->condition('delta', $delta)
      ->execute();
  }
  features_revert(array('ft_blocks' => array('fe_block_boxes')));
}

/**
 * Uninstall module Login Destination + Enable module Language Access.
 */
function emh_configuration_update_7007() {
  module_disable(array('login_destination'));
  drupal_uninstall_modules(array('login_destination'));
  module_enable(array('language_access'));
}

/**
 * Add permissions : Languages access.
 */
function emh_configuration_update_7008() {
  user_role_grant_permissions(DRUPAL_ANONYMOUS_RID, array('access language en'));
  user_role_grant_permissions(DRUPAL_AUTHENTICATED_RID, array('access language en'));
  user_role_grant_permissions(DRUPAL_ANONYMOUS_RID, array('access language fr'));
  user_role_grant_permissions(3, array('access language fr')); // Administrator
  user_role_grant_permissions(6, array('access language fr')); // Webmaster
}

/**
* Delete Forum + Poll nodes and content types.
*/
function emh_configuration_update_7009() {
  $types = array(
    'forum',
    'poll',
  );
  foreach($types as $type) {
    // First, delete nodes
    $results = db_select('node', 'n')
                ->fields('n', array('nid'))
                ->condition('type', $type)
                ->execute();
    foreach ($results as $result) {
      $nids[] = $result->nid;
    }
    if (!empty($nids)) {
      node_delete_multiple($nids);
      drupal_set_message(t('%count nodes has been deleted.', array('%count' => count($nids))));
    }
    // Then, delete content type
    if (node_type_load($type)) {
      node_type_delete($type);
      variable_del('node_preview_' . $type);
      drupal_set_message(t('%type content type has been deleted.', array('%type' => $type)));
    }
  }
  node_types_rebuild();
  variable_set('menu_rebuild_needed', TRUE);
}

/**
* Delete old rules.
*/
function emh_configuration_update_7010() {
  if ($rules_config = rules_config_load('rules_schedule_inscription_clotures')) {
    $rules_config->delete();
  }
  if ($rules_config = rules_config_load('rules_gammification_node')) {
    $rules_config->delete();
  }
  if ($rules_config = rules_config_load('rules_gammification_comment')) {
    $rules_config->delete();
  }
  if ($rules_config = rules_config_load('rules_private_proposal')) {
    $rules_config->delete();
  }
  if ($rules_config = rules_config_load('rules_private_challenge')) {
    $rules_config->delete();
  }
}

/**
 * HybridAuth : change emails duplicate option.
 */
function emh_configuration_update_7011() {
  variable_set('hybridauth_duplicate_emails', '2');
}

/**
 * Remove permissions : no more cookie for admin & webmaster!
 */
function emh_configuration_update_7012() {
  user_role_revoke_permissions(DRUPAL_AUTHENTICATED_RID, array('display EU Cookie Compliance popup'));
  user_role_revoke_permissions(3, array('display EU Cookie Compliance popup')); // Administrator
  user_role_grant_permissions(4, array('display EU Cookie Compliance popup')); // Expert
  user_role_grant_permissions(5, array('display EU Cookie Compliance popup')); // Business
  user_role_grant_permissions(7, array('display EU Cookie Compliance popup')); // Referent
}

/**
 * Install module : EMH Answer.
 */
function emh_configuration_update_7013() {
  module_enable(array('emh_answer'));
  user_role_grant_permissions(DRUPAL_AUTHENTICATED_RID, array('save draft'));
  user_role_grant_permissions(DRUPAL_AUTHENTICATED_RID, array('save comment draft'));
  features_revert(array('ft_permissions' => array('user_permission')));
}

/**
 * Change default webform parameters.
 */
function emh_configuration_update_7014() {
  variable_set('webform_default_from_address', 'contact@emindhub.com');
  variable_set('webform_default_from_name', 'eMindHub');
  variable_set('webform_default_subject', 'New answer: [node:title]');
  variable_set('webform_email_html_capable', '1');
  variable_set('webform_default_format', '1');
  variable_set('webform_format_override', '1');
  variable_set('webform_token_access', '0');
}

/**
 * Change top nav links.
 */
function emh_configuration_update_7015() {
  // Change existing links
  db_update('menu_links')
    ->fields(array(
      'link_path' => '<front>',
      'link_title' => 'Home',
      'weight' => '-50',
    ))
    ->condition('mlid', '7708')
    ->execute();
  db_update('menu_links')
    ->fields(array(
      'link_title' => 'Requests',
      'expanded' => '1',
      'weight' => '-49',
      'hidden' => '0',
    ))
    ->condition('mlid', '4970')
    ->execute();
  db_update('menu_links')
    ->fields(array(
      'link_title' => 'Answers',
      'weight' => '-48',
    ))
    ->condition('mlid', '5523')
    ->execute();
  db_update('menu_links')
    ->fields(array(
      'link_title' => 'Network',
      'expanded' => '1',
      'weight' => '-47',
      'hidden' => '0',
    ))
    ->condition('mlid', '7577')
    ->execute();

  variable_set('menu_rebuild_needed', TRUE);

  // Change Requests & Circles paths.
  features_revert(array('ft_views' => array('views_view')));
  features_revert(array('ft_blocks' => array('fe_block_boxes')));
}

/**
 * Uninstall module : emh_freetrial + Register alias for former /freetrial URL.
 */
function emh_configuration_update_7016() {
  // Uninstall modules
  module_disable(array('emh_freetrial'));
  drupal_uninstall_modules(array('emh_freetrial'));

  // Change block path view settings
  features_revert(array('ft_blocks' => array('fe_block_boxes')));
}

/**
 * Change default website email.
 */
function emh_configuration_update_7017() {
  variable_set('site_mail', 'contact@emindhub.com');
}

/**
* Update HybridAuth block.
*/
function emh_configuration_update_7019() {
  db_update('block')
    ->fields(array(
      'title' => '<none>',
      'status' => '1',
      'visibility' => '1',
      'region' => 'content',
      'pages' => "expert/register",
      'weight' => '-35',
    ))
    ->condition('module', 'hybridauth')
    ->condition('delta', 'hybridauth')
    ->execute();
}

/**
* Revert views.
*/
function emh_configuration_update_7020() {
  features_revert(array('ft_views' => array('views_view')));
}

/**
* FIX Uninstall autoassignrole + FIX Activate ft_permissions + CHG permissions : Service links + CHG Service links parameters, Add to my selection flag.
*/
function emh_configuration_update_7021() {
  // Uninstall module
  module_enable(array('ft_permissions'));
  features_revert(array('ft_permissions' => array('user_permission')));
  module_disable(array('autoassignrole'));
  drupal_uninstall_modules(array('autoassignrole'));

  // Change permissions
  user_role_grant_permissions(3, array('access service links'));
  user_role_grant_permissions(4, array('access service links'));
  user_role_grant_permissions(5, array('access service links'));
  user_role_grant_permissions(6, array('access service links'));

  // Change parameters
  $value = array(
    'blog' => 'blog',
    'article' => '0',
    'page' => '0',
    'challenge' => '0',
    'circle' => '0',
    'webform' => '0',
    'corporate' => '0',
    'question1' => '0',
    'user_alert' => '0',
    'working_group' => '0',
  );
  variable_set('service_links_node_types', $value);

  features_revert(array('ft_field_base' => array('flag')));
  features_revert(array('ft_views' => array('views_view')));

  // Change My selection
  db_delete('menu_links')
   ->condition('mlid', '9260')
   ->execute();
  db_update('menu_links')
   ->fields(array(
     'plid' => '4970',
   ))
   ->condition('mlid', '9385')
   ->execute();

  variable_set('menu_rebuild_needed', TRUE);
}

/**
 * CHG: Uninstall module user_alert + remove content types user_alert, working_group.
 */
function emh_configuration_update_7022() {
  features_revert(array('ft_blocks' => array('fe_block_boxes')));
  features_revert(array('ft_blocks' => array('fe_block_settings')));
  features_revert(array('ft_content_type' => array('field_instance')));
  features_revert(array('ft_content_type' => array('node')));
  features_revert(array('ft_content_type' => array('variable')));
  features_revert(array('ft_field_base' => array('field_base')));
  features_revert(array('ft_permissions' => array('user_permission')));

  module_disable(array('user_alert'));
  drupal_uninstall_modules(array('user_alert'));

  $types = array(
    'user_alert',
    'working_group',
  );
  foreach($types as $type) {
    // First, delete nodes
    $results = db_select('node', 'n')
                ->fields('n', array('nid'))
                ->condition('type', $type)
                ->execute();
    foreach ($results as $result) {
      $nids[] = $result->nid;
    }
    if (!empty($nids)) {
      node_delete_multiple($nids);
      drupal_set_message(t('%count nodes has been deleted.', array('%count' => count($nids))));
    }
    // Then, delete content type
    if (node_type_load($type)) {
      node_type_delete($type);
      variable_del('node_preview_' . $type);
      drupal_set_message(t('%type content type has been deleted.', array('%type' => $type)));
    }
  }
  node_types_rebuild();
  variable_set('menu_rebuild_needed', TRUE);
}

/**
 * ADD: new FAQ feature.
 */
function emh_configuration_update_7023() {
  module_enable(array('emh_faq'));
}

/**
 * CHG: update user_export_ view (add some new fields)
 */
function emh_configuration_update_7024() {
  features_revert(array('ft_views' => array('views_view')));
}

/*
 * ADD: video in Homepage.
 */
function emh_configuration_update_7025() {
  features_revert(array('ft_blocks' => array('fe_block_boxes')));
}

/**
 * ADD: new Landing page feature.
 */
function emh_configuration_update_7026() {
  module_enable(array('emh_landing_page'));
}

/**
 * CHG: translation setting.
 */
function emh_configuration_update_7027() {
  variable_set('i18n_hide_translation_links', TRUE);
  variable_set('i18n_node_default_language_none', '0');
}

/**
 * CHG: News views for better translation support.
 */
function emh_configuration_update_7028() {
  features_revert(array('ft_views' => array('views_view')));
}

/**
 * CHG: Revoke client & expert permissions on Blog entry & circle creation.
 */
function emh_configuration_update_7029() {
  features_revert(array('ft_permissions' => array('user_permission')));
}

/**
 * CHG: Remove Legal terms of use from Features.
 */
function emh_configuration_update_7030() {
  features_revert(array('ft_field_base' => array('field_base')));
}

/**
* CHG: Delete old question/challenge blocks.
*/
function emh_configuration_update_7031() {
  $module = 'block';
  $deltas = array('14', '16');
  foreach ($deltas as $delta) {
    db_delete('block')
      ->condition('module', $module)
      ->condition('delta', $delta)
      ->execute();
    db_delete('block_custom')
      ->condition('bid', $delta)
      ->execute();
    db_delete('block_role')
      ->condition('module', $module)
      ->condition('delta', $delta)
      ->execute();
  }
}

/*
 * CHG: Update short date format.
 */
function emh_configuration_update_7032() {
 db_update('date_formats')
    ->fields(array(
      'format' => 'Y/m/d',
   ))
  ->condition('dfid', '60')
  ->execute();
}

/**
 * CHG: Renaming 'point' with 'credit' everywhere.
 */
function emh_configuration_update_7033() {
  // Permissions
  user_role_grant_permissions(DRUPAL_AUTHENTICATED_RID, array('use credits'));
  user_role_grant_permissions(3, array('administer credits', 'view others credits history')); // Administrator role
  user_role_grant_permissions(6, array('administer credits', 'view others credits history')); // Webmaster role

  // Rules
  if ($rules_config = rules_config_load('rules_contact_impossible')) {
    $rules_config->delete();
  }
  if ($rules_config = rules_config_load('rules_transfert_points_for_content')) {
    $rules_config->delete();
  }
  if ($rules_config = rules_config_load('rules_transfert_points_for_content')) {
    $rules_config->delete();
  }
  if ($rules_config = rules_config_load('emh_points_transfert_points_for_published_content')) {
    $rules_config->delete();
  }
  if ($rules_config = rules_config_load('emh_points_transfert_points_for_updated_content')) {
    $rules_config->delete();
  }
  if ($rules_config = rules_config_load('rules_emh_request_send_notification_email')) {
    $rules_config->delete();
  }
  if ($rules_config = rules_config_load('rules_emh_request_send_webmaster_notification_email')) {
    $rules_config->delete();
  }
  if ($rules_config = rules_config_load('rules_emh_user_show_expert_login_message')) {
    $rules_config->delete();
  }

  // Features
  features_revert(array('ft_content_type' => array('field_instance')));
}

/**
 * CHG: Replace emh_pcp_special for emh_profile_complete and sub-modules.
 */
function emh_configuration_update_7034() {
  module_disable(array('emh_pcp_special'));
  drupal_uninstall_modules(array('emh_pcp_special'));
  module_enable(array('emh_profile_complete', 'emh_profile_complete_request', 'emh_profile_complete_submission'));
  features_revert(array(
    'ft_content_type' => array('field_instance'),
    'ft_field_base' => array('field_base')
  ));
}

/**
 * ADD: Revert features for request type.
 */
function emh_configuration_update_7035() {
  features_revert(array(
    'ft_blocks' => array('fe_block_settings'),
    'ft_content_type' => array('field_instance'),
    'ft_views' => array('views_view'),
    'ft_request' => array(
      'fe_block_settings',
      'field_base',
      'field_instance',
      'variable',
      'views_view',
    )
  ));
}

/**
 * Activate queue_ui module
 */
function emh_configuration_update_7036() {
  module_enable(['queue_ui']);
}

/**
 * CHG: remove for good old request types!
 */
function emh_configuration_update_7037() {
  // Uninstall old custom modules
  module_disable(array('emh_question', 'emh_challenge', 'emh_mission'));
  drupal_uninstall_modules(array('emh_question', 'emh_challenge', 'emh_mission'));
  features_revert(array('ft_permissions' => array('user_permission')));

  // Reload EMH Request strings
  emh_request_disable_strings();
  emh_request_enable_strings();

  // Desactivate old rules
  $rules = array(
    'rules_transfert_points_for_content',
    'emh_points_transfert_points_for_published_content',
    'emh_points_transfert_points_for_updated_content',
    'rules_emh_request_send_notification_email',
  );
  foreach ($rules as $rule) {
    if ($rules_config = rules_config_load($rule)) {
      $rules_config->delete();
    }
  }
}

/**
 * ADD: Public request content type.
 */
function emh_configuration_update_7038() {
  module_enable(array('ft_public_request'));
}

/**
 * ADD: New Front.
 */
function emh_configuration_update_7039() {
  features_revert(array(
    'ft_blocks' => array('fe_block_settings', 'fe_block_boxes'),
    'ft_content_type' => array('field_instance'),
    'ft_permissions' => array('user_permission'),
    'ft_request' => array('fe_block_settings'),
    'ft_views' => array('views_view'),
    'ft_field_base' => array('field_base'),
    'ft_faq' => array('field_base', 'field_instance', 'fe_block_settings', 'views_view'),
  ));

  module_enable(array('ft_front', 'ft_blog'));
  module_disable(array('forward'));
  drupal_uninstall_modules(array('forward'));

  // Delete old blocks
  $module = 'block';
  $deltas = array('2', '5', '6', '7', '9', '10', '11', '12', '13', '15', '18', '19', '20', '21', '22');
  foreach ($deltas as $delta) {
    db_delete('block')
      ->condition('module', $module)
      ->condition('delta', $delta)
      ->execute();
    db_delete('block_custom')
      ->condition('bid', $delta)
      ->execute();
    db_delete('block_role')
      ->condition('module', $module)
      ->condition('delta', $delta)
      ->execute();
  }

  // Publish nodes & translations
  $nids = array('267', '268');
  $nodes = node_load_multiple($nids);
  foreach ($nodes as $node) {
    $node->status = 1;
    $node->translations->data['en']['status'] = $node->status;
    $node->translations->data['en']['language'] = 'en';
    $node->translations->data['fr']['status'] = $node->status;
    $node->translations->data['fr']['language'] = 'fr';
    node_save($node);
  }

  // Update menus
  // Contact us
  db_update('menu_links')
    ->fields(array(
      'menu_name' => 'menu-footer-menu',
      'weight' => '-47',
    ))
    ->condition('mlid', '4964')
    ->execute();

  // How it works?
  db_update('menu_links')
    ->fields(array(
      'link_title' => 'How it works?',
    ))
    ->condition('mlid', '4965')
    ->execute();

  // About us
  db_update('menu_links')
    ->fields(array(
      'menu_name' => 'menu-footer-menu',
      'weight' => '-50',
    ))
    ->condition('mlid', '4966')
    ->execute();

  // Delete old menus
  $menus = array(
    'menu-findexpert',
    'menu-networks',
    'menu-using-answers',
    'menu-burger-menu',
  );
  foreach ($menus as $menu) {
    $menu = menu_load($menu);
    menu_delete($menu);
  }
  // Delete old links
  $links = array(
    '3786',
    '7189',
    '7710',
    '10223',
  );
  foreach ($links as $link) {
    db_delete('menu_links')
      ->condition('mlid', $link)
      ->execute();
  }
  variable_set('menu_rebuild_needed', TRUE);

  // HybridAuth
  variable_set('hybridauth_widget_title', 'or');

  // Service links
  module_enable(array('emh_service_links'));
  $types = array(
    'blog' => 'blog',
    'public_request' => 'public_request',
    'article' => '0',
    'page' => '0',
    'challenge' => '0',
    'circle' => '0',
    'faq' => '0',
    'landing_page' => '0',
    'webform' => '0',
    'corporate' => '0',
    'question1' => '0',
    'request' => '0',
  );
  variable_set('service_links_node_types', $types);
  $view_modes = array(
    'full' => '0',
    'teaser' => '0',
    'rss' => 0,
    'search_index' => 0,
    'search_result' => 0,
    'token' => 0,
    'revision' => 0,
    'summary' => 0,
  );
  variable_set('service_links_view_modes', $view_modes);
  $node_view_modes = array(
    'full' => 'full',
    'teaser' => 'teaser',
    'rss' => 0,
    'search_index' => 0,
    'search_result' => 0,
    'token' => 0,
    'revision' => 0,
    'summary' => 0,
  );
  variable_set('service_links_node_view_modes', $node_view_modes);
  variable_set('service_links_style', '2');
  variable_set('service_links_label_in_node', '');
  $show = array(
    'delicious' => 0,
    'digg' => 0,
    'stumbleupon' => 0,
    'twitter' => 1,
    'pingthis' => 0,
    'reddit' => 0,
    'slashdot' => 0,
    'newsvine' => 0,
    'furl' => 0,
    'facebook' => 1,
    'myspace' => 0,
    'google' => 0,
    'google_plus' => 0,
    'yahoo' => 0,
    'linkedin' => 1,
    'technorati' => 0,
    'technorati_favorite' => 0,
    'icerocket' => 0,
    'misterwong' => 0,
    'mixx' => 0,
    'box' => 0,
    'blinklist' => 0,
    'identica' => 0,
    'newskicks' => 0,
    'diigo' => 0,
    'viadeo' => 0,
  );
  variable_set('service_links_show', $show);
  user_role_grant_permissions(1, array('access service links'));
  user_role_grant_permissions(2, array('access service links'));
}

/**
 * ADD: Enable Google Analytics & add GA tracking to email links.
 */
function emh_configuration_update_7040() {
  module_enable(array('googleanalytics'));
  variable_set('googleanalytics_account', 'UA-85111821-1');
  $googleanalytics_pages = "admin
admin/*
batch";
  variable_set('googleanalytics_pages', $googleanalytics_pages);

  $rules = array(
    'rules_emh_circles_send_email_member_subscribe_pending',
    'rules_emh_circles_send_email_membership_accepted',
    'rules_emh_circles_circles_send_email_membership_refused',
    'rules_emh_request_send_notification_email',
  );
  foreach ($rules as $rule) {
    if ($rules_config = rules_config_load($rule)) {
      $rules_config->delete();
    }
  }
}

/**
 * Install module : EMH Roleswitcher & EMH Register + Delete old rules.
 */
function emh_configuration_update_7041() {
  module_enable(array('emh_roleswitcher', 'emh_register'));
  $rules = array(
    'rules_emh_user_client_registration_add_role',
    'rules_emh_user_expert_registration_add_role',
  );
  foreach ($rules as $rule) {
    if ($rules_config = rules_config_load($rule)) {
      $rules_config->delete();
    }
  }
}

/**
 * Install module : EMH Honeypot.
 */
function emh_configuration_update_7042() {
  module_enable(array('emh_honeypot'));
}

/**
 * Disable module : Honeypot.
 */
function emh_configuration_update_7043() {
  module_disable(array('honeypot'));
  drupal_uninstall_modules(array('honeypot'));
  module_enable(array('emh_captcha'));
}

/**
 * Install module : advuser.
 */
function emh_configuration_update_7044() {
  module_enable(array('advuser'));
}

/**
 * CHG: Top nav links.
 */
function emh_configuration_update_7045() {
  features_revert(array('ft_request' => array('views_view')));

  // My circles
  db_update('menu_links')
    ->fields(array(
      'plid' => '7577',
      'weight' => '-49',
    ))
    ->condition('link_title', 'My circles')
    ->execute();

  // Answers
  db_update('menu_links')
    ->fields(array(
      'link_path' => '<nolink>',
      'router_path' => '<nolink>',
      'expanded' => '1',
    ))
    ->condition('mlid', '5523')
    ->execute();

  // Answers > My answers
  db_update('menu_links')
    ->fields(array(
      'plid' => '5523',
    ))
    ->condition('link_title', 'My answers')
    ->execute();

  // Answers > Answers to my requests
  db_update('menu_links')
    ->fields(array(
      'plid' => '5523',
    ))
    ->condition('link_title', 'Answers to my requests')
    ->execute();

  // Delete non-necessary node.
  node_delete('300');
  variable_set('menu_rebuild_needed', TRUE);
}

/**
 * CHG: Answer wording.
 */
function emh_configuration_update_7046() {
  emh_request_disable_strings();
  emh_request_enable_strings();
  features_revert(array(
    'ft_request' => array(
      'fe_block_settings',
      'views_view',
    )
  ));
}

/**
 * CHG: Delete delete_all module.
 */
function emh_configuration_update_7047() {
  module_disable(array('delete_all'));
  drupal_uninstall_modules(array('delete_all'));
}
