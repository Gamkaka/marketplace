<?php

/**
 * @file
 * Installation hooks for the EMH configuration module.
 */

/**
 * Implements hook_update_dependencies().
 */
function emh_configuration_update_dependencies() {
  $dependencies['emh_configuration'][7070] = array(
    'pet' => 7001,
  );
  $dependencies['emh_configuration'][7083] = array(
    'emh_points' => 7116,
    'emh_points_earnings' => 7103, 
  );

  return $dependencies;
}

/**
 * Implements hook_enable().
 */
function emh_configuration_enable() {
  emh_configuration_update_7001();
  emh_configuration_update_7002();
  emh_configuration_update_7003();
  emh_configuration_update_7004();
  emh_configuration_update_7005();
  emh_configuration_update_7006();

  variable_set('date_format_short_date', 'Y/m/d');
}

/**
 * Uninstall modules : EMH blocks, forum, poll.
 */
function emh_configuration_update_7001() {
  module_disable(array('emh_blocks', 'forum', 'poll'));
  drupal_uninstall_modules(array('emh_blocks', 'forum', 'poll'));
}

/**
 * Delete roles : expert preview, business preview.
 */
function emh_configuration_update_7002() {
  user_role_delete('expert preview');
  user_role_delete('business preview');
}

/**
 * Install modules : Autologout, PCP.
 */
function emh_configuration_update_7003() {
  module_enable(array('autologout', 'pcp'));
}

/**
 * Populate PCP fields parameters.
 */
function emh_configuration_update_7004() {
  $value = array(
    'user:user:field_first_name' => 'user:user:field_first_name',
    'user:user:field_last_name' => 'user:user:field_last_name',
    'user:user:field_entreprise' => 'user:user:field_entreprise',
    'user:user:field_telephone' => 'user:user:field_telephone',
    'user:user:field_address' => 'user:user:field_address',
    'user:user:field_titre_metier' => 'user:user:field_titre_metier',
    'user:user:field_working_status' => 'user:user:field_working_status',
    'user:user:field_domaine' => 'user:user:field_domaine',
    'user:user:field_skills_set' => 'user:user:field_skills_set',
    'user:user:field_employment_history' => 'user:user:field_employment_history',
    'user:user:field_notification_frequency' => 'user:user:field_notification_frequency',
    'user:user:field_entreprise_description' => 'user:user:field_entreprise_description',
    'user:user:field_specific_skills3' => 'user:user:field_specific_skills3',
    'user:user:field_photo' => 'user:user:field_photo',
    'user:user:field_position' => 'user:user:field_position',
    'user:user:field_cv' => 'user:user:field_cv',
    'user:user:field_position_list' => 'user:user:field_position_list',
    'user:user:field_needs_for_expertise' => 'user:user:field_needs_for_expertise',
  );
  variable_set('pcp_enabled_fields', $value);
  variable_set('pcp_hide_block_on_complete', '1');
}

/**
 * Delete Search module tables.
 */
function emh_configuration_update_7005() {
  db_delete('search_total')
    ->execute();
  db_delete('search_index')
    ->execute();
}

/**
 * Delete old blocks and revert block features.
 */
function emh_configuration_update_7006() {
  $module = 'block';
  $deltas = array('24', '25');
  foreach ($deltas as $delta) {
    db_delete('block')
      ->condition('module', $module)
      ->condition('delta', $delta)
      ->execute();
    db_delete('block_custom')
      ->condition('bid', $delta)
      ->execute();
    db_delete('block_role')
      ->condition('module', $module)
      ->condition('delta', $delta)
      ->execute();
  }
  features_revert(array('ft_blocks' => array('fe_block_boxes')));
}

/**
 * Uninstall module Login Destination + Enable module Language Access.
 */
function emh_configuration_update_7007() {
  module_disable(array('login_destination'));
  drupal_uninstall_modules(array('login_destination'));
  module_enable(array('language_access'));
}

/**
 * Add permissions : Languages access.
 */
function emh_configuration_update_7008() {
  user_role_grant_permissions(DRUPAL_ANONYMOUS_RID, array('access language en'));
  user_role_grant_permissions(DRUPAL_AUTHENTICATED_RID, array('access language en'));
  user_role_grant_permissions(DRUPAL_ANONYMOUS_RID, array('access language fr'));
  // Administrator.
  user_role_grant_permissions(3, array('access language fr'));
  // Webmaster.
  user_role_grant_permissions(6, array('access language fr'));
}

/**
 * Delete Forum + Poll nodes and content types.
 */
function emh_configuration_update_7009() {
  $types = array(
    'forum',
    'poll',
  );
  foreach ($types as $type) {
    // First, delete nodes.
    $results = db_select('node', 'n')
      ->fields('n', array('nid'))
      ->condition('type', $type)
      ->execute();
    foreach ($results as $result) {
      $nids[] = $result->nid;
    }
    if (!empty($nids)) {
      node_delete_multiple($nids);
      drupal_set_message(t('%count nodes has been deleted.', array('%count' => count($nids))));
    }
    // Then, delete content type.
    if (node_type_load($type)) {
      node_type_delete($type);
      variable_del('node_preview_' . $type);
      drupal_set_message(t('%type content type has been deleted.', array('%type' => $type)));
    }
  }
  node_types_rebuild();
  variable_set('menu_rebuild_needed', TRUE);
}

/**
 * Delete old rules.
 */
function emh_configuration_update_7010() {
  if ($rules_config = rules_config_load('rules_schedule_inscription_clotures')) {
    $rules_config->delete();
  }
  if ($rules_config = rules_config_load('rules_gammification_node')) {
    $rules_config->delete();
  }
  if ($rules_config = rules_config_load('rules_gammification_comment')) {
    $rules_config->delete();
  }
  if ($rules_config = rules_config_load('rules_private_proposal')) {
    $rules_config->delete();
  }
  if ($rules_config = rules_config_load('rules_private_challenge')) {
    $rules_config->delete();
  }
}

/**
 * HybridAuth : change emails duplicate option.
 */
function emh_configuration_update_7011() {
  variable_set('hybridauth_duplicate_emails', '2');
}

/**
 * Remove permissions : no more cookie for admin & webmaster!
 */
function emh_configuration_update_7012() {
  user_role_revoke_permissions(DRUPAL_AUTHENTICATED_RID, array('display EU Cookie Compliance popup'));
  // Administrator.
  user_role_revoke_permissions(3, array('display EU Cookie Compliance popup'));
  // Expert.
  user_role_grant_permissions(4, array('display EU Cookie Compliance popup'));
  // Business.
  user_role_grant_permissions(5, array('display EU Cookie Compliance popup'));
  // Referent.
  user_role_grant_permissions(7, array('display EU Cookie Compliance popup'));
}

/**
 * Install module : EMH Answer.
 */
function emh_configuration_update_7013() {
  module_enable(array('emh_answer'));
  user_role_grant_permissions(DRUPAL_AUTHENTICATED_RID, array('save draft'));
  user_role_grant_permissions(DRUPAL_AUTHENTICATED_RID, array('save comment draft'));
  features_revert(array('ft_permissions' => array('user_permission')));
}

/**
 * Change default webform parameters.
 */
function emh_configuration_update_7014() {
  variable_set('webform_default_from_address', 'contact@emindhub.com');
  variable_set('webform_default_from_name', 'eMindHub');
  variable_set('webform_default_subject', 'New answer: [node:title]');
  variable_set('webform_email_html_capable', '1');
  variable_set('webform_default_format', '1');
  variable_set('webform_format_override', '1');
  variable_set('webform_token_access', '0');
}

/**
 * Change top nav links.
 */
function emh_configuration_update_7015() {
  // Change existing links.
  db_update('menu_links')
    ->fields(array(
      'link_path' => '<front>',
      'link_title' => 'Home',
      'weight' => '-50',
    ))
    ->condition('mlid', '7708')
    ->execute();
  db_update('menu_links')
    ->fields(array(
      'link_title' => 'Requests',
      'expanded' => '1',
      'weight' => '-49',
      'hidden' => '0',
    ))
    ->condition('mlid', '4970')
    ->execute();
  db_update('menu_links')
    ->fields(array(
      'link_title' => 'Answers',
      'weight' => '-48',
    ))
    ->condition('mlid', '5523')
    ->execute();
  db_update('menu_links')
    ->fields(array(
      'link_title' => 'Network',
      'expanded' => '1',
      'weight' => '-47',
      'hidden' => '0',
    ))
    ->condition('mlid', '7577')
    ->execute();

  variable_set('menu_rebuild_needed', TRUE);

  // Change Requests & Circles paths.
  features_revert(array('ft_views' => array('views_view')));
  features_revert(array('ft_blocks' => array('fe_block_boxes')));
}

/**
 * Uninstall module : emh_freetrial + Register alias for former /freetrial URL.
 */
function emh_configuration_update_7016() {
  // Uninstall modules.
  module_disable(array('emh_freetrial'));
  drupal_uninstall_modules(array('emh_freetrial'));

  // Change block path view settings.
  features_revert(array('ft_blocks' => array('fe_block_boxes')));
}

/**
 * Change default website email.
 */
function emh_configuration_update_7017() {
  variable_set('site_mail', 'contact@emindhub.com');
}

/**
 * Update HybridAuth block.
 */
function emh_configuration_update_7019() {
  db_update('block')
    ->fields(array(
      'title' => '<none>',
      'status' => '1',
      'visibility' => '1',
      'region' => 'content',
      'pages' => "expert/register",
      'weight' => '-35',
    ))
    ->condition('module', 'hybridauth')
    ->condition('delta', 'hybridauth')
    ->execute();
}

/**
 * Revert views.
 */
function emh_configuration_update_7020() {
  features_revert(array('ft_views' => array('views_view')));
}

/**
 * FIX Uninstall autoassignrole + FIX Activate ft_permissions + CHG permissions : Service links + CHG Service links parameters, Add to my selection flag.
 */
function emh_configuration_update_7021() {
  // Uninstall module.
  module_enable(array('ft_permissions'));
  features_revert(array('ft_permissions' => array('user_permission')));
  module_disable(array('autoassignrole'));
  drupal_uninstall_modules(array('autoassignrole'));

  // Change permissions.
  user_role_grant_permissions(3, array('access service links'));
  user_role_grant_permissions(4, array('access service links'));
  user_role_grant_permissions(5, array('access service links'));
  user_role_grant_permissions(6, array('access service links'));

  // Change parameters.
  $value = array(
    'blog' => 'blog',
    'article' => '0',
    'page' => '0',
    'challenge' => '0',
    'circle' => '0',
    'webform' => '0',
    'corporate' => '0',
    'question1' => '0',
    'user_alert' => '0',
    'working_group' => '0',
  );
  variable_set('service_links_node_types', $value);

  features_revert(array('ft_field_base' => array('flag')));
  features_revert(array('ft_views' => array('views_view')));

  // Change My selection.
  db_delete('menu_links')
    ->condition('mlid', '9260')
    ->execute();
  db_update('menu_links')
    ->fields(array(
      'plid' => '4970',
    ))
    ->condition('mlid', '9385')
    ->execute();

  variable_set('menu_rebuild_needed', TRUE);
}

/**
 * CHG: Uninstall module user_alert + remove content types user_alert, working_group.
 */
function emh_configuration_update_7022() {
  features_revert(array('ft_blocks' => array('fe_block_boxes')));
  features_revert(array('ft_blocks' => array('fe_block_settings')));
  features_revert(array('ft_content_type' => array('field_instance')));
  features_revert(array('ft_content_type' => array('node')));
  features_revert(array('ft_content_type' => array('variable')));
  features_revert(array('ft_field_base' => array('field_base')));
  features_revert(array('ft_permissions' => array('user_permission')));

  module_disable(array('user_alert'));
  drupal_uninstall_modules(array('user_alert'));

  $types = array(
    'user_alert',
    'working_group',
  );
  foreach ($types as $type) {
    // First, delete nodes.
    $results = db_select('node', 'n')
      ->fields('n', array('nid'))
      ->condition('type', $type)
      ->execute();
    foreach ($results as $result) {
      $nids[] = $result->nid;
    }
    if (!empty($nids)) {
      node_delete_multiple($nids);
      drupal_set_message(t('%count nodes has been deleted.', array('%count' => count($nids))));
    }
    // Then, delete content type.
    if (node_type_load($type)) {
      node_type_delete($type);
      variable_del('node_preview_' . $type);
      drupal_set_message(t('%type content type has been deleted.', array('%type' => $type)));
    }
  }
  node_types_rebuild();
  variable_set('menu_rebuild_needed', TRUE);
}

/**
 * ADD: new FAQ feature.
 */
function emh_configuration_update_7023() {
  module_enable(array('emh_faq'));
}

/**
 * CHG: update user_export_ view (add some new fields)
 */
function emh_configuration_update_7024() {
  features_revert(array('ft_views' => array('views_view')));
}

/**
 * ADD: video in Homepage.
 */
function emh_configuration_update_7025() {
  features_revert(array('ft_blocks' => array('fe_block_boxes')));
}

/**
 * ADD: new Landing page feature.
 */
function emh_configuration_update_7026() {
  module_enable(array('emh_landing_page'));
}

/**
 * CHG: translation setting.
 */
function emh_configuration_update_7027() {
  variable_set('i18n_hide_translation_links', TRUE);
  variable_set('i18n_node_default_language_none', '0');
}

/**
 * CHG: News views for better translation support.
 */
function emh_configuration_update_7028() {
  features_revert(array('ft_views' => array('views_view')));
}

/**
 * CHG: Revoke client & expert permissions on Blog entry & circle creation.
 */
function emh_configuration_update_7029() {
  features_revert(array('ft_permissions' => array('user_permission')));
}

/**
 * CHG: Remove Legal terms of use from Features.
 */
function emh_configuration_update_7030() {
  features_revert(array('ft_field_base' => array('field_base')));
}

/**
 * CHG: Delete old question/challenge blocks.
 */
function emh_configuration_update_7031() {
  $module = 'block';
  $deltas = array('14', '16');
  foreach ($deltas as $delta) {
    db_delete('block')
      ->condition('module', $module)
      ->condition('delta', $delta)
      ->execute();
    db_delete('block_custom')
      ->condition('bid', $delta)
      ->execute();
    db_delete('block_role')
      ->condition('module', $module)
      ->condition('delta', $delta)
      ->execute();
  }
}

/**
 * CHG: Update short date format.
 */
function emh_configuration_update_7032() {
  db_update('date_formats')
    ->fields(array(
      'format' => 'Y/m/d',
    ))
    ->condition('dfid', '60')
    ->execute();
}

/**
 * CHG: Renaming 'point' with 'credit' everywhere.
 */
function emh_configuration_update_7033() {
  // Permissions.
  user_role_grant_permissions(DRUPAL_AUTHENTICATED_RID, array('use credits'));
  // Administrator role.
  user_role_grant_permissions(3, array('administer credits', 'view others credits history'));
  // Webmaster role.
  user_role_grant_permissions(6, array('administer credits', 'view others credits history'));

  // Rules.
  if ($rules_config = rules_config_load('rules_contact_impossible')) {
    $rules_config->delete();
  }
  if ($rules_config = rules_config_load('rules_transfert_points_for_content')) {
    $rules_config->delete();
  }
  if ($rules_config = rules_config_load('rules_transfert_points_for_content')) {
    $rules_config->delete();
  }
  if ($rules_config = rules_config_load('emh_points_transfert_points_for_published_content')) {
    $rules_config->delete();
  }
  if ($rules_config = rules_config_load('emh_points_transfert_points_for_updated_content')) {
    $rules_config->delete();
  }
  if ($rules_config = rules_config_load('rules_emh_request_send_notification_email')) {
    $rules_config->delete();
  }
  if ($rules_config = rules_config_load('rules_emh_request_send_webmaster_notification_email')) {
    $rules_config->delete();
  }
  if ($rules_config = rules_config_load('rules_emh_user_show_expert_login_message')) {
    $rules_config->delete();
  }

  // Features.
  features_revert(array('ft_content_type' => array('field_instance')));
}

/**
 * CHG: Replace emh_pcp_special for emh_profile_complete and sub-modules.
 */
function emh_configuration_update_7034() {
  module_disable(array('emh_pcp_special'));
  drupal_uninstall_modules(array('emh_pcp_special'));
  module_enable(array('emh_profile_complete', 'emh_profile_complete_request', 'emh_profile_complete_submission'));
  features_revert(array(
    'ft_content_type' => array('field_instance'),
    'ft_field_base' => array('field_base'),
  ));
}

/**
 * ADD: Revert features for request type.
 */
function emh_configuration_update_7035() {
  features_revert(array(
    'ft_blocks' => array('fe_block_settings'),
    'ft_content_type' => array('field_instance'),
    'ft_views' => array('views_view'),
    'ft_request' => array(
      'fe_block_settings',
      'field_base',
      'field_instance',
      'variable',
      'views_view',
    ),
  ));
}

/**
 * Activate queue_ui module.
 */
function emh_configuration_update_7036() {
  module_enable(['queue_ui']);
}

/**
 * CHG: remove for good old request types!
 */
function emh_configuration_update_7037() {
  // Uninstall old custom modules.
  module_disable(array('emh_question', 'emh_challenge', 'emh_mission'));
  drupal_uninstall_modules(array('emh_question', 'emh_challenge', 'emh_mission'));
  features_revert(array('ft_permissions' => array('user_permission')));

  // Reload EMH Request strings.
  emh_request_disable_strings();
  emh_request_enable_strings();

  // Desactivate old rules.
  $rules = array(
    'rules_transfert_points_for_content',
    'emh_points_transfert_points_for_published_content',
    'emh_points_transfert_points_for_updated_content',
    'rules_emh_request_send_notification_email',
  );
  foreach ($rules as $rule) {
    if ($rules_config = rules_config_load($rule)) {
      $rules_config->delete();
    }
  }
}

/**
 * ADD: Public request content type.
 */
function emh_configuration_update_7038() {
  module_enable(array('ft_public_request'));
}

/**
 * ADD: New Front.
 */
function emh_configuration_update_7039() {
  features_revert(array(
    'ft_blocks' => array('fe_block_settings', 'fe_block_boxes'),
    'ft_content_type' => array('field_instance'),
    'ft_permissions' => array('user_permission'),
    'ft_request' => array('fe_block_settings'),
    'ft_views' => array('views_view'),
    'ft_field_base' => array('field_base'),
    'ft_faq' => array('field_base', 'field_instance', 'fe_block_settings', 'views_view'),
  ));

  module_enable(array('ft_front', 'ft_blog'));
  module_disable(array('forward'));
  drupal_uninstall_modules(array('forward'));

  // Delete old blocks.
  $module = 'block';
  $deltas = array('2', '5', '6', '7', '9', '10', '11', '12', '13', '15', '18', '19', '20', '21', '22');
  foreach ($deltas as $delta) {
    db_delete('block')
      ->condition('module', $module)
      ->condition('delta', $delta)
      ->execute();
    db_delete('block_custom')
      ->condition('bid', $delta)
      ->execute();
    db_delete('block_role')
      ->condition('module', $module)
      ->condition('delta', $delta)
      ->execute();
  }

  // Publish nodes & translations.
  $nids = array('267', '268');
  $nodes = node_load_multiple($nids);
  foreach ($nodes as $node) {
    $node->status = 1;
    $node->translations->data['en']['status'] = $node->status;
    $node->translations->data['en']['language'] = 'en';
    $node->translations->data['fr']['status'] = $node->status;
    $node->translations->data['fr']['language'] = 'fr';
    node_save($node);
  }

  // Update menus
  // Contact us.
  db_update('menu_links')
    ->fields(array(
      'menu_name' => 'menu-footer-menu',
      'weight' => '-47',
    ))
    ->condition('mlid', '4964')
    ->execute();

  // How it works?
  db_update('menu_links')
    ->fields(array(
      'link_title' => 'How it works?',
    ))
    ->condition('mlid', '4965')
    ->execute();

  // About us.
  db_update('menu_links')
    ->fields(array(
      'menu_name' => 'menu-footer-menu',
      'weight' => '-50',
    ))
    ->condition('mlid', '4966')
    ->execute();

  // Delete old menus.
  $menus = array(
    'menu-findexpert',
    'menu-networks',
    'menu-using-answers',
    'menu-burger-menu',
  );
  foreach ($menus as $menu) {
    $menu = menu_load($menu);
    menu_delete($menu);
  }
  // Delete old links.
  $links = array(
    '3786',
    '7189',
    '7710',
    '10223',
  );
  foreach ($links as $link) {
    db_delete('menu_links')
      ->condition('mlid', $link)
      ->execute();
  }
  variable_set('menu_rebuild_needed', TRUE);

  // HybridAuth.
  variable_set('hybridauth_widget_title', 'or');

  // Service links.
  module_enable(array('emh_service_links'));
  $types = array(
    'blog' => 'blog',
    'public_request' => 'public_request',
    'article' => '0',
    'page' => '0',
    'challenge' => '0',
    'circle' => '0',
    'faq' => '0',
    'landing_page' => '0',
    'webform' => '0',
    'corporate' => '0',
    'question1' => '0',
    'request' => '0',
  );
  variable_set('service_links_node_types', $types);
  $view_modes = array(
    'full' => '0',
    'teaser' => '0',
    'rss' => 0,
    'search_index' => 0,
    'search_result' => 0,
    'token' => 0,
    'revision' => 0,
    'summary' => 0,
  );
  variable_set('service_links_view_modes', $view_modes);
  $node_view_modes = array(
    'full' => 'full',
    'teaser' => 'teaser',
    'rss' => 0,
    'search_index' => 0,
    'search_result' => 0,
    'token' => 0,
    'revision' => 0,
    'summary' => 0,
  );
  variable_set('service_links_node_view_modes', $node_view_modes);
  variable_set('service_links_style', '2');
  variable_set('service_links_label_in_node', '');
  $show = array(
    'delicious' => 0,
    'digg' => 0,
    'stumbleupon' => 0,
    'twitter' => 1,
    'pingthis' => 0,
    'reddit' => 0,
    'slashdot' => 0,
    'newsvine' => 0,
    'furl' => 0,
    'facebook' => 1,
    'myspace' => 0,
    'google' => 0,
    'google_plus' => 0,
    'yahoo' => 0,
    'linkedin' => 1,
    'technorati' => 0,
    'technorati_favorite' => 0,
    'icerocket' => 0,
    'misterwong' => 0,
    'mixx' => 0,
    'box' => 0,
    'blinklist' => 0,
    'identica' => 0,
    'newskicks' => 0,
    'diigo' => 0,
    'viadeo' => 0,
  );
  variable_set('service_links_show', $show);
  user_role_grant_permissions(1, array('access service links'));
  user_role_grant_permissions(2, array('access service links'));
}

/**
 * ADD: Enable Google Analytics & add GA tracking to email links.
 */
function emh_configuration_update_7040() {
  module_enable(array('googleanalytics'));
  variable_set('googleanalytics_account', 'UA-85111821-1');
  $googleanalytics_pages = "admin
admin/*
batch";
  variable_set('googleanalytics_pages', $googleanalytics_pages);

  $rules = array(
    'rules_emh_circles_send_email_member_subscribe_pending',
    'rules_emh_circles_send_email_membership_accepted',
    'rules_emh_circles_circles_send_email_membership_refused',
    'rules_emh_request_send_notification_email',
  );
  foreach ($rules as $rule) {
    if ($rules_config = rules_config_load($rule)) {
      $rules_config->delete();
    }
  }
}

/**
 * Install module : EMH Roleswitcher & EMH Register + Delete old rules.
 */
function emh_configuration_update_7041() {
  module_enable(array('emh_roleswitcher', 'emh_register'));
  $rules = array(
    'rules_emh_user_client_registration_add_role',
    'rules_emh_user_expert_registration_add_role',
  );
  foreach ($rules as $rule) {
    if ($rules_config = rules_config_load($rule)) {
      $rules_config->delete();
    }
  }
}

/**
 * Install module : EMH Honeypot.
 */
function emh_configuration_update_7042() {
  module_enable(array('emh_honeypot'));
}

/**
 * Disable module : Honeypot.
 */
function emh_configuration_update_7043() {
  module_disable(array('honeypot'));
  drupal_uninstall_modules(array('honeypot'));
  module_enable(array('emh_captcha'));
}

/**
 * Install module : advuser.
 */
function emh_configuration_update_7044() {
  module_enable(array('advuser'));
}

/**
 * CHG: Top nav links.
 */
function emh_configuration_update_7045() {
  features_revert(array('ft_request' => array('views_view')));

  // My circles.
  db_update('menu_links')
    ->fields(array(
      'plid' => '7577',
      'weight' => '-49',
    ))
    ->condition('link_title', 'My circles')
    ->execute();

  // Answers.
  db_update('menu_links')
    ->fields(array(
      'link_path' => '<nolink>',
      'router_path' => '<nolink>',
      'expanded' => '1',
    ))
    ->condition('mlid', '5523')
    ->execute();

  // Answers > My answers.
  db_update('menu_links')
    ->fields(array(
      'plid' => '5523',
    ))
    ->condition('link_title', 'My answers')
    ->execute();

  // Answers > Answers to my requests.
  db_update('menu_links')
    ->fields(array(
      'plid' => '5523',
    ))
    ->condition('link_title', 'Answers to my requests')
    ->execute();

  // Delete non-necessary node.
  node_delete('300');
  variable_set('menu_rebuild_needed', TRUE);
}

/**
 * CHG: Answer wording.
 */
function emh_configuration_update_7046() {
  emh_request_disable_strings();
  emh_request_enable_strings();
  features_revert(array(
    'ft_request' => array(
      'fe_block_settings',
      'views_view',
    ),
  ));
}

/**
 * CHG: Delete delete_all module.
 */
function emh_configuration_update_7047() {
  module_disable(array('delete_all'));
  drupal_uninstall_modules(array('delete_all'));
}

/**
 * CHG: Delete useless WYSIWYG Features.
 */
function emh_configuration_update_7048() {
  module_disable(array('ft_wysiwyg'));
  drupal_uninstall_modules(array('ft_wysiwyg'));
}

/**
 * CHG: 403 errors infos.
 */
function emh_configuration_update_7049() {
  if (module_exists('customerror')) {
    variable_set('customerror_403_authenticated_title', 'Access denied');
    variable_set('customerror_403_authenticated', 'Insufficient permissions to access this page.');
  }
}

/**
 * CHG: Delete Display Suite module.
 */
function emh_configuration_update_7050() {
  module_disable(array('ds'));
  drupal_uninstall_modules(array('ds'));
}

/**
 * CHG: Disable original OG Extras group members.
 */
function emh_configuration_update_7051() {
  $views_name = array(
    'og_extras_members',
  );
  emh_configuration_revert_and_disable_views($views_name);
}

/**
 * Install module : Twitter username.
 */
function emh_configuration_update_7052() {
  module_enable(array('twitter_username'));
}

/**
 * ADD: Smart Mobility feature.
 */
function emh_configuration_update_7053() {
  module_enable(['emh_smartmobility']);
}

/**
 * ADD: moderate permissions.
 */
function emh_configuration_update_7054() {
  variable_del('emh_request_send_notification_email_all_domains');

  if ($rules_config = rules_config_load('rules_emh_request_send_notification_email')) {
    $rules_config->delete();
  }

  if ($rules_config = rules_config_load('rules_emh_request_send_webmaster_notification_email')) {
    $rules_config->delete();
  }

  module_enable(['emh_request_notification']);
  user_role_grant_permissions(3, array('moderate requests'));
  user_role_grant_permissions(6, array('moderate requests'));
}

/**
 * ADD: Bootstrap Tour feature.
 */
function emh_configuration_update_7055() {
  module_enable(['bootstrap_tour']);
}

/**
 * CHG: Legal doc in signup form.
 */
function emh_configuration_update_7056() {
  $data = array(
    'new_users' => array(
      'require' => 1,
      'require_method' => 'form_inline',
    ),
    'existing_users' => array(
      'require' => 1,
      'require_method' => 'message',
    ),
    'settings__active_tab' => 'edit-settings-new-users',
  );
  db_update('entity_legal_document')
    ->fields(array(
      'settings' => serialize($data),
    ))
    ->condition('name', 'terms_of_use')
    ->execute();

  db_update('entity_legal_document_version')
    ->fields(array(
      'acceptance_label' => 'I agree to the Terms of use document',
    ))
    ->condition('name', 'terms_of_use_1479725866')
    ->execute();
}

/**
 * ADD: olark module.
 */
function emh_configuration_update_7057() {
  module_enable(['olark']);
  variable_set('olark_code', "<!-- begin olark code -->\r\n<script type=\"text/javascript\" async> ;(function(o,l,a,r,k,y){if(o.olark)return; r=\"script\";y=l.createElement(r);r=l.getElementsByTagName(r)[0]; y.async=1;y.src=\"//\"+a;r.parentNode.insertBefore(y,r); y=o.olark=function(){k.s.push(arguments);k.t.push(+new Date)}; y.extend=function(i,j){y(\"extend\",i,j)}; y.identify=function(i){y(\"identify\",k.i=i)}; y.configure=function(i,j){y(\"configure\",i,j);k.c[i]=j}; k=y._={s:[],t:[+new Date],c:{},l:a}; })(window,document,\"static.olark.com/jsclient/loader.js\");\r\n/* custom configuration goes here (www.olark.com/documentation) */\r\nolark.identify('2802-759-10-6757');</script>\r\n<!-- end olark code -->");
  variable_set('olark_enable_admin', '0');
  variable_set('olark_ignore_user_roles', array(
    1 => '1',
    3 => '3',
    6 => '6',
    7 => '7',
    10 => '10',
    2 => 0,
    4 => 0,
    5 => 0,
  ));
}

/**
 * ADD: Autodialog module.
 */
function emh_configuration_update_7058() {
  module_enable(['autodialog']);
  variable_set('autodialog_source', 'region');
}

/**
 * CHG: EMH Profile Complete Request block parameters.
 */
function emh_configuration_update_7059() {
  module_disable(['emh_profile_complete_request']);
  drupal_uninstall_modules(['emh_profile_complete_request']);
  module_enable(['emh_profile_complete_request']);
}

/**
 * CHG: Update webmaster permissions.
 */
function emh_configuration_update_7060() {
  db_query("delete from {role_permission} using {role_permission}, {role} where {role_permission}.rid = {role}.rid and {role}.name='webmaster'");
  $permissions = array(
    'access administration menu',
    'access administration pages',
    'access all webform results',
    'access backup files',
    'access ckeditor link',
    'access comments',
    'access content overview',
    'access devel information',
    'access EMH answers',
    'access EMH profiles',
    'access EMH requests',
    'access environment indicator',
    'access environment indicator clone',
    'access environment indicator demo',
    'access environment indicator dev',
    'access environment indicator overwritten_environment',
    'access environment indicator preprod',
    'access environment indicator prod',
    'access environment indicator test',
    'access language fr',
    'access mail logger',
    'access own webform results',
    'access own webform submissions',
    'access private fields',
    'access rules debug',
    'access service links',
    'access site in maintenance mode',
    'access site reports',
    'access user contact forms',
    'act as administrator member in og node:circle',
    'act as Creator member in og node:circle',
    'act as member in og node:circle',
    'act as non-member in og node:circle',
    'act as Referent member in og node:circle',
    'administer content translations',
    'administer credits',
    'administer entity translation',
    'administer environment indicator settings',
    'administer formtips',
    'administer group',
    'administer languages',
    'administer mail templates',
    'administer media',
    'administer menu attributes',
    'administer nodes',
    'administer recaptcha',
    'administer rules',
    'administer shortcuts',
    'administer simplify',
    'administer url aliases',
    'administer users',
    'attachments with views_send',
    'block IP addresses',
    'blog: comment on any blog content',
    'blog: comment without approval on any blog content',
    'blog: comment without approval on own blog content',
    'blog: edit own comments on blog content',
    'bypass node access',
    'bypass rules access',
    'create article content',
    'create blog content',
    'create circle content',
    'create corporate content',
    'create faq content',
    'create field_force_public_answer',
    'create landing_page content',
    'create page content',
    'create public_request content',
    'create request content',
    'create url aliases',
    'customize shortcut links',
    'delete all webform submissions',
    'delete any article content',
    'delete any blog content',
    'delete any circle content',
    'delete any corporate content',
    'delete any faq content',
    'delete any landing_page content',
    'delete any page content',
    'delete any public_request content',
    'delete any request content',
    'delete backup files',
    'delete own article content',
    'delete own blog content',
    'delete own circle content',
    'delete own corporate content',
    'delete own faq content',
    'delete own landing_page content',
    'delete own page content',
    'delete own public_request content',
    'delete own request content',
    'delete own webform submissions',
    'delete revisions',
    'delete terms in 10',
    'delete terms in 11',
    'delete terms in 2',
    'delete terms in 3',
    'delete terms in 4',
    'delete terms in 5',
    'delete terms in 6',
    'delete terms in 7',
    'delete terms in 8',
    'delete terms in 9',
    'display drupal links',
    'edit all webform submissions',
    'edit any article content',
    'edit any blog content',
    'edit any circle content',
    'edit any corporate content',
    'edit any faq content',
    'edit any landing_page content',
    'edit any page content',
    'edit any public_request content',
    'edit any request content',
    'edit field_force_public_answer',
    'edit field_is_sponsor',
    'edit field_referent',
    'edit media',
    'edit meta tags',
    'edit own article content',
    'edit own blog content',
    'edit own circle content',
    'edit own comments',
    'edit own corporate content',
    'edit own faq content',
    'edit own field_force_public_answer',
    'edit own field_is_sponsor',
    'edit own landing_page content',
    'edit own page content',
    'edit own public_request content',
    'edit own request content',
    'edit own webform submissions',
    'edit terms in 10',
    'edit terms in 11',
    'edit terms in 2',
    'edit terms in 3',
    'edit terms in 4',
    'edit terms in 5',
    'edit terms in 6',
    'edit terms in 7',
    'edit terms in 8',
    'edit terms in 9',
    'edit webform components',
    'execute comment_publish_action',
    'execute comment_save_action',
    'execute comment_unpublish_action',
    'execute comment_unpublish_by_keyword_action',
    'execute emh_points_arrange_group_points',
    'execute emh_points_arrange_node_points',
    'execute emh_points_arrange_points',
    'execute emh_points_give_points',
    'execute emh_points_remove_points',
    'execute emh_points_transfert_points',
    'execute flag_comment_action',
    'execute flag_node_action',
    'execute flag_user_action',
    'execute node_assign_owner_action',
    'execute node_make_sticky_action',
    'execute node_make_unsticky_action',
    'execute node_promote_action',
    'execute node_publish_action',
    'execute node_save_action',
    'execute node_unpromote_action',
    'execute node_unpublish_action',
    'execute node_unpublish_by_keyword_action',
    'execute og_membership_delete_action',
    'execute og_set_state_action',
    'execute pathauto_node_update_action',
    'execute pathauto_taxonomy_term_update_action',
    'execute pathauto_user_update_action',
    'execute system_block_ip_action',
    'execute system_goto_action',
    'execute system_message_action',
    'execute system_send_email_action',
    'execute term_merge_action',
    'execute user_block_user_action',
    'execute views_bulk_operations_archive_action',
    'execute views_bulk_operations_argument_selector_action',
    'execute views_bulk_operations_delete_item',
    'execute views_bulk_operations_delete_revision',
    'execute views_bulk_operations_modify_action',
    'execute views_bulk_operations_user_cancel_action',
    'execute views_bulk_operations_user_roles_action',
    'execute views_extra_handlers_node_revision_publish_status_action',
    'execute views_extra_handlers_node_revision_unpublish_status_action',
    'flag my_contacts',
    'flush caches',
    'import media',
    'mass mailing with views_send',
    'merge forums terms',
    'merge position terms',
    'merge skill terms',
    'merge tags terms',
    'moderate requests',
    'modify EMH circles',
    'modify requests',
    'notify of path changes',
    'perform backup',
    'post comments',
    'privatecomments challenge view all',
    'restore from backup',
    'revert revisions',
    'schedule publishing of nodes',
    'search content',
    'skip comment approval',
    'switch shortcut sets',
    'toggle field translatability',
    'translate admin strings',
    'translate any entity',
    'translate content',
    'translate interface',
    'translate node entities',
    'translate taxonomy_term entities',
    'translate user-defined strings',
    'unflag my_contacts',
    'use advanced search',
    'use text format filtered_html',
    'use text format full_html',
    'view field_force_public_answer',
    'view field_is_sponsor',
    'view hidden fields',
    'view media',
    'view others credits history',
    'view others invitations history',
    'view own field_force_public_answer',
    'view own field_is_sponsor',
    'view own unpublished content',
    'view revisions',
    'view scheduled content',
    'view the administration theme',
  );
  $role = user_role_load_by_name('webmaster');
  $permissions = _emh_configuration_permissions_validate($permissions);
  user_role_grant_permissions($role->rid, $permissions);
  cache_clear_all('*', 'cache_menu', TRUE);
}

/**
 * ADD: new Submission Flags module + CHG: Revert missing views changes.
 */
function emh_configuration_update_7061() {
  module_enable(['emh_request_submission_flags']);
  emh_configuration_revert_views(array('my_circles', 'my_relationships'));
}

/**
 * CHG: delete old rules + ADD: new Circles Notification module.
 */
function emh_configuration_update_7062() {
  $rules = array(
    'rules_emh_circles_send_email_member_subscribe_pending',
    'rules_emh_circles_send_email_membership_accepted',
    'rules_emh_circles_circles_send_email_membership_refused',
  );
  foreach ($rules as $rule) {
    if ($rules_config = rules_config_load($rule)) {
      $rules_config->delete();
    }
  }

  module_enable(['emh_circles_notification']);
}

/**
 * ADD: new module hotjar.
 */
function emh_configuration_update_7063() {
  module_enable(['hotjar']);
}

/**
 * CHG: replace module advuser with admin_users.
 */
function emh_configuration_update_7064() {
  module_enable(['admin_users']);
  module_disable(['advuser']);
  drupal_uninstall_modules(['advuser']);
}

/**
 * ADD: new module pet :"previewable email templates".
 */
function emh_configuration_update_7065() {
  module_enable(['pet']);
  // Log errors only.
  variable_set('pet_logging', 1);
}

/**
 * ADD: 'Create a request' link in topmenu.
 */
function emh_configuration_update_7066() {
  $options = array(
    'alter' => true,
    'attributes' => array(
      'title' => 'Content type to address question(s) to the experts.',
    ),
    'item_attributes' => array(
      'id' => 'create-request',
      'class' => '',
      'style' => '',
    ),
  );
  db_update('menu_links')
    ->fields(array(
      'weight' => '-44',
      'plid' => '0',
      'depth' => '1',
      'menu_name' => 'menu-top',
      'link_title' => 'Create a request',
      'options' => serialize($options),
    ))
    ->condition('mlid', '10579')
    ->execute();

  variable_set('menu_rebuild_needed', TRUE);
}

/**
 * FIX: Activate FT permissions.
 */
function emh_configuration_update_7067() {
  module_enable(array('ft_permissions'));
}

/**
 * ADD: Module mixpanel.
 */
function emh_configuration_update_7068() {
  module_enable(['mixpanel', 'mixpanel_defaults', 'mixpanel_rules']);
  variable_set('mixpanel_token', 'e9ccbdc087716f3288bfbf190fd30042');
}

/**
 * CHG: Uninstall disabled modules.
 */
function emh_configuration_update_7069() {
  drupal_uninstall_modules(array('advuser', 'ajax_comments', 'blockexport', 'diff', 'ds_extras', 'ds_format', 'ds_forms', 'ds_ui', 'emh_honeypot', 'languageicons',
  'linkedin_auth', 'mediaelement', 'onecomment', 'openid', 'privatemsg_roles', 'privatemsg_rules',
  //'colorbox', 'reroute_email',  // TODO : check why it makes the language block disapear
  'stickynote', 'views_fieldsets', 'views_tree', 'node_reference'));
  module_disable(array('module_missing_message_fixer', 'views_send', 'views_fieldset', 'views_field_view', 'dbtng_migrator', 'privatecomments', 'comment_perm', 'colorbox', 'auditfiles', 'views_php', 'views_calc', 'search', 'calendar', 'node_export', 'backup_migrate', 'shortcut', 'scheduler', 'color', 'collapsiblock', 'blockgroup'));
  drupal_uninstall_modules(array('module_missing_message_fixer', 'views_send', 'views_fieldset', 'views_field_view', 'dbtng_migrator', 'privatecomments', 'comment_perm',
  'auditfiles', 'views_php', 'views_calc', 'search', 'calendar', 'node_export', 'backup_migrate', 'shortcut', 'scheduler', 'color', 'collapsiblock', 'blockgroup'));
  drupal_uninstall_modules(array('ds', 'honeypot', 'linkedin', 'privatemsg_filter'));
  drupal_uninstall_modules(array('privatemsg'));
  drupal_uninstall_modules(array('eva', 'hacked', 'security_review', 'translation_helpers', 'variablecheck'));
}

/**
 * ADD: import default PET emails templates.
 */
function emh_configuration_update_7070() {
  module_enable(['pet']);
  exec("drush  ec pet --json $(drush dd)/../deploy/data/pet-1.json");
  exec("drush  ec pet --json $(drush dd)/../deploy/data/pet-2.json");
  exec("drush  ec pet --json $(drush dd)/../deploy/data/pet-1-fr.json");
  exec("drush  ec pet --json $(drush dd)/../deploy/data/pet-2-fr.json");
}

/**
 * CHG: Rename old custom module.
 */
function emh_configuration_update_7071() {
  module_disable(['emh_request_timeline']);
  drupal_uninstall_modules(['emh_request_timeline']);
  module_enable(['emh_request_workflow']);
}

/**
 * ADD : module webform_rules.
 */
function emh_configuration_update_7072() {
  module_enable(array('webform_rules'));
}

/**
 * ADD: module views_dependant_filter.
 */
function emh_configuration_update_7073() {
  module_enable(['views_dependent_filters']);
}

/**
 * ADD: module entityreference_filter.
 */
function emh_configuration_update_7074() {
  module_enable(['entityreference_filter']);
}

/**
 * ADD: module contact_reply_to, ft_webmastering, token_filter.
 */
function emh_configuration_update_7075() {
  module_enable(['contact_reply_to', 'ft_webmastering', 'token_filter']);
}

/**
 * ADD: module emh_tracking.
 */
function emh_configuration_update_7076() {
  module_enable(['emh_tracking', 'emh_linkedin']);
}

/**
 * CHG: uninstall module emh_profile_complete_request.
 */
function emh_configuration_update_7077() {
  module_disable(array('emh_profile_complete_request'));
  drupal_uninstall_modules(array('emh_profile_complete_request'));
}

/**
 * CHG: Update dashboard and user-menu links.
 */
function emh_configuration_update_7078() {

  // Del: Dashboard > Home.
  db_delete('menu_links')
    ->condition('mlid', '7708')
    ->execute();

  // Chg: Dashboard > Create a request => Add request.
  db_update('menu_links')
    ->fields(array(
      'link_title' => 'Add request',
    ))
    ->condition('mlid', '10579')
    ->execute();

  // Add: User menu > Credits separator.
  $options = array(
    'item_attributes' => array(
      'id' => '',
      'class' => 'separator',
      'style' => '',
    ),
  );
  $item = array(
    'link_title' => 'Credits separator',
    'link_path' => '<separator>',
    'router_path' => '<separator>',
    'menu_name' => 'user-menu',
    'weight' => '-50',
    'options' => $options,
  );
  menu_link_save($item);

  // Add: User menu > Buy credits.
  $options = array(
    'item_attributes' => array(
      'id' => 'buy-credits',
      'class' => '',
      'style' => '',
    ),
  );
  $item = array(
    'link_title' => 'Buy credits',
    'link_path' => 'node/3621',
    'router_path' => 'node/%',
    'menu_name' => 'user-menu',
    'weight' => '-45',
    'options' => $options,
  );
  menu_link_save($item);

  // Chg: User menu > Credits total.
  $options = array(
    'alter' => true,
    'attributes' => array(
      'title' => 'Credits transactions summary.',
    ),
    'item_attributes' => array(
      'id' => 'credits-badge',
      'class' => '',
      'style' => '',
    ),
  );
  db_update('menu_links')
    ->fields(array(
      'weight' => '-40',
      'customized' => '1',
      'options' => serialize($options),
    ))
    ->condition('mlid', '10937')
    ->execute();

  // Add: User menu > User badge separator.
  // Weight begins at -20 because we will have 3 items for upcoming Earnings.
  $options = array(
    'item_attributes' => array(
      'id' => '',
      'class' => 'separator',
      'style' => '',
    ),
  );
  $item = array(
    'link_title' => 'User badge separator',
    'link_path' => '<separator>',
    'router_path' => '<separator>',
    'menu_name' => 'user-menu',
    'weight' => '-20',
    'options' => $options,
  );
  menu_link_save($item);

  // Chg: User menu > My account.
  db_update('menu_links')
    ->fields(array(
      'weight' => '-15',
    ))
    ->condition('mlid', '7702')
    ->execute();

  // Rebuild menus.
  variable_set('menu_rebuild_needed', TRUE);
}

/**
 * ADD: Earnings links in dashboard.
 */
function emh_configuration_update_7079() {

  // Add: User menu > Earnings separator.
  $options = array(
    'item_attributes' => array(
      'id' => '',
      'class' => 'separator',
      'style' => '',
    ),
  );
  $item = array(
    'link_title' => 'Earnings separator',
    'link_path' => '<separator>',
    'router_path' => '<separator>',
    'menu_name' => 'user-menu',
    'weight' => '-35',
    'options' => $options,
  );
  menu_link_save($item);

  // Add: User menu > Earnings.
  $options = array(
    'item_attributes' => array(
      'id' => 'earnings',
      'class' => '',
      'style' => '',
    ),
  );
  $item = array(
    'link_title' => 'Earnings',
    'link_path' => '<nolink>',
    'router_path' => '<nolink>',
    'menu_name' => 'user-menu',
    'weight' => '-30',
    'options' => $options,
  );
  menu_link_save($item);

  // Add: User menu > Earnings badge.
  $options = array(
    'item_attributes' => array(
      'id' => 'earnings-badge',
      'class' => '',
      'style' => '',
    ),
  );
  $item = array(
    'link_title' => 'Earnings history',
    'link_path' => 'earnings',
    'router_path' => 'earnings',
    'menu_name' => 'user-menu',
    'weight' => '-25',
    'options' => $options,
  );
  menu_link_save($item);

  // Rebuild menus.
  variable_set('menu_rebuild_needed', TRUE);
}

/**
 * CHG: disable unused og_webform module.
 */
function emh_configuration_update_7080() {
  module_disable(array('og_webform'));
}

/**
 * CHG: enable translation_helpers module.
 */
function emh_configuration_update_7081() {
  module_enable(array('translation_helpers'));
}

/**
 * CHG: Earnings badge menu with title.
 */
function emh_configuration_update_7082() {
  // Del: Earning badges.
  db_delete('menu_links')
    ->condition('mlid', '17866')
    ->execute();


  // Add: User menu > Earnings badge.
  $options = array(
    'item_attributes' => array(
      'id' => 'earnings-badge',
      'class' => '',
      'style' => '',
    ),
    'attributes' => array('title' => 'Earnings history'),
  );
  $item = array(
    'link_title' => 'Earnings history',
    'link_path' => 'earnings',
    'router_path' => 'earnings',
    'menu_name' => 'user-menu',
    'weight' => '-25',
    'options' => $options,
  );
  menu_link_save($item);
}

/**
 * CHG: Earnings and points retroactivity.
 */
function emh_configuration_update_7083() {
  _emh_points_earnings_retroactive();
  exec("drush sql-query --file=$(drush dd)/../deploy/scripts/txn_data_context_retroactive.sql"); 
  module_enable(['emh_linkedin']);
}

/**
 * ADD: enable opencalais module.
 */
function emh_configuration_update_7084() {
  module_enable(array('opencalais'));
  variable_set('opencalais_api_key', 'WgnZlNyGrLVfgZpyFb04chAUthY9xJFT');
  variable_set('opencalais_autotagging', array(
      0 => 'social_tags',
      'request' => '2' 
  ));
  variable_set('opencalais_nodefields', array(
      'request' => 1 
  ));
}

/**
 * CHG: Domains become "sectors".
 */
function emh_configuration_update_7085() {
  exec("drush fra -y");
  exec("drush sql-query --file=$(drush dd)/../deploy/scripts/domains_to_sector.sql"); 
}

/**
 * ADD: enable emh_opencalais module.
 */
function emh_configuration_update_7086() {
  module_enable(array('emh_opencalais'));
}

/**
 * ADD: enable log module and ft_opencalais.
 */
function emh_configuration_update_7087() {
  module_enable(array('log'));
  module_enable(array('log_plan'));
  module_enable(array('ft_opencalais'));
}

/**
 * ADD: ft_virality.
 */
function emh_configuration_update_7088() {
  module_enable(array('ft_virality'));
}
