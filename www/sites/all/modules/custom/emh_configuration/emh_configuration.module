<?php

/**
 * Revert to default views.
 *
 * @param $view_name array Array of machine names of the views to revert
 */
function emh_configuration_revert_views($view_names) {
  foreach ($view_names as $view_name) {
    // Revert the view
    $view = views_get_view($view_name);
    if ($view->type == t('Overridden')) {
      // Revert the view.
      $view->delete();
      // Clear its cache.
      ctools_include('object-cache');
      ctools_object_cache_clear('view', $view->name);
    }
  }
}

/**
 * Revert to default, then disable a given list of views.
 *
 * @param $view_name array Array of machine names of the views to revert
 * @see http://dropbucket.org/node/8315
 */
function emh_configuration_revert_and_disable_views($view_names) {
  $changed = FALSE;
  $views_status = variable_get('views_defaults', array());

  emh_configuration_revert_views($view_names);

  foreach ($view_names as $view_name) {
    // Disable the view
    if ($views_status[$view_name] !== TRUE) {
      $views_status[$view_name] = TRUE;
      $changed = TRUE;
    }
  }

  // If we made changes to views status, save them and clear caches
  if ($changed) {
    variable_set('views_defaults', $views_status);
    views_invalidate_cache();
  }
}

/**
 * Use to validate the permissions.
 *
 * @param array $data
 *
 * @return array
 *   an array of role permissions.
 */
function _emh_configuration_permissions_validate(array $data) {
  $permissions = array();
  // Get the all the permissions having module name.
  $modules = user_permission_get_modules();
  foreach ($data as $permission_name) {
    if (array_key_exists($permission_name, $modules)) {
      $permissions[] = $permission_name;
    }
  }
  return $permissions;
}

/**
 * Given a Rule's machine name, this will enable the Rule.
 */
function emh_configuration_enable_rule($rule_machine_name) {
  _emh_configuration_rules_set_active($rule_machine_name, TRUE);
}

/**
 * Given a Rule's machine name, this will disable the Rule.
 */
function emh_configuration_disable_rule($rule_machine_name) {
  _emh_configuration_rules_set_active($rule_machine_name, FALSE);
}

/**
 * Given a Rule machine name, and an boolean will set its active or not.
 */
function _emh_configuration_rules_set_active($rule_machine_name, $active) {
  $rules_config = rules_config_load($rule_machine_name);
  $rules_config->active = $active;
  $rules_config->save();
}

/**
 * Delete accents
 *
 * @param string $str
 *          string with accented characters
 *          
 * @param string $encoding
 *          (example : utf-8, ISO-8859-1 ...)
 */
function emh_suppr_accents($str, $encoding = 'utf-8') {
  $str = htmlentities($str, ENT_NOQUOTES, $encoding);
  
  $str = preg_replace('#&([A-za-z])(?:acute|grave|cedil|circ|orn|ring|slash|th|tilde|uml);#', '\1', $str);
  
  $str = preg_replace('#&([A-za-z]{2})(?:lig);#', '\1', $str);
  
  $str = preg_replace('#&[^;]+;#', '', $str);
  
  return $str;
}

/**
 * Some internal helper functions...
 */
function _emh_linkedin_http_request($url, $header, $body = NULL) {
  $ch = curl_init();
  
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
  curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 1);
  curl_setopt($ch, CURLOPT_HTTPHEADER, array(
      $header 
  ));
  curl_setopt($ch, CURLOPT_URL, $url);
  
  if ($body) {
    curl_setopt($ch, CURLOPT_POST, 1);
    if ($body == 'token_request') {
      curl_setopt($ch, CURLOPT_POSTFIELDS, '');
    }
    else {
      curl_setopt($ch, CURLOPT_POSTFIELDS, $body);
      curl_setopt($ch, CURLOPT_HTTPHEADER, array(
          $header,
          'Content-Type: text/xml;charset=utf-8' 
      ));
      curl_setopt($ch, CURLOPT_POST, 1);
      curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'POST');
    }
  }
  
  $output = curl_exec($ch);
  curl_close($ch);
  return $output;
}
