<?php
/**
 * @file Main hooks implementation for emh LinkedIn module.
 */
module_load_include('inc', 'emh_linkedin', 'emh_linkedin.pages');

/**
 * Implements hook_init().
 */
function emh_linkedin_init() {
  global $theme_path;
  $li_css = $theme_path . '/emh_linkedin.css';
  if (file_exists($li_css)) {
    drupal_add_css($li_css);
  }
  else {
    drupal_add_css(drupal_get_path('module', 'emh_linkedin') . '/emh_linkedin.css');
  }

  if (!@include_once(variable_get('emh_linkedin_liboauth_path', ''))) {
    if (file_exists(drupal_get_path('module', 'oauth_common') . '/lib/OAuth.php')) {
      variable_set('emh_linkedin_liboauth_path', drupal_get_path('module', 'oauth_common') . '/lib/OAuth.php');
    }
    else {
      drupal_set_message(t('Unable to find the OAuth library. Please check your settings for the Linkedin module.'), 'warning');
    }
  }
}

/**
 * Implements hook_menu.
 */
function emh_linkedin_menu() {
  $items = [];

  // LinkedIn profile tab for users
  $items['user/%user/emh_linkedin'] = [
    'title' => 'Linkedin',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'emh_linkedin_display',
    'page arguments' => [
      1,
    ],
    'access callback' => 'emh_linkedin_display_access',
    'access arguments' => [
      1,
    ],
    'file' => 'emh_linkedin.pages.inc',
  ];

  // global settings form
  $items['admin/config/services/emh_linkedin'] = [
    'title' => 'LinkedIn integration',
    'description' => 'linkedin module settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => [
      'emh_linkedin_admin',
    ],
    'access arguments' => [
      'administer site configuration',
    ],
    'file' => 'emh_linkedin.pages.inc',
  ];

  // User settings form : used by submodules.
  $items['user/%user/edit/emh_linkedin'] = [
    'title' => 'Linkedin',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'emh_linkedin_user_settings',
    'file' => 'emh_linkedin.pages.inc',
    'page arguments' => [
      1,
    ],
    'access callback' => FALSE, // TODO : retore 'emh_linkedin_user_access' when import is correct
    // access arguments don't support multiple arguments, so create our access handler
    'access arguments' => [
      1,
    ],
  ];

  return $items;
}

/**
 * Custom access callback for user/%user/emh_linkedin.
 */
function emh_linkedin_display_access($account) {
  if (variable_get('emh_linkedin_user_page_enabled', 0) < 1) {
    return FALSE;
  }
  if (!user_access('display LinkedIn profile', $account)) {
    return FALSE;
  }
  if (!isset($account->data['emh_linkedin_user_page_enabled']) || $account->data['emh_linkedin_user_page_enabled'] != 1) {
    return FALSE;
  }
  global $user;
  if (!user_access('access user profiles') && $user->uid != $account->uid) {
    return FALSE;
  }
  $check = emh_linkedin_get_profile_fields($account->uid, [
    'id',
  ]);
  if (isset($check['error-code'])) { // no need to display an empty tab
    return FALSE;
  }
  return TRUE;
}

/**
 * Implements hook_permission().
 */
function emh_linkedin_permission() {
  return [
    'display LinkedIn profile' => [
      'title' => t('display LinkedIn profile'),
      'description' => t('Display own LinkedIn profile on user page.'),
    ],
  ];
}

/**
 * Let Linkedin module know what permissions are available at
 * user/%user/edit/emh_linkedin
 */
function emh_linkedin_user_edit_perms() {
  return [
    'display LinkedIn profile',
  ];
}

/**
 * Implements hook_hybridauth_user_login.
 */
function emh_linkedin_hybridauth_user_login($account, $data) {
  module_load_include('inc', 'emh_linkedin', 'emh_linkedin');

  $user = user_load($account->uid, TRUE);

  //new user is created
  if (_emh_linkedin_update_user($user)) {

    // Try to get HybridAuth instance.
    if ($hybridauth = hybridauth_get_instance()) {
      if (is_object($hybridauth)) {
        // Call Hybrid_Auth::getSessionData() to get stored data.
        if ($hybridauth_session_data = $hybridauth->getSessionData()) {
          _hybridauth_session_save($hybridauth_session_data, $account->uid);
        }
      }
    }

    $fields = _emh_linkedin_vget_user_page_linkedin_fields();
    $profile = emh_linkedin_get_profile_fields($user->uid, $fields);
    foreach ($profile as $key => $value) {
      $item = [
        'name' => $key,
        'value' => $value,
      ];
      $user = _emh_linkedin_fields_to_user_fields($item, $user);
    }
    $user->data['emh_linkedin_update'] = FALSE;
    user_save($user);
  }
}

/**
 * Implements hook_hybridauth_identity_added()
 * First use of hybridauth for an user.
 * For this module, this function is used when a user has already
 * created and using hybridauth for the first time.
 */
function emh_linkedin_hybridauth_identity_added($account, $data) {
  module_load_include('inc', 'emh_linkedin', 'emh_linkedin');

  if (!_emh_linkedin_update_user($account)) {
    // Try to get HybridAuth instance.
    if ($hybridauth = hybridauth_get_instance()) {
      if (is_object($hybridauth)) {
        // Call Hybrid_Auth::getSessionData() to get stored data.
        if ($hybridauth_session_data = $hybridauth->getSessionData()) {
          _hybridauth_session_save($hybridauth_session_data, $account->uid);
        }
      }
    }

    //$user = user_load($account->uid);
    $user_fields = _emh_linkedin_fields_user_update();
    $fields = [];
    foreach ($user_fields as $value) {
      $fields[$value] = FALSE;
    }
    $account->data['emh_linkedin_fields'] = $fields;

    $account->data['emh_linkedin_update'] = FALSE;

    user_save($account);
  }
}


/**
 * Implements hook_hybridauth_userinfo_alter.
 */
function emh_linkedin_hybridauth_userinfo_alter(&$userinfo, $data) {
  module_load_include('inc', 'emh_linkedin', 'emh_linkedin');
  $user_fields = _emh_linkedin_fields_user_update();
  $fields = [];
  foreach ($user_fields as $value) {
    $fields[$value] = TRUE;
  }
  $userinfo['data']['emh_linkedin_fields'] = $fields;

  $userinfo['data']['emh_linkedin_update'] = TRUE;
}

/**
 * Implements hook_file_delete.
 */
function emh_linkedin_file_delete($file) {
  $path = EMH_LINKEDIN_DIR_IMAGE . '/' . $file->origname;
  if (file_exists($path)) {
    unlink($path);
  }
}

/**
 * Implements hook_user_delete().
 */
function emh_linkedin_user_delete($account) {
  variable_del('emh_linkedin_user_page_linkedin_fields_' . $account->uid);

  if (emh_linkedin_is_linkedin_user($account->uid)) {
    $file = file_load($account->field_photo['und'][0]['fid']);
    if ($file) {
      file_delete($file, TRUE);
    }
  }
}

/**
 * Helper function : wraps around variable_get.
 */
function _emh_linkedin_vget_user_page_linkedin_fields() {
  $fields = [];
  $var_fields = variable_get('emh_linkedin_user_page_linkedin_fields', _emh_linkedin_fields_build_profile());
  foreach ($var_fields as $field) {
    if ($field !== 0) {
      $fields[] = $field;
    }
  }
  return $fields;
}

/**
 * Return an array containing all linkedin field which user want to update them.
 *
 * @param unknown $uid
 *
 * @return unknown[]
 */
function _emh_linkedin_fields_user($uid) {
  $user = user_load($uid);
  $fields = [];
  $var_fields = (array) $user->data['emh_linkedin_fields'];

  if (isset($var_fields)) {
    foreach ($var_fields as $key => $field) {
      if ($field) {
        $fields[] = $key;
      }
    }
  }

  return $fields;
}

/**
 * Let us retrieve profile fields.
 * Returns an array contening the fields requested.
 *
 * @params
 * $uid : the uid of the user we want to access infos
 * $fields : the fields we want to retrieve, as an array (see
 *   http://developer.linkedin.com/docs/DOC-1061 for complete list).
 */
function emh_linkedin_get_profile_fields($uid, $fields = []) {
  module_load_include('inc', 'emh_linkedin');
  return _emh_linkedin_get_profile_fields($uid, $fields);
}

/**
 * Returns an array contening the fields requested.
 *
 * @params
 * $url : full request url to a linkedin API ressource (see API doc for syntax)
 * $tokens : the user tokens, as an array containing keys 'token_key' and
 *   'token_secret' with their value
 */
function emh_linkedin_get_request_fields($url, $tokens) {
  module_load_include('inc', 'emh_linkedin');
  return _emh_linkedin_get_request_fields($url, $tokens);
}

/**
 * Custom access callback for user/%user/edit/emh_linkedin.
 */
function emh_linkedin_user_access($account) {
  global $user;
  if ($user->uid == $account->uid) {
    // Check if some perms have been defined by submodules.
    $perms = module_invoke_all('emh_linkedin_user_edit_perms');
    foreach ($perms as $perm) {
      if (user_access($perm)) {
        return TRUE;
      }
    }
    if (module_exists('hybridauth')) {
      return TRUE;
    }
  }
  if (variable_get('emh_linkedin_debug_mode', 0) == 1) {
    if ($user->uid != $account->uid) {
      drupal_set_message(t('LinkedIn debug : Access denied to /emh_linkedin/token/@requested.<br />
      Requesting user (uid @requesting) is different from the requested account (uid @requested)', [
        '@requested' => $account->uid,
        '@requesting' => $user->uid,
      ]));
      return FALSE;
    }
    if (empty($perms)) {
      drupal_set_message(t('LinkedIn debug : Access denied to /emh_linkedin/token/@requested.<br />
      No module is implementing hook_linkedin_user_edit_perms. Enable at least one submodule and check permissions'));
      return FALSE;
    }
    $permissions = '';
    foreach ($perms as $perm) {
      $permissions .= $perm . ', ';
    }
    drupal_set_message(t('LinkedIn debug : Access denied to /linkedin/token/@requested.<br />
      User must have at least one of these permissions : @permissions', [
      '@permissions' => $permissions,
    ]));
  }

  return FALSE;
}

/**
 * To see if the user has linked their LinkedIn profile
 *
 * @param unknown $uid
 *
 * @return boolean
 */
function emh_linkedin_is_linkedin_user($uid) {

  $isLinkedin = _hybridauth_identity_load_by_uid($uid);

  if ($isLinkedin == NULL) {
    return FALSE;
  }
  else {
    return TRUE;
  }
}
