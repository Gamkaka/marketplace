<?php

/**
 * @file
 * Installation hooks for Credits Management.
 */

/**
 * Implements hook_schema().
 */
function emh_points_schema() {
  $schema = array();
  $schema['emh_points'] = array(
    'description' => 'Holds the credits',
    'fields' => array(
      'pid' => array(
        'description' => 'Credits ID',
        'type' => 'serial',
        'not null' => TRUE,
      ),
      'entity_id' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => 'The entity id this data is attached to',
      ),
      'entity_type' => array(
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
        'description' => 'The entity type this data is attached to',
      ),
      'bundle' => array(
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
        'description' => 'The entity bundle to which this data belongs',
      ),
      'points' => array(
        'description' => 'Current Credits',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'max_points' => array(
        'description' => 'Out of a maximum credits',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'last_update' => array(
        'description' => 'Timestamp',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'expiration_date' => array(
        'description' => 'Timestamp',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('pid'),
    'indexes' => array(
      'last_update' => array('last_update'),
      'points' => array('points'),
    ),
  );

  $schema['emh_points_total'] = array(
    'description' => 'Credits aggregation',
    'fields' => array(
      'entity_id' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => 'The entity id this data is attached to',
      ),
      'entity_type' => array(
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
        'description' => 'The entity type this data is attached to',
      ),
      'total_points' => array(
        'description' => 'Total Credits',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('entity_id', 'entity_type'),
  );

  $schema['emh_points_txn'] = array(
    'description' => 'Credits Transactions',
    'fields' => array(
      'txn_id' => array(
        'description' => 'Transaction ID',
        'type' => 'serial',
        'not null' => TRUE,
      ),
      'uid' => array(
        'description' => 'Author of the transaction',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'points' => array(
        'description' => 'Credits',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'time_stamp' => array(
        'description' => 'Timestamp',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'description' => array(
        'description' => 'Description',
        'type' => 'text',
      ),
      'source_type' => array(
        'description' => 'Type of source entity',
        'type' => 'varchar',
        'length' => 128,
      ),
      'source_id' => array(
        'description' => 'Source ID of the entity',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'dest_type' => array(
        'description' => 'Type of destination entity',
        'type' => 'varchar',
        'length' => 128,
      ),
      'dest_id' => array(
        'description' => 'Destination ID of the entity',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'operation' => array(
        'description' => 'Operation being carried out',
        'type' => 'varchar',
        'length' => 48,
      ),
    ),
    'primary key' => array('txn_id'),
    'indexes' => array(
      'operation' => array('operation'),
      'uid' => array('uid'),
      'points' => array('points'),
    )
  );
  $schema['emh_points_answers'] = array(
    'description' => 'holds answer credits',
    'fields' => array(
      'nid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => 'The node id this answer is attached to',
      ),
      'uid' => array(
        'description' => 'Author of the answer',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'answer_id' => array(
        'description' => 'ID of the answer (either a comment or a webform_submission)',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'points' => array(
        'description' => 'Credits',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary_key' => array('nid', 'answer_id'),
    'indexes' => array(
      'uid' => array('uid'),
    ),
  );
  return $schema;
}

/**
 * Implements hook_enable().
 */
function emh_points_enable() {
  emh_points_update_7106();
  emh_points_update_7107();
}

/**
 * Add the new total credits table.
 */
function emh_points_update_7101() {
  if (!db_table_exists('emh_points_total')) {
    $table = array(
      'description' => 'Credits aggregation',
      'fields' => array(
        'entity_id' => array(
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE,
          'description' => 'The entity id this data is attached to',
        ),
        'entity_type' => array(
          'type' => 'varchar',
          'length' => 128,
          'not null' => TRUE,
          'default' => '',
          'description' => 'The entity type this data is attached to',
        ),
        'total_points' => array(
          'description' => 'Total Credits',
          'type' => 'int',
          'not null' => TRUE,
          'default' => 0,
        ),
      ),
      'primary key' => array('entity_id', 'entity_type'),
    );
    db_create_table('emh_points_total', $table);
  }

  // Update table.
  db_query("INSERT INTO {emh_points_total} SELECT entity_id, entity_type, SUM(points) FROM {emh_points} GROUP BY entity_id, entity_type");
}

/**
 * Revert Views.
 */
function emh_points_update_7102() {
  emh_points_reset_views();
}

function emh_points_reset_views() {
  module_load_include('inc', 'emh_points', 'views/emh_points.views_default');
  $default_views = emh_points_views_default_views();
  foreach($default_views as $name => $view) {
    views_revert_view($view);
  }
}

/**
 * Revert Views.
 */
function emh_points_update_7103() {
  emh_points_reset_views();
}

/**
 * Revert Webform results view.
 */
function emh_points_update_7104() {
  $view = views_get_view('webform_results');
  views_revert_view($view);
}

/**
 * Add a new table for answers.
 */
function emh_points_update_7105() {
  if (!db_table_exists('emh_points_answers')) {
    $table = array(
      'description' => 'holds answer credits',
      'fields' => array(
        'nid' => array(
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE,
          'description' => 'The node id this answer is attached to',
        ),
        'uid' => array(
          'description' => 'Author of the answer',
          'type' => 'int',
          'not null' => TRUE,
          'default' => 0,
        ),
        'answer_id' => array(
          'description' => 'ID of the answer (either a comment or a webform_submission)',
          'type' => 'int',
          'not null' => TRUE,
          'default' => 0,
        ),
        'points' => array(
          'description' => 'Credits',
          'type' => 'int',
          'not null' => TRUE,
          'default' => 0,
        ),
      ),
      'primary_key' => array('nid', 'answer_id'),
      'indexes' => array(
        'uid' => array('uid'),
      ),
    );
    db_create_table('emh_points_answers', $table);
  }

  // Update table with old data.
  db_query("INSERT INTO {emh_points_answers} SELECT t.source_id AS nid, t.dest_id AS uid, c.cid AS answer_id, t.points AS points FROM emh_points_txn t INNER JOIN comment c ON t.source_id = c.nid AND t.dest_id = c.uid WHERE source_type = 'node' AND dest_type = 'user'");
  db_query("INSERT INTO {emh_points_answers} SELECT t.source_id AS nid, t.dest_id AS uid, s.sid AS answer_id, t.points AS points FROM emh_points_txn t INNER JOIN webform_submissions s ON t.source_id = s.nid AND t.dest_id = s.uid WHERE source_type = 'node' AND dest_type = 'user'");
}

/**
 * Extend access to Use credits to authentificated users + Administer credits / View other credits history to webmasters.
 */
function emh_points_update_7106() {
  user_role_grant_permissions(DRUPAL_AUTHENTICATED_RID, array('use credits'));
  user_role_grant_permissions(3, array('administer credits', 'view others credits history')); // Administrator role
  user_role_grant_permissions(6, array('administer credits', 'view others credits history')); // Webmaster role
}

/**
 * Force module weight for hook_menu_alter execution
 */
function emh_points_update_7107() {
  db_update('system')
  ->fields(array('weight' => 1))
  ->condition('type', 'module')
  ->condition('name', 'emh_points')
  ->execute();
}

/**
 * Revert Views.
 */
function emh_points_update_7108() {
  emh_points_reset_views();
}

/**
 * Add permissions : credits for référent.
 */
function emh_points_update_7109() {
  // Administrator role
  user_role_grant_permissions(3, array(
    'execute emh_points_give_points',
    'execute emh_points_remove_points',
    'execute emh_points_transfert_points',
    'execute emh_points_arrange_points',
    'execute emh_points_arrange_group_points',
    'execute emh_points_arrange_node_points'
  ));
  // Webmaster role
  user_role_grant_permissions(6, array(
    'execute emh_points_give_points',
    'execute emh_points_remove_points',
    'execute emh_points_transfert_points',
    'execute emh_points_arrange_points',
    'execute emh_points_arrange_group_points',
    'execute emh_points_arrange_node_points'
  ));
  // Business role
  user_role_grant_permissions(5, array(
    'execute emh_points_transfert_points',
    'execute emh_points_arrange_points',
    'execute emh_points_arrange_group_points',
    'execute emh_points_arrange_node_points'
  ));
  // Référent role
  user_role_grant_permissions(7, array(
    'execute emh_points_arrange_node_points'
  ));
}

/**
 * CHG: My relationships path.
 */
function emh_points_update_7110() {
  $view = views_get_view('my_relationships');
  views_revert_view($view);
  $path = array(
    'source' => 'circles/relationships',
    'alias' => 'my-relationships',
  );
  path_save($path);
}

/**
 * CHG: Revert Views.
 */
function emh_points_update_7111() {
  emh_points_reset_views();
}

/**
 * CHG: Disable old contact flag rules.
 */
function emh_points_update_7112() {
  if ($rules_config = rules_config_load('rules_contact_buy')) {
    $rules_config->delete();
  }
  if ($rules_config = rules_config_load('rules_contact_impossible')) {
    $rules_config->delete();
  }
}

/**
 * CHG: OG points repartition tab weight.
 */
function emh_points_update_7113() {
  emh_configuration_revert_views(array('og_points_repartition'));
}

/**
 * Add new context field to emh_points_txn table.
 */
function emh_points_update_7114() {
  if (db_table_exists('emh_points_txn')) {
    if (!db_field_exists('emh_points_txn', 'context')) {
      $field = array(
        'type' => 'varchar',
        'description' => "Context of the Credit Transaction",
        'length' => 48,
      );
      db_add_field('emh_points_txn', 'context', $field);
      db_add_index('emh_points_txn', 'context', array('context'));
      // Update the existing txn.
      exec("drush --file $(drush dd)/../deploy/875_txn_context.sql");
    }
  }
}
