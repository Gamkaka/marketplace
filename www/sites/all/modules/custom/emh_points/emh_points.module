<?php

/**
 * @file
 * Credits managements for EMH website.
 */

include_once 'emh_points.deprecated.inc';

define('POINTS_ADDITION', 'addition');
define('POINTS_REMOVAL', 'removal');
define('POINTS_EXPIRATION', 'expiration');
define('POINTS_TRANSFERT', 'transfert');
const EMH_POINTS_TXN_CONTEXT_CRON = 'cron';
const EMH_POINTS_TXN_CONTEXT_ADMIN_MANAGE_USER_BULK = 'admin_manage_user_bulk';

/**
 * Implements hook_permission().
 */
function emh_points_permission() {
  return array(
    'administer credits' => array('title' => t('Administer Credits')),
    'use credits' => array('title' => t('Use Credits')),
    'view others credits history' => array('title' => t('View others credits history')),
  );
}

/**
 * Implements hook_menu().
 */
function emh_points_menu() {
  $items = array();
  $items['admin/emindhub/credits'] = array(
    'title' => 'Credits',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('emh_points_admin_form'),
    'access arguments' => array('administer credits'),
    'file' => 'emh_points.admin.inc',
  );
  $items['admin/emindhub/credits/integrity'] = array(
    'title' => 'Integrity',
    'page callback' => 'emh_points_integrity_check',
    'access arguments' => array('administer credits'),
    'file' => 'emh_points.admin.inc',
    'type' => MENU_LOCAL_ACTION,
  );
  $items['admin/emindhub/credits/user_add_credits'] = array(
    'title' => 'Manage Credits for Users',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('emh_points_manage_users_form'),
    'access arguments' => array('administer credits'),
    'file' => 'emh_points.admin.inc',
    'type' => MENU_LOCAL_ACTION,
  );
  $items['arrange/%/%/%/%/%'] = array(
    'title' => 'Validate selection and distribute credits',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('emh_points_arrange_form', 1, 2, 3, 4, 5),
    'access arguments' => array('use credits'),
  );

  // Route for the credits history of the current user.
  $items['credits'] = array(
    'title' => 'Credits',
    'page callback' => 'emh_points_show_user_history',
    'access callback' => 'emh_points_user_history_access',
    'menu_name' => 'user-menu',
    'type' => MENU_NORMAL_ITEM,
  );

  // Route for the credits history of a specific user.
  $items['user/%user/credits'] = array(
    'title' => 'Credits',
    'page callback' => 'emh_points_show_user_history',
    'page arguments' => array(1),
    'access callback' => 'emh_points_user_history_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Implements hook_menu_alter().
 */
function emh_points_menu_alter(&$items) {
  $items['node/%views_arg/answers']['access callback'] = 'emh_access_user_can_see_full_answer';
  $items['node/%views_arg/answers']['access arguments'] = array(1);
  $items['node/%views_arg/results']['access callback'] = 'emh_access_user_can_see_full_answer';
  $items['node/%views_arg/results']['access arguments'] = array(1);
}

/**
 * Implements hook_module_implements_alter().
 */
function emh_points_module_implements_alter(&$implementations, $hook) {
  // When the implementations of hook_menu_alter are called, we need our module
  // to be called after views, so let's remove it from the implementations then
  // add it to the end.
  if ($hook == 'menu_alter') {
    if (isset($implementations['emh_points'])) {
      unset($implementations['emh_points']);
      $implementations['emh_points'] = FALSE;
    }
  }
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function emh_points_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  // Changes the href of the credits history tab
  // if it goes to the current user's credits history.
  if (strpos($root_path, 'user/%') === 0) {
    global $user;
    $account = menu_get_object('user');

    if ($user->uid == $account->uid) {
      foreach ($data['tabs'][0]['output'] as &$tab) {
        if ($tab['#link']['path'] == 'user/%/credits') {
          $tab['#link']['href'] = 'credits';
          break;
        }
      }
    }
  }
}

/**
 * Access callback for the credits history page.
 */
function emh_points_user_history_access($account = NULL) {
  global $user;

  // If the user tries to access its own credits history (/credits)
  if ($account == NULL) {
    if (user_access('use credits')) {
      return TRUE;
    }
  }
  // User tries to access credits history of a specific user (/user/%/credits).
  else {
    if ($account->uid == $user->uid) {
      return TRUE;
    }
    if (user_access('view others credits history')) {
      return TRUE;
    }
  }

  return FALSE;
}

/**
 * Implements hook_views_api().
 */
function emh_points_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'emh_points') . '/views',
  );
}

/**
 * Implements hook_cron().
 *
 * Credits expiration & expiration warning.
 */
function emh_points_cron() {
  // Credits expiration.
  $query = db_select('emh_points', 'p')
    ->fields('p', array('pid', 'points', 'entity_id', 'entity_type'))
    ->condition('p.points', 0, '>')
    ->condition('p.expiration_date', REQUEST_TIME, '<')
    ->orderBy('p.expiration_date', 'ASC')
    ->execute();
  foreach ($query as $row) {
    // Expire credits.
    db_merge('emh_points')
      ->key(array('pid' => $row->pid))
      ->fields(array(
        'points' => 0,
        'last_update' => REQUEST_TIME,
      ))
      ->execute();
    // Create transaction.
    db_insert('emh_points_txn')
      ->fields(array(
        'uid' => 1,
        'points' => (int) $row->points,
        'time_stamp' => REQUEST_TIME,
        'description' => t('Credits expiration'),
        'source_type' => 'user',
        'source_id' => 1,
        'dest_type' => $row->entity_type,
        'dest_id' => $row->entity_id,
        'operation' => POINTS_EXPIRATION,
        'context' => EMH_POINTS_TXN_CONTEXT_CRON,
      ))
      ->execute();
    // Update total.
    db_merge('emh_points_total')
      ->key(array('entity_id' => $row->entity_id, 'entity_type' => $row->entity_type))
      ->expression('total_points', 'total_points - :amount', array(':amount' => $row->points))
      ->execute();
  }
  // Expiration warning.
  // @TODO.
}

/**
 * Implements hook_node_delete().
 */
function emh_points_node_delete($node) {
  emh_points_entity_points_delete($node->nid, 'node');
}

/**
 * Implements hook_user_delete().
 */
function emh_points_user_delete($user) {
  emh_points_entity_points_delete($user->uid, 'user');
}

/**
 * Helper callback for credits deletion.
 */
function emh_points_entity_points_delete($id, $type) {
  db_delete('emh_points')
    ->condition('entity_id', $id)
    ->condition('entity_type', $type)
    ->execute();
  db_delete('emh_points_total')
    ->condition('entity_id', $id)
    ->condition('entity_type', $type)
    ->execute();
  db_delete('emh_points_txn')
    ->condition('source_id', $id)
    ->condition('source_type', $type)
    ->execute();
  db_delete('emh_points_txn')
    ->condition('dest_id', $id)
    ->condition('dest_type', $type)
    ->execute();
}

/**
 * Add credits to an entity.
 */
function emh_points_add_points($entity, $points) {
  // To add credit, there are almost no functional checks.
  if (!is_numeric($points) || (int) $points < 0) {
    drupal_set_message(t('You should only add a positive number of credits.'));
    return;
  }
  if (empty($entity)) {
    drupal_set_message(t('You should only add credits to a valid entity'));
    return;
  }
  // Add credits.
  db_insert('emh_points')
    ->fields(array(
      'entity_id' => $entity->id,
      'entity_type' => $entity->type,
      'bundle' => $entity->bundle,
      'points' => $points,
      // At the creation, max credits = credits.
      'max_points' => $points,
      'last_update' => REQUEST_TIME,
      'expiration_date' => strtotime(variable_get('emh_points_expiration', '+ 1 year')),
    ))
    ->execute();
  // Update total.
  // Is there a total already ?
  $total = db_select('emh_points_total', 't')
    ->fields('t', array('total_points'))
    ->condition('entity_id', $entity->id)
    ->condition('entity_type', $entity->type)
    ->execute()->fetchField();
  if ($total === FALSE) {
    db_insert('emh_points_total')
      ->fields(array(
        'entity_id' => $entity->id,
        'entity_type' => $entity->type,
        'total_points' => $points,
      ))
      ->execute();
  }
  else {
    db_merge('emh_points_total')
      ->key(array('entity_id' => $entity->id, 'entity_type' => $entity->type))
      ->expression('total_points', 'total_points + :amount', array(':amount' => $points))
      ->execute();
  }
  // Raise Rules event.
  if ($entity->type == 'user') {
    $account = user_load($entity->id);
    rules_invoke_event('emh_points_new_points', $points, $account);
  }
  // Empty cache to reload the emh_points.
  entity_get_controller($entity->type)->resetCache(array($entity->id));
}

/**
 * Remove credits from an entity.
 */
function emh_points_delete_points($entity, $points) {
  // Functional validation.
  if (!is_numeric($points) || (int) $points < 0) {
    drupal_set_message(t('You should only remove a positive number of credits.'));
    return;
  }
  // Does the entity have enough credits ?
  $current_points = 0;
  $query = db_select('emh_points', 'p')
    ->condition('p.entity_type', $entity->type)
    ->condition('p.entity_id', $entity->id);
  $query->addExpression('SUM(p.points)');
  $current_points = $query->execute()->fetchField();
  if ($current_points < (int) $points) {
    drupal_set_message(t("It's impossible to remove those many credits (only @points left).", array('@points' => $current_points)));
  }
  // Functional algorithm, remove credits that will expire first.
  $to_be_removed = (int) $points;
  $query = db_select('emh_points', 'p')
    ->fields('p', array('pid', 'points'))
    ->condition('p.entity_type', $entity->type)
    ->condition('p.entity_id', $entity->id)
    ->condition('p.points', 0, '>')
    ->orderBy('p.expiration_date', 'ASC')
    ->execute();
  while ($to_be_removed > 0) {
    $record = $query->fetchAssoc();
    if ($record['points'] >= $to_be_removed) {
      db_merge('emh_points')
        ->key(array('pid' => $record['pid']))
        ->fields(array(
          'points' => ($record['points'] - $to_be_removed),
          'last_update' => REQUEST_TIME,
        ))
        ->execute();
      $to_be_removed = 0;
    }
    else {
      db_merge('emh_points')
        ->key(array('pid' => $record['pid']))
        ->fields(array(
          'points' => 0,
          'last_update' => REQUEST_TIME,
        ))
        ->execute();
      $to_be_removed -= $record['points'];
    }
  }
  // Update total.
  db_merge('emh_points_total')
    ->key(array('entity_id' => $entity->id, 'entity_type' => $entity->type))
    ->expression('total_points', 'total_points - :amount', array(':amount' => $points))
    ->execute();
  // Empty cache to reload the emh_points.
  entity_get_controller($entity->type)->resetCache(array($entity->id));
}

/**
 * Implements hook_entity_load().
 */
function emh_points_entity_load($entities, $type) {
  // Eventually add total credits for this entity.
  foreach ($entities as $entity) {
    emh_points_entity_load_single($entity, $type);
  }
}

/**
 * Helper callback to load credits on a single entity.
 */
function emh_points_entity_load_single($entity, $type) {
  switch ($type) {
    case 'node': $wrapper = entity_metadata_wrapper('node', $entity);
      break;

    case 'user': $wrapper = entity_metadata_wrapper('user', $entity);
      break;

  }
  if (empty($wrapper)) {
    // taxonomy_vocabulary, taxonomy_term, field_collection_item
    // entity_legal_document, entity_legal_document_version, ...
    return;
  }
  $query = db_select('emh_points', 'p')
    ->condition('p.entity_type', $type)
    ->condition('p.entity_id', $wrapper->getIdentifier());
  $query->addExpression('SUM(p.points)');
  $points = $query->execute()->fetchField();
  if (!empty($points)) {
    $entity->emh_points = (int) $points;
  }
  else {
    $entity->emh_points = 0;
  }
}

/**
 * Helper function to build "our" entity.
 */
function emh_points_build_entity_for_points($entity) {
  // If coming from Rules, it's already a metadata_wrapper...
  if ($entity instanceOf EntityDrupalWrapper) {
    $test_entity = clone $entity;
    if ('user' == $test_entity->getBundle()) {
      $type = 'user';
    }
    else {
      $type = 'node';
    }
  }
  elseif (!empty($entity->type)) {
    $test_entity = entity_metadata_wrapper('node', $entity);
    $type = 'node';
  }
  else {
    $test_entity = entity_metadata_wrapper('user', $entity);
    $type = 'user';
  }
  $emh_entity = new StdClass();
  $emh_entity->type = $type;
  $emh_entity->bundle = $test_entity->getBundle();
  $emh_entity->id = $test_entity->getIdentifier();
  return $emh_entity;
}

/**
 * Helper function to display an entity.
 */
function emh_points_format_entity($entity) {
  if ($entity instanceOf EntityDrupalWrapper) {
    $test_entity = clone $entity;
    if ('user' == $test_entity->getBundle()) {
      $type = 'user';
    }
    else {
      $type = 'node';
    }
  }
  elseif (!empty($entity->type)) {
    $test_entity = entity_metadata_wrapper('node', $entity);
    $type = 'node';
  }
  elseif (!empty($entity->cid)) {
    $type = 'comment';
  }
  elseif (!empty($entity->sid)) {
    $type = 'webform_submission';
  }
  else {
    $test_entity = entity_metadata_wrapper('user', $entity);
    $type = 'user';
  }
  $output = '';
  switch ($type) {
    case 'user':
      if ($test_entity->getIdentifier() == 1) {
        $output = 'eMindHub';
      }
      else {
        $output = $test_entity->field_first_name->value() . ' ' . $test_entity->field_last_name->value();
      }
      break;

    case 'node':
      $output = $test_entity->getBundle();
      $output .= ' ';
      $output .= $test_entity->label();
      break;

    case 'comment':
      $user = user_load($entity->uid);
      $test_user = entity_metadata_wrapper('user', $user);
      $output = $test_user->field_first_name->value() . ' ' . $test_user->field_last_name->value();
      break;

    case 'webform_submission':
      $user = user_load($entity->uid);
      $test_user = entity_metadata_wrapper('user', $user);
      $output = $test_user->field_first_name->value() . ' ' . $test_user->field_last_name->value();
      break;
  }
  return $output;
}

/**
 * Main moving credits action.
 */
function emh_points_move_points($source, $destination, $points, $txn_context, $parent_txn_id = NULL) {
  $emh_source = emh_points_build_entity_for_points($source);
  $emh_destination = emh_points_build_entity_for_points($destination);
  // Remove credits from source.
  emh_points_delete_points($emh_source, $points);
  // Add credits to destination.
  emh_points_add_points($emh_destination, $points);
  $log = t('Move credits from !source to !destination.', array('!source' => emh_points_format_entity($source), '!destination' => emh_points_format_entity($destination)));

  // Compute transaction.
  global $user;

  $txn = array(
    'uid' => $user->uid,
    'points' => (int) $points,
    'time_stamp' => REQUEST_TIME,
    'description' => $log,
    'source_type' => $emh_source->type,
    'source_id' => $emh_source->id,
    'dest_type' => $emh_destination->type,
    'dest_id' => $emh_destination->id,
    'operation' => POINTS_TRANSFERT,
    'context' => $txn_context,
  );

  // Record the parent transaction ID, when applicable.
  if (is_numeric($parent_txn_id)) {
    $txn['parent_txn_id'] = $parent_txn_id;
  }

  $txn_id = db_insert('emh_points_txn')->fields($txn)->execute();

  module_invoke_all('move_points_after', $txn_id, $txn, $source, $destination);
}

/**
 * Send email to request rewarded answers' author.
 */
function emh_points_notify_rewarded_answer_author($node, $user, $points) {
  $module = 'emh_points';
  $key = 'notify_rewarded_answer_author';
  $mail = $user->mail;
  $language = language_default();
  $piwik_tracking = 'pk_campaign=' . $key . '_' . $node->nid;
  $ga_tracking = 'utm_medium=email&utm_source=' . $key . '&utm_campaign=' . $key . '_' . $node->nid;
  $params = array(
    '@url' => url('credits?' . $piwik_tracking . '&' . $ga_tracking, array('absolute' => TRUE)),
    '@title' => $node->title,
    '@answer_author' => $user->field_first_name[LANGUAGE_NONE][0]['value'],
    '@points' => $points,
    '@threshold' => variable_get('emh_points_monetization_threshold', '1500'),
  );
  drupal_mail($module, $key, $mail, $language, $params);
}

/**
 * Send email to request unrewarded answers' author.
 */
function emh_points_notify_unrewarded_answer_author($node, $user) {
  $module = 'emh_points';
  $key = 'notify_unrewarded_answer_author';
  $mail = $user->mail;
  $language = language_default();
  $piwik_tracking = 'pk_campaign=' . $key . '_' . $node->nid;
  $ga_tracking = 'utm_medium=email&utm_source=' . $key . '&utm_campaign=' . $key . '_' . $node->nid;
  $params = array(
    '@url' => url('node/' . $node->nid . '/?' . $piwik_tracking . '&' . $ga_tracking, array('absolute' => TRUE)),
    '@title' => $node->title,
    '@answer_author' => $user->field_first_name[LANGUAGE_NONE][0]['value'],
  );
  drupal_mail($module, $key, $mail, $language, $params);
}

/**
 * TODO: needs com.
 */
function emh_points_get_rewarded_answers($nid) {
  $answers = db_select('emh_points_answers', 'a')
                        ->condition('nid', $nid)
                        ->fields('a', array('answer_id'))
                        ->fields('a', array('uid'))
                        ->orderBy('answer_id', 'ASC')
                        ->execute()
                        ->fetchAllKeyed(0, 1);
  return $answers;
}

/**
 * TODO: needs com.
 */
function emh_points_get_unrewarded_answers($nid) {
  $unrewarded_answers = array();
  $all_answers = emh_points_get_answers($nid);
  $rewarded_answers = emh_points_get_rewarded_answers($nid);
  if (!empty($all_answers)) {
    $unrewarded_answers = array_diff($all_answers, $rewarded_answers);
  }
  return $unrewarded_answers;
}

/**
 * Implements hook_mail().
 */
function emh_points_mail($key, &$message, $params) {
  switch ($key) {
    case 'notify_rewarded_answer_author':
      $message['subject'] = t('You have been rewarded!', $params);
      $message['body'] = array();
      $message['body'][] = t('Dear @answer_author,', $params);
      $message['body'][] = t('Thank you for responding to the request') . ' <strong><a href="' . t('@url', $params) . '&amp;pk_kwd=link&amp;utm_content=link" title="' .  t('@title', $params) . '" target="_blank" style="font-weight:bold!important;">' . t('@title', $params) . ' </a></strong>.';
      if ($params['@points'] == 0) {
        $message['body'][] = t('Your answer has been selected by the client ! The client may now get in touch with you for further support.', $params);
      }
      else {
        $message['body'][] = t('Your answer has been selected by the client and you earned @points credits! The client may now get in touch with you for further support.', $params);
        $message['body'][] = t('We remind you that you can monetize your credits once you have reached a threshold of @threshold credits.', $params);
      }
      $message['body'][] = t('Should you like to know more, just log into the platform now.');
      $message['body'][] = '<table style="min-width:100%;" width="100%" border="0" cellpadding="0" cellspacing="0" class="emailButton">
        <tbody>
          <tr>
            <td style="padding-top:0;padding-right:18px;padding-bottom:18px;padding-left:18px;" valign="top" align="center">
              <table style="border-collapse:separate!important;border-radius:0px;background-color:rgb(0,159,227);" border="0" cellpadding="0" cellspacing="0">
                <tbody>
                  <tr>
                    <td style="font-family:Arial;font-size:16px;padding:15px;color:rgb(255, 255, 255);" valign="middle" align="center">
                      <a href="' . t('@url', $params) . '&amp;pk_kwd=calltoaction&amp;utm_content=cta" title="' .  t('Log in to eMindHub') . '" target="_blank" style="font-weight:bold!important;letter-spacing:normal;line-height:100%;text-align:center;text-decoration:none;color:#FFFFFF!important;">' . t('Log in to eMindHub') . ' </a>
                    </td>
                  </tr>
                </tbody>
              </table>
            </td>
          </tr>
        </tbody>
      </table>';
      break;

    case 'notify_unrewarded_answer_author':
      $message['subject'] = t('Request @title is now closed', $params);
      $message['body'] = array();
      $message['body'][] = t('Dear @answer_author,', $params);
      $message['body'][] = t('Thank you for responding to the request') . ' <strong><a href="' . t('@url', $params) . '&amp;pk_kwd=link&amp;utm_content=link" title="' .  t('@title', $params) . '" target="_blank" style="font-weight:bold!important;">' . t('@title', $params) . ' </a></strong> ' . t('which is now closed.');
      $message['body'][] = t('Your answer has not been selected by the client, but we encourage you to continue to answer requests matching your expertise, or to sponsor experts in your network.');
      $message['body'][] = t('Should you like to see more requests, just log into the platform now.');
      $message['body'][] = '<table style="min-width:100%;" width="100%" border="0" cellpadding="0" cellspacing="0" class="emailButton">
        <tbody>
          <tr>
            <td style="padding-top:0;padding-right:18px;padding-bottom:18px;padding-left:18px;" valign="top" align="center">
              <table style="border-collapse:separate!important;border-radius:0px;background-color:rgb(0,159,227);" border="0" cellpadding="0" cellspacing="0">
                <tbody>
                  <tr>
                    <td style="font-family:Arial;font-size:16px;padding:15px;color:rgb(255, 255, 255);" valign="middle" align="center">
                      <a href="' . t('@url', $params) . '&amp;pk_kwd=calltoaction&amp;utm_content=cta" title="' .  t('Log in to eMindHub') . '" target="_blank" style="font-weight:bold!important;letter-spacing:normal;line-height:100%;text-align:center;text-decoration:none;color:#FFFFFF!important;">' . t('Log in to eMindHub') . ' </a>
                    </td>
                  </tr>
                </tbody>
              </table>
            </td>
          </tr>
        </tbody>
      </table>';
      break;

    default:
      break;
  }
}

/**
 * Implements hook_action_info().
 *
 * Essentially for VBO integration.
 */
function emh_points_action_info() {
  $actions = array();
  $actions['emh_points_give_points'] = array(
    'type' => 'entity',
    'label' => t('Give credits to entities'),
    'configurable' => TRUE,
    'triggers' => array(),
    'permissions' => array('administer credits'),
    'behavior' => array('emh'),
  );
  $actions['emh_points_remove_points'] = array(
    'type' => 'entity',
    'label' => t('Remove credits from entities'),
    'configurable' => TRUE,
    'triggers' => array(),
    'permissions' => array('administer credits'),
    'behavior' => array('emh'),
  );
  $actions['emh_points_transfert_points'] = array(
    'type' => 'entity',
    'label' => t('Transfer some of my credits to these entities'),
    'configurable' => TRUE,
    'triggers' => array(),
    'permissions' => array('use credits'),
    'behavior' => array('emh'),
  );
  $actions['emh_points_arrange_points'] = array(
    'type' => 'entity',
    'label' => t('Distribute some of my credits to these entities'),
    'configurable' => TRUE,
    'triggers' => array(),
    'permissions' => array('use credits'),
    'aggregate' => TRUE,
    'behavior' => array('emh'),
  );
  $actions['emh_points_arrange_group_points'] = array(
    'type' => 'user',
    'label' => t('Distribute group credits to these entities'),
    'configurable' => TRUE,
    'triggers' => array(),
    'permissions' => array('use credits'),
    'aggregate' => TRUE,
    'behavior' => array('emh'),
  );
  $actions['emh_points_arrange_node_points'] = array(
    'type' => 'entity',
    'label' => t('Distribute node credits to these entities'),
    'configurable' => FALSE,
    'triggers' => array(),
    'permissions' => array('use credits'),
    'aggregate' => TRUE,
    'behavior' => array('emh'),
  );
  return $actions;
}

/**
 * Actions for VBO integration.
 */

/**
 * Give credits to an entity.
 */
function emh_points_give_points(&$entity, $context) {
  $emh_entity = emh_points_build_entity_for_points($entity);
  $points = $context['points'];
  if (isset($context['view_info']['name']) && $context['view_info']['name'] == 'give_user_points') {
    $txn_context = EMH_POINTS_TXN_CONTEXT_ADMIN_MANAGE_USER_BULK;
  }
  elseif (isset($context['txn_context'])) {
    $txn_context = $context['txn_context'];
  }
  $log = $context['log'];
  emh_points_add_points($emh_entity, $points);
  // Create transaction.
  global $user;

  $txn = array(
    'uid' => $user->uid,
    'points' => (int) $points,
    'time_stamp' => REQUEST_TIME,
    'description' => $log,
    'source_type' => 'user',
    'source_id' => 1,
    'dest_type' => $emh_entity->type,
    'dest_id' => $emh_entity->id,
    'operation' => POINTS_ADDITION,
    'context' => $txn_context,
  );

  $txn_id = db_insert('emh_points_txn')->fields($txn)->execute();

  module_invoke_all('give_points_after', $txn, $entity);
}

/**
 * Remove credits from an entity.
 */
function emh_points_remove_points(&$entity, $context) {
  $emh_entity = emh_points_build_entity_for_points($entity);
  $points = $context['points'];
  $log = $context['log'];
  emh_points_delete_points($emh_entity, $points);
  // Compute transaction.
  global $user;
  db_insert('emh_points_txn')
    ->fields(array(
      'uid' => $user->uid,
      'points' => (int) $points,
      'time_stamp' => REQUEST_TIME,
      'description' => $log,
      'source_type' => 'user',
      'source_id' => 1,
      'dest_type' => $emh_entity->type,
      'dest_id' => $emh_entity->id,
      'operation' => POINTS_REMOVAL,
    ))
    ->execute();
}

/**
 * Configuration forms for VBO integration.
 */

/**
 * Configuration form for giving credits.
 */
function emh_points_give_points_form($settings, &$form_state) {
  $form = array();
  $form['points'] = array(
    '#type' => 'textfield',
    '#title' => t('Credits'),
    '#required' => TRUE,
    '#default_value' => '100',
    '#element_validate' => array('element_validate_integer_positive'),
  );
  $form['log'] = array(
    '#type' => 'textarea',
    '#title' => t('Log message'),
    '#required' => TRUE,
  );
  return $form;
}

/**
 * Submit callback for the form above.
 */
function emh_points_give_points_submit($form, &$form_state) {
  $return = array();
  $return['points'] = $form_state['values']['points'];
  $return['log'] = $form_state['values']['log'];
  return $return;
}

/**
 * Configuration form for removing credits.
 */
function emh_points_remove_points_form($settings, &$form_state) {
  $form = array();
  $form['points'] = array(
    '#type' => 'textfield',
    '#title' => t('Credits'),
    '#required' => TRUE,
    '#default_value' => '100',
    '#element_validate' => array('element_validate_integer_positive'),
  );
  $form['log'] = array(
    '#type' => 'textarea',
    '#title' => t('Log message'),
    '#required' => TRUE,
  );
  return $form;
}

/**
 * Submit callback for the form above.
 */
function emh_points_remove_points_submit($form, &$form_state) {
  $return = array();
  $return['points'] = $form_state['values']['points'];
  $return['log'] = $form_state['values']['log'];
  return $return;
}

/**
 * Show user credits history.
 *
 * @param object $account
 *   An user object: the current user is considered if no one is provided.
 *
 * @return array
 *   Page render array
 *
 * @todo Display a message if we try to view the credits history of an user which doesn't use credits
 */
function emh_points_show_user_history($account = NULL) {
  global $user;

  if (current_path() == 'credits') {
    menu_set_active_item('user/' . $user->uid . '/credits');
  }

  if ($account == NULL) {
    $account = $user;
  }

  $query = db_select('emh_points_txn', 'pt')
    ->extend('PagerDefault')
    ->element(1)
    ->fields('pt', array())
    ->condition('pt.context', 'commission', '!=')
    ->condition('pt.context', 'monetization', '!=')
    ->condition(db_or()
      ->condition(db_and()
        ->condition('pt.context', 'profile_buy', '!=')
        ->condition('dest_id', $account->uid)
        ->condition('dest_type', 'user')
      )
      ->condition(db_and()
        ->condition('pt.context', 'user_sponsor', '!=')
        ->condition('source_type', 'user')
        ->condition('source_id', $account->uid)
      )
    )
    ->orderBy('time_stamp', 'DESC')
    ->limit(30);

  $transactions = $query->execute()->fetchAll(PDO::FETCH_OBJ);

  $rows = array();
  foreach ($transactions as $transaction) {
    // Prepares credits amount display.
    $points = (($transaction->source_type == 'user' && $transaction->source_id == $account->uid) || $transaction->operation == 'removal') ? '- ' : '+ ';
    $points .= $transaction->points;

    $rows[] = array(
      $transaction->operation,
      $transaction->description,
      format_date($transaction->time_stamp, 'short_date'),
      $points,
    );
  }

  $build = array();

  $build['title'] = array(
    '#theme' => 'html_tag',
    '#tag' => 'h2',
    '#value' => t('Credits statement'),
  );

  $build['table'] = array(
    '#theme' => 'table',
    '#header' => array(
      t('Type'),
      t('Details'),
      t('Date'),
      t('Credits'),
    ),
    '#rows' => $rows,
    '#empty' => t('No credits transaction.'),
  );

  $build['pager'] = array(
    '#theme' => 'pager',
    '#element' => 1,
  );

  drupal_alter('points_history_page', $build, $account);

  return $build;
}

/**
 * Implements hook_entity_info().
 */
function emh_points_entity_info() {
  $info = array();
  $info['webform_submission'] = array(
    'label' => t('Simple Webform Submission Entity'),
    'base table' => 'webform_submissions',
    'fieldable' => FALSE,
    'entity keys' => array(
      'id' => 'sid',
      'label' => 'sid',
    ),
  );
  return $info;
}
