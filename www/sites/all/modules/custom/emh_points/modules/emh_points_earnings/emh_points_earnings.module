<?php

/**
 * @file
 * EMH Earnings features.
 *
 * EMH Credits are monetized into Earnings for certain Credits transactions.
 *
 * TODO: Earnings integrity: total of earnings should equal total of credits
 * moved back to EMH in the 'monetize' context.
 * This check will be done globally and for each user.
 */

// Conversion rate from Credits to Earnings. Never change this!
const EMH_POINTS_EARNINGS_RATE = 1;
// Transaction contexts that trigger monetization.
const EMH_POINTS_EARNINGS_CONTEXTS = array(
  'profile_buy',
  'user_sponsor',
);
// Default EMH commission on credits before monetization, when applicable.
const EMH_POINTS_EARNINGS_COMMISSION = 0.7;
// Context for commissions in the transactions logs:
const EMH_POINTS_EARNINGS_COMMISSION_CONTEXT = 'commission';
// Context for monetization in the transactions logs:
const EMH_POINTS_EARNINGS_MONETIZATION_CONTEXT = 'monetization';

/**
 * Implements hook_menu().
 */
function emh_points_earnings_menu() {
  $items = array();

  $items['admin/emindhub/credits/earnings'] = array(
    'title' => 'Earnings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('emh_points_earnings_admin_form'),
    'access arguments' => array('administer credits'),
    'file' => 'emh_points_earnings.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_move_points_after().
 *
 * @int $txn_id ID of the transaction.
 * @array $txn
 * @stdClass $source
 * @stdClass $destination
 *
 * @see emh_points_move_points()
 */
function emh_points_earnings_move_points_after($txn_id, $txn, $source, $destination) {
  // We will need the transaction ID for its children transactions.
  $txn['txn_id'] = $txn_id;
  // We will need to apply commissions and monetization on the destination user.
  // So he/she becomes the source for the children transactions.
  $new_source = $destination;
  // Callback.
  _emh_points_earnings_commission_and_monetize($txn, $new_source);
}

/**
 * Implements hook_give_points_after().
 *
 * @array $txn Transaction.
 * @stdClass $destination
 *
 * @see emh_points_give_points()
 */
function emh_points_earnings_give_points_after($txn, $destination) {
  // We will need to apply commissions and monetization on the destination user.
  // So he/she becomes the source for the children transactions.
  $new_source = $destination;
  // Callback.
  _emh_points_earnings_commission_and_monetize($txn, $new_source);
}

/**
 * Helper function for commissions and monetizations.
 *
 * @array $parent_txn Parent transaction.
 * @stdClass $source Source for those children transactions.
 */
function _emh_points_earnings_commission_and_monetize($parent_txn, $source) {
  $parent_context = $parent_txn['context'];

  // If the transaction context implies monetization:
  if (in_array($parent_context, EMH_POINTS_EARNINGS_CONTEXTS)) {

    // Load EMH account:
    $emindhub = user_load(1);
    // Get EMH commission rates.
    $commissions = variable_get('emh_points_earnings_commissions');
    // Before commission, the total amount of credits are monetizable:
    $monetizable_credits = $total_credits = $parent_txn['points'];
    // What is EMH's commission?
    $commission = floatval($commissions[$parent_context]);

    /*
     * Commission.
     */

    // If there is a valid commission rate:
    if ($commission > 0 && $commission < 1) {

      // Compute EMH's commission.
      $commission_credits = $total_credits * $commission;
      // Move commission credits from user to EMH:
      $parent_txn_id = $parent_txn['txn_id'];
      emh_points_move_points($source, $emindhub, $commission_credits, EMH_POINTS_EARNINGS_COMMISSION_CONTEXT, $parent_txn_id);
      // Ajust monetizable amount of credits.
      $monetizable_credits = $total_credits - $commission_credits;
    }

    /*
     * Monetization.
     */

    // 1) Move the credits back to EMH.
    // TODO: Validate in the specs that we are moving the credits back to EMH.
    // Another solution would be to destroy the credits when creating earnings.
    $parent_txn_id = $parent_txn['txn_id'];
    emh_points_move_points($source, $emindhub, $monetizable_credits, EMH_POINTS_EARNINGS_MONETIZATION_CONTEXT, $parent_txn_id);

    // 2) Add the earnings to the user.
    // Wrapp user into an entity.
    $source_entity = emh_points_build_entity_for_points($source);
    // Currency conversion: credits => earnings.
    $earnings = $monetizable_credits * EMH_POINTS_EARNINGS_RATE;
    // Add earnings.
    _emh_points_earnings_add_earnings($source_entity, $earnings);
  }
}

/**
 * Add earnings to an entity.
 */
function _emh_points_earnings_add_earnings($entity, $earnings) {

  // To add earning, there are almost no functional checks.
  if (!is_numeric($earnings) || (int) $earnings < 0) {
    watchdog('emh_points_earnings', 'Amount of earnings has to be a positive integer');
    return;
  }
  if (empty($entity)) {
    watchdog('emh_points_earnings', 'You should only add earnings to a valid entity');
    return;
  }
  // Add earnings.
  db_insert('emh_points_earnings')
    ->fields(array(
      'entity_id' => $entity->id,
      'entity_type' => $entity->type,
      'bundle' => $entity->bundle,
      'earnings' => $earnings,
      'last_update' => REQUEST_TIME,
    ))
    ->execute();
  // Raise Rules event.
  if ($entity->type == 'user') {
    $account = user_load($entity->id);
    rules_invoke_event('emh_points_earnings_new_earnings', $earnings, $account);
  }
  // Empty cache to reload the emh_points_earnings.
  entity_get_controller($entity->type)->resetCache(array($entity->id));
}

/**
 * Implements hook_permission().
 */
function emh_points_earnings_permission() {
  return array(
    'administer earnings' => array('title' => t('Administer Earnings')),
    'cashout earnings' => array('title' => t('Cashout earnings')),
    'view own earnings' => array('title' => t('View own earnings')),
  );
}

/**
 * Implements hook_user_delete().
 *
 * TODO: Validate in the specs what to do with earnings when a user is deleted.
 */
function emh_points_earnings_user_delete($user) {
  db_delete('emh_points_earnings')
    ->condition('entity_id', $id)
    ->condition('entity_type', $type)
    ->execute();
  // Deleting the emh_points_txn rows is already taken care of in emh_point.
}

/**
 * Implements hook_entity_load().
 */
function emh_points_earnings_entity_load($entities, $type) {
  foreach ($entities as $entity) {
    _emh_points_earnings_entity_load_single($entity, $type);
  }
}

/**
 * Helper callback to load earnings on a single entity.
 */
function _emh_points_earnings_entity_load_single($entity, $type) {

  $wrapper = entity_metadata_wrapper('user', $entity);
  if (empty($wrapper)) {
    return;
  }

  $query = db_select('emh_points_earnings', 'e')
    ->condition('e.entity_type', $type)
    ->condition('e.entity_id', $wrapper->getIdentifier());
  $query->addExpression('SUM(e.earnings)');
  $earnings = $query->execute()->fetchField();
  if (!empty($earnings)) {
    $entity->emh_earnings = (int) $earnings;
  }
  else {
    $entity->emh_earnings = 0;
  }
}

/**
 * Implements hook_views_api().
 */
function emh_points_earnings_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'emh_points_earnings'),
  );
}
