<?php

/**
 * @file
 * EMH Earnings features.
 *
 * EMH Credits are monetized into Earnings for certain Credits transactions.
 *
 * TODO: Earnings integrity: total of earnings should equal total of credits
 * moved back to EMH in the 'monetize' context.
 * This check will be done globally and for each user.
 */

module_load_include('inc', 'emh_points_earnings');
module_load_include('inc', 'emh_points_earnings', 'emh_points_earnings.deprecated');

// Conversion rate from Credits to Earnings. Never change this!
const EMH_POINTS_EARNINGS_RATE = 1;
// Transaction contexts that trigger monetization.
const EMH_POINTS_EARNINGS_CONTEXTS = array(
  'profile_buy',
  'user_sponsor',
);
// Default EMH commission on credits before monetization, when applicable.
const EMH_POINTS_EARNINGS_COMMISSION = '0.7';
// Context for commissions in the transactions logs:
const EMH_POINTS_EARNINGS_COMMISSION_CONTEXT = 'commission';
// Context for monetization in the transactions logs:
const EMH_POINTS_EARNINGS_MONETIZATION_CONTEXT = 'monetization';

/**
 * Implements hook_menu().
 */
function emh_points_earnings_menu() {
  $items = array();

  $items['admin/emindhub/credits/earnings/settings'] = array(
    'title' => 'Earnings settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('emh_points_earnings_admin_form'),
    'access arguments' => array('administer credits'),
    'file' => 'emh_points_earnings.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Implements hook_move_points_after().
 *
 * @int $txn_id ID of the transaction.
 * @array $txn
 * @stdClass $source
 * @stdClass $destination
 *
 * @see emh_points_move_points()
 */
function emh_points_earnings_move_points_after($txn_id, $txn, $source, $destination) {
  // We will need the transaction ID for its children transactions.
  $txn['txn_id'] = $txn_id;
  // We will need to apply commissions and monetization on the destination user.
  // So he/she becomes the source for the children transactions.
  $new_source = $destination;
  // Callback.
  _emh_points_earnings_commission_and_monetize($txn, $new_source);
}

/**
 * Implements hook_give_points_after().
 *
 * @array $txn Transaction.
 * @stdClass $destination
 *
 * @see emh_points_give_points()
 */
function emh_points_earnings_give_points_after($txn, $destination) {
  // We will need to apply commissions and monetization on the destination user.
  // So he/she becomes the source for the children transactions.
  $new_source = $destination;
  // Callback.
  _emh_points_earnings_commission_and_monetize($txn, $new_source);
}

/**
 * Implements hook_permission().
 */
function emh_points_earnings_permission() {
  return array(
    'administer earnings' => array('title' => t('Administer Earnings')),
    'cashout earnings' => array('title' => t('Cashout earnings')),
    'view own earnings' => array('title' => t('View own earnings')),
  );
}

/**
 * Implements hook_user_delete().
 *
 * TODO: Validate in the specs what to do with earnings when a user is deleted.
 */
function emh_points_earnings_user_delete($user) {
  db_delete('emh_points_earnings')
    ->condition('entity_id', $user->uid)
    ->condition('entity_type', 'user')
    ->execute();
  // Deleting the emh_points_txn rows is already taken care of in emh_point.
}

/**
 * Implements hook_entity_load().
 */
function emh_points_earnings_entity_load($entities, $type) {
  foreach ($entities as $entity) {
    _emh_points_earnings_entity_load_single($entity, $type);
  }
}

/**
 * Implements hook_views_api().
 */
function emh_points_earnings_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'emh_points_earnings'),
  );
}

/**
 * Implements hook_views_query_alter().
 */
function emh_points_earnings_views_query_alter(&$view, &$query) {
  // Filtering by source ID seems to be broken for now
  // in the Views implementation of emh_points.
  if ($view->name == 'earnings_history') {
    global $user;

    $filter = array(
      'field' => 'emh_points_txn.source_id',
      'value' => $user->uid,
      'operator' => 'LIKE',
    );
    $query->where[1]['conditions'][] = $filter;
    $test = $query->where[1]['conditions'][0];
    $test2 = $query->where[1]['conditions'][1];
    $test3 = '';
  }
}
