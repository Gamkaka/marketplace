<?php
/**
 * @file
 * Code of the eMindHub request feature.
 */

include_once 'emh_request.deprecated.inc';
include_once 'emh_request.fields.inc';
include_once 'emh_request.conditional_fields.inc';
include_once 'emh_request.admin.inc';
include_once 'emh_request.mail.inc';

function emh_request_permission() {
  return array(
    'modify requests' => array(
      'title' => t('Allow to modify requests after been published'),
    )
  );  
}

/**
 * Implements hook_hook_info().
 */
function emh_request_hook_info() {
  $hooks = array(
    'emh_request_option_info',
    'emh_request_option_info_alter',
    'emh_request_option_setting_form',
    'emh_request_options_costs_alter',
  );

  return array_fill_keys($hooks, array('group' => 'options'));
}


//----------------------------------------------------------------------
//-- MENU
//----------------------------------------------------------------------

/**
 * Implements hook_menu().
 */
function emh_request_menu() {
  $items = array();

  // Publication page (confirmation)
  $items['node/%webform_menu/publish'] = array(
    'title' => t('Validation before publication'),
    'page callback' => 'emh_request_publication_page',
    'page arguments' => array(1),
    'access callback' => 'emh_request_publication_access',
    'access arguments' => array(1),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_menu_alter().
 */
function emh_request_menu_alter(&$items) {
  // Disables some webform accesses
  $items['node/%webform_menu/webform']['access callback'] = '_emh_access_full_access';
  $items['node/%webform_menu/webform']['access arguments'] = array(1);
  $items['node/%webform_menu/webform/components']['access callback'] = '_emh_access_full_access';
  $items['node/%webform_menu/webform/components']['access arguments'] = array(1);
  $items['node/%webform_menu/webform/components/%webform_menu_component/clone']['access callback'] = '_emh_access_full_access';
  $items['node/%webform_menu/webform/components/%webform_menu_component/clone']['access arguments'] = array(1);
  $items['node/%webform_menu/webform/conditionals']['access callback'] = '_emh_access_full_access';
  $items['node/%webform_menu/webform/conditionals']['access arguments'] = array(1);
  $items['node/%webform_menu/webform/configure']['access callback'] = '_emh_access_full_access';
  $items['node/%webform_menu/webform/configure']['access arguments'] = array(1);
  $items['node/%webform_menu/webform/emails']['access callback'] = '_emh_access_full_access';
  $items['node/%webform_menu/webform/emails']['access arguments'] = array(1);
  $items['node/%webform_menu/webform-results']['access callback'] = '_emh_access_full_access';
  $items['node/%webform_menu/webform-results']['access arguments'] = array(1);
  $items['node/%webform_menu/webform-results/analysis']['access callback'] = '_emh_access_full_access';
  $items['node/%webform_menu/webform-results/analysis']['access arguments'] = array(1);
  $items['node/%webform_menu/webform-results/table']['access callback'] = '_emh_access_full_access';
  $items['node/%webform_menu/webform-results/table']['access arguments'] = array(1);
  $items['node/%webform_menu/webform-results/download']['access callback'] = '_emh_access_full_access';
  $items['node/%webform_menu/webform-results/download']['access arguments'] = array(1);
}


//----------------------------------------------------------------------
//-- NODE
//----------------------------------------------------------------------

/**
 * Implements hook_entity_info_alter().
 */
function emh_request_entity_info_alter(&$entity_info) {
  $entity_info['node']['view modes']['summary'] = array(
    'label' => t("Summary"),
    'custom settings' => false,
  );
}

/**
 * Implements hook_node_presave().
 */
function emh_request_node_presave($node) {
  if ($node->type !== 'request') {
    return;
  }
  if (
    ($node->status == NODE_PUBLISHED) &&
    ($node->is_new || $node->original->status == NODE_NOT_PUBLISHED)
  ) {
    if (emh_request_has_option($node, 'questionnaire')) {
      // We create the components on the basis of the field_request_questions values.
      if ($questions = field_get_items('node', $node, 'field_request_questions')) {
        module_load_include('inc', 'webform', 'includes/webform.components');

        $components = array();

        foreach ($questions as $delta => $question) {
          $form_key = 'question' . ($delta + 1);

          $components[$form_key] = array(
            'type' => 'textarea',
            'name' => $question['value'],
            'form_key' => $form_key,
            //'required' => true,
            'weight' => $delta,
          );

          webform_component_defaults($components[$form_key]);
        }

        $node->webform['components'] = $components;
      }
      else {
        // Avoids to publish a questionnaire without any question
        $node->status = NODE_NOT_PUBLISHED;
        drupal_set_message(t("You choosed the questionnaire option then you can't publish your request without any question."), 'error');
      }
    }
    else {
      // All requests are webforms, then we have to automatically create the
      // only component in the case of a non questionnaire request.
      module_load_include('inc', 'webform', 'includes/webform.components');

      // Creates the component by default
      $component = array(
        'type' => 'textarea',
        'name' => $node->title,
        'form_key' => 'request',
        'required' => true,
      );

      webform_component_defaults($component);

      $node->webform['components'] = array('request' => $component);
    }
  }
}

/**
 * Implements hook_node_insert().
 */
function emh_request_node_insert($node) {
  if ($node->type !== 'request') {
    return;
  }

  if ($node->status == NODE_PUBLISHED) {
    emh_request_purchase_options($node);
    emh_request_try_to_notify($node);
  }
}

/**
 * Implements hook_node_update().
 */
function emh_request_node_update($node) {
  if ($node->type !== 'request') {
    return;
  }

  if ($node->status == NODE_PUBLISHED && $node->original->status == NODE_NOT_PUBLISHED) {
    emh_request_purchase_options($node);
    emh_request_try_to_notify($node);
  }
}

/**
 * Implements hook_node_validate().
 */
function emh_request_node_validate($node, $form, &$form_state) {
  if ($node->type !== 'request') {
    return;
  }
  $values = $form_state['values'];

  // Ensures if the anonymity option is selected that there's at least one of
  // the two possibilities which is checked
  if (emh_request_has_option($node, 'anonymous')) {
    $fields = array('field_hide_name', 'field_hide_organisation');
    $error  = true;

    foreach ($fields as $field) {
      $value = drupal_array_get_nested_value($values, array($field, $form[$field]['#language'], 0, 'value'));
      if (!empty($value)) {
        $error = false;
        break;
      }
    }

    if ($error) {
      $message = t("You choosed the anonymity option, please check at least one of the two possibilities: hide your name or your organisation.");
      foreach ($fields as $field) {
        form_error(drupal_array_get_nested_value($form, array($field, $form[$field]['#language'])), $message);
        $message = '';
      }
    }
  }

  // Loads the original node
  if (!empty($node->nid) && !isset($node->original)) {
    $node->original = entity_load_unchanged('node', $node->nid);
  }

  if (
    ($form_state['triggering_element']['#id'] == $form['actions']['submit']['#id']) &&
    (empty($node->nid) || $node->original->status == NODE_NOT_PUBLISHED) &&
    ($options = field_get_items('node', $node, 'field_options'))
  ) {
    global $user;

    $total = 0;
    $costs = emh_request_get_options_costs($node);

    foreach ($options as $option) {
      $total += (int) $costs[$option['option']];
    }

    if (!isset($user->emh_points)) {
      emh_points_entity_load_single($user, 'user');
    }

    if ($user->emh_points < $total) {
      form_error($form, t("You have not enough credits to publish your request."));
    }
  }
}


//----------------------------------------------------------------------
//-- AFTER BUILD CALLBACKS
//----------------------------------------------------------------------

/**
 * After build callback which sets up options behaviors
 * using conditional_fields features.
 */
function emh_request_setup_options_behaviors($form, &$form_state) {
  $options = emh_request_get_options();
  $need_cf_call = !in_array('conditional_fields_form_after_build', $form['#after_build']);

  $dependee = emh_request_get_form_element($form, 'field_options');
  $dependee = $dependee[$dependee['#language']];

  foreach ($options as $id => $option) {
    foreach ($option['fields'] as $field_name) {
      $dependent = emh_request_get_form_element($form, $field_name);
      if ($dependent) {
        $dependent = $dependent[$dependent['#language']];

        $behavior = isset($option['behavior']) ? $option['behavior'] : array();
        $behavior += emh_request_default_option_behavior($id);

        conditional_fields_attach_dependency($form, $dependee, $dependent, $behavior);
      }
    }

    // Calls potential after build callbacks provided with the option
    if (isset($option['after_build'])) {
      if (!is_array($option['after_build'])) {
        call_user_func_array($option['after_build'], array(&$form, &$form_state));
      } else {
        foreach ($option['after_build'] as $after_build) {
          call_user_func_array($after_build, array(&$form, &$form_state));
        }
      }
    }
  }

  if ($need_cf_call) {
    $form = conditional_fields_form_after_build($form, $form_state);
  }

  return $form;
}


//----------------------------------------------------------------------
//-- ACCESS RIGHTS
//----------------------------------------------------------------------

/**
 * Implements hook_webform_results_access().
 */
function emh_request_webform_results_access($node, $account) {
  return emh_access_user_can_see_full_answer($node->nid);
}

/**
 * Implements hook_webform_submission_access().
 */
function emh_request_webform_submission_access($node, $submission, $op = 'view', $account = NULL) {
  switch ($op) {
    case 'view':
      return emh_access_user_can_see_full_answer($node->nid, $submission->sid);
  }
}

/**
 * Access callback for the publication page.
 */
function emh_request_publication_access($request, $account = null) {
  if ($account === null) {
    global $user;
    $account = $user;
  }

  if ($request->type == 'request' && node_access('update', $request, $account)) {
    return true;
  }

  return false;
}


//----------------------------------------------------------------------
//-- PAGES
//----------------------------------------------------------------------


function emh_request_publication_page($request) {
  // Redirects if the request is already published.
  if ($request->status == NODE_PUBLISHED) {
    drupal_set_message(t("This request is already published."), 'warning');
    drupal_goto('node/' . $request->nid);
  }

  $page = array();

  $page['message'] = array(
    '#theme' => 'html_tag',
    '#tag' => 'p',
    '#value' => t("You're about to publish your request, please check the information below:"),
    '#attributes' => array(
      'class' => 'alert alert-block alert-warning',
    ),
  );

  $page['node'] = node_view($request, 'summary');

  if ($options = field_get_items('node', $request, 'field_options')) {
    $page['notice_options'] = array(
      '#theme' => 'html_tag',
      '#tag' => 'p',
      '#value' => t("Please check chosen options and validate your request:"),
      '#attributes' => array(
        'class' => 'alert alert-block alert-warning',
      ),
    );

    $rows = array();
    $total = 0;

    $info = emh_request_get_options();
    $costs = emh_request_get_options_costs($request);

    foreach ($options as $option) {
      $id = $option['option'];
      $rows[] = array($info[$id]['label'], emh_request_format_cost($costs[$id]));
      $total += (int) $costs[$id];
    }

    $page['options'] = array(
      '#theme' => 'table',
      '#header' => array(t("Option(s)"), t("Cost")),
      '#rows' => $rows,
    );

    $page['total'] = array(
      '#markup' => '<span class="total-label">' . t("Total:") . '</span> '
        . '<span class="total">' . emh_request_format_cost($total) . '</span>',
      '#prefix' => '<div class="total-wrapper">',
      '#suffix' => '</div>',
    );
  }

  $page['form'] = drupal_get_form('emh_request_publication_form', $request);

  return $page;
}


//----------------------------------------------------------------------
//-- FORMS
//----------------------------------------------------------------------

/**
 * Builds the form to confirm the request publication.
 */
function emh_request_publication_form($form, &$form_state, $request) {
  $form_state['request'] = $request;

  $options = field_get_items('node', $request, 'field_options');

  if ($options) {
    $options = emh_request_restructure_option_selector_items($options);
    $costs = emh_request_get_options_costs($request);

    foreach (array_keys($costs) as $id) {
      if (!isset($options[$id])) {
        unset($costs[$id]);
      }
    }

    $form['costs'] = array(
      '#type' => 'value',
      '#value' => $costs,
    );
  }

  // Prepares cancel link
  if (isset($_GET['destination'])) {
    $options = drupal_parse_url(urldecode($_GET['destination']));
  } else {
    $options = array('path' => 'node/' . $request->nid . '/edit');
  }

  $form['actions'] = array(
    '#type' => 'actions',
    '#tree' => false,
    'cancel' => array(
      '#type' => 'link',
      '#title' => t("Previous"),
      '#href' => $options['path'],
      '#options' => $options,
    ),
    'submit' => array(
      '#type' => 'submit',
      '#value' => t("Publish"),
    ),
  );

  return $form;
}

/**
 * Submit callback for the publication form.
 */
function emh_request_publication_form_validate($form, &$form_state) {
  $values = $form_state['values'];

  if (isset($values['costs'])) {
    global $user;

    $total = 0;
    foreach ($values['costs'] as $cost) {
      $total += (int) $cost;
    }

    if (!isset($user->emh_points)) {
      emh_points_entity_load_single($user, 'user');
    }

    if ($user->emh_points < $total) {
      form_error($form, t("You have not enough credits to publish your request."));
    }
  }
}

/**
 * Submit callback for the publication form.
 */
function emh_request_publication_form_submit($form, &$form_state) {
  $request = $form_state['request'];
  $values = $form_state['values'];
  try {
    if (isset($values['costs'])) {
      $field_lang = field_language('node', $request, 'field_options');

      foreach (field_get_items('node', $request, 'field_options') as $delta => $option) {
        $cost = (int) $values['costs'][$option['option']];
        $request->field_options[$field_lang][$delta]['cost'] = $cost;
      }
    }

    $request->skip_costs_calculation = true;
    $request->status = NODE_PUBLISHED;
    node_save($request);

    drupal_set_message(t("@type %title has been published.", array(
      '@type' => node_type_get_name($request),
      '%title' => $request->title,
    )));
  }
  catch (\Exception $e) {
    drupal_set_message(t("@type %title could not be published.", array(
      '@type' => node_type_get_name($request),
      '%title' => $request->title,
    )), 'error');
  }

  $form_state['redirect'] = 'node/' . $request->nid;
}

/**
 * Implements hook_form_alter().
 */
function emh_request_form_alter(&$form, &$form_state, $form_id) {
  if (!isset($form['#node']) || $form['#node']->type !== 'request') {
    return;
  }

  if (isset($form['#node']->nid) && ($form_id == 'webform_client_form_' . $form['#node']->nid)) {
    // Changes the submit button label for "Publish my answer"
    if (!empty($form['#is_draft']) || empty($form['#submission'])) {
      $form['actions']['submit']['#value'] = t('Publish');
    }

    // Disables the form components if the user is not allowed to answer
    if (!emh_access_user_can_post_answer($form['#node']->nid) && !empty($form['submitted'])) {
      foreach ($form['submitted'] as $key => $element) {
        if (is_array($element) && !empty($element['#type']) && $element['#type'] == 'textarea') {
          $form['submitted'][$key]['#disabled'] = true;
        }
      }
      $form['actions']['#access'] = false;
    }

    // Hides the uniq field label in the request if not a questionnaire
    if (!emh_request_has_option($form['#node'], 'questionnaire') && !empty($form['submitted'])) {
      foreach ($form['submitted'] as $key => $element) {
        if (is_array($element) && !empty($element['#type']) && $element['#type'] == 'textarea') {
          $form['submitted'][$key]['#title_display'] = 'invisible';
        }
      }
    }

    // Show specific message for Private option
    if (emh_request_has_option($form['#node'], 'private') && !empty($form['submitted'])) {
      $form['actions']['#prefix'] = '<div class="user-submission-option-private-info">' . t('Your submission will only be visible by the request\'s author.') . '</div>';
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function emh_request_form_node_form_alter(&$form, &$form_state, $form_id) {

  if (in_array($form['#node']->type, emh_request_get_types())) {

    // Sets action buttons labels
    $form['actions']['draft']['#value'] = t('Save draft');
    $form['actions']['submit']['#value'] = t('Continue');

    // Treatments for generic requests
    if ($form['#node']->type == 'request') {
      // FIXME: la surcharge empêche l'affichage du multiupload
      // $form['field_request_documents'][LANGUAGE_NONE][0]['#process'][] = 'emindhub_my_file_element_process';
      $form['field_image'][LANGUAGE_NONE][0]['#process'][] = 'emindhub_my_file_element_process';

      // Request being created or already created & unpublished
      if (empty($form['#node']->nid) || $form['#node']->status == NODE_NOT_PUBLISHED) {
        // Removes the save_draft validation callback
        foreach ($form['#validate'] as $index => $callback) {
          if ($callback == 'save_draft_validate') {
            unset($form['#validate'][$index]);
          }
        }
        // Adds a submit callback to redirect on the publication page
        $form['actions']['submit']['#submit'][] = 'emh_request_form_node_publish';
      }
      // Request created & published
      else { 
        if (!user_access('modify requests')) {
          // Prevents to delete the request
          $form['actions']['delete']['#access'] = false;
         // Prevents to update some fields
          $form['field_domaine']['#disabled'] = true;
          $form['og_group_ref']['#disabled'] = true;
          $form['field_options']['#disabled'] = true;
          $form['title_field']['#disabled'] = true;
          if (emh_request_count_answers($form['nid']['#value']) != 0)
            $form['field_request_questions']['#disabled'] = true;
        }
      }
    }
    // Treatments for others
    else { 
      // If node is published and there are some answers,
      // only some updates are possible (#575, #576)
      if ($form['#node']->status == NODE_PUBLISHED && emh_request_count_answers($form['nid']['#value'])) {
        if (!user_access('modify requests')) {
          // Prevents domains & circles update
          $form['field_domaine']['#disabled'] = true;
          $form['og_group_ref']['#disabled'] = true;
          $form['field_request_circle']['#disabled'] = true;
        } 
      }
    }

    // If nid not empty, we're in the edit page
    if (!empty($form['nid']['#value']) && $form['#node']->status == NODE_PUBLISHED) {
      $form['actions']['draft']['#access'] = false;
      $form['actions']['submit']['#value'] = t('Save');
      // If node is published on a free circle, we can close the request.
      $nid = $form['nid']['#value'];
      $status = emh_points_get_points_closed_status($nid);
      $circles = $form['#node']->og_group_ref[LANGUAGE_NONE];
      $free = true;

      foreach($circles as $delta => $circle) {
        $loaded_circle = node_load($circle['target_id']); // TODO : PERF ISSUE : use node_load_all instead
        if ($loaded_circle->field_free_circle[LANGUAGE_NONE]['0']['value'] === '0') {
          // Paying circle
          $free = false;
          break;
        }
      }

      if ($free && !$status) {
        $form['actions']['close'] = array(
          '#type' => 'submit',
          '#value' => 'Close the request',
          '#submit' => array('emh_request_node_form_close'),
        );
      }
    }

    // Hide node access
    $form['group_content_access']['#access'] = FALSE;

    // Load only circles which user is member of
    global $user;
    $groups = og_get_groups_by_user($user, 'node');
    $user_groups = array();
    foreach ($groups as $group) {
      $node = node_load($group);
      $user_groups[$group] = $node->title;
    }
    $form['og_group_ref'][LANGUAGE_NONE]['#options'] = $user_groups;
  }
}

/**
 * Submit callback for the submit button of the request edition form.
 *
 * Redirects the user to the publication page.
 */
function emh_request_form_node_publish($form, &$form_state) {
  $form_state['redirect'] = 'node/' . $form_state['nid'] . '/publish';
}

/**
 * Submit callback for the close button of the request edition form.
 *
 * Disables the webform to prevent new sumbmissions.
 */
function emh_request_node_form_close($form, &$form_state) {
  if ($form_state['node']->type == 'request') {
    $form_state['node']->webform['status'] = 0;
    node_save($form_state['node']);
  } else {
    emh_points_close_node($form_state['node']->nid);
  }

  $form_state['redirect'] = 'node/' . $form_state['node']->nid;
}


//----------------------------------------------------------------------
//-- WEBFORM
//----------------------------------------------------------------------

/**
 * Implements hook_webform_node_defaults_alter().
 */
function emh_request_webform_node_defaults_alter(&$defaults) {
  $defaults['allow_draft'] = 1;
  $defaults['enforce_limit'] = 'yes';
  $defaults['progressbar_bar'] = 0;
  $defaults['submit_limit'] = 1;
  $defaults['submit_interval'] = -1;
  $defaults['submit_notice'] = 0;
}


//----------------------------------------------------------------------
//-- API
//----------------------------------------------------------------------

/**
 * Provides all available options.
 *
 * @return array Options definitions
 */
function emh_request_get_options() {
  $options = &drupal_static(__FUNCTION__);

  if ($options === null) {
    $options = module_invoke_all('emh_request_option_info');
    drupal_alter('emh_request_option_info', $options);

    $costs = variable_get('emh_options_costs', array());

    foreach ($options as $id => &$option) {
      if (strlen($id) > 64) {
        throw new Exception(sprintf("The identifier given to an EMH request option can't be longer than 64 characters (found: %s).", $id));
      }

      $option += emh_request_default_option_info();

      if (isset($costs[$id])) {
        $option['cost'] = (int) $costs[$id];
      }
    }

    uasort($options, 'drupal_sort_weight');
  }

  return $options;
}

/**
 * Provides the option properties by default.
 *
 * @return array Option properties by default
 */
function emh_request_default_option_info() {
  return array(
    'cost' => 0,
    'weight' => 0,
    'fields' => array(),
  );
}

/**
 * Provides the properties of the options behavior by default.
 *
 * @param string $option_id
 *  The identifier (machine name) of the option for which you want the default
 *  properties
 * @return array Behavior properties by default
 */
function emh_request_default_option_behavior($option_id) {
  return array(
    'state' => 'visible',
    'condition' => 'value',
    'values_set' => CONDITIONAL_FIELDS_DEPENDENCY_VALUES_AND,
    'values' => array($option_id),
    'effect' => 'slide',
  );
}

/**
 * Informs if the given request has the specified option.
 *
 * @param stdClass $request
 *  The request node
 * @param string $option_id
 *  The identifier (machine name) of the option to check
 * @return boolean
 */
function emh_request_has_option($request, $option_id) {
  $request_options = field_get_items('node', $request, 'field_options');

  if ($request_options) {
    foreach ($request_options as $option) {
      if ($option['option'] === $option_id) {
        return true;
      }
    }
  }

  return false;
}

/**
 * Informs if the given form values contain the specified option.
 *
 * We assume that the options values has already been restructured by
 * emh_request_restructure_option_selector_items().
 *
 * @param stdClass $values
 *  Form submitted values ($form_state['values'])
 * @param string $option_id
 *  The identifier (machine name) of the option to check
 * @param string field_lang
 *  The options field language (LANGUAGE_NONE by default)
 * @return boolean
 */
function emh_request_form_values_has_option($values, $option_id, $field_lang = LANGUAGE_NONE) {
  $form_options = drupal_array_get_nested_value($values, array('field_options', $field_lang));

  if ($form_options) {
    foreach ($form_options as $option) {
      if ($option['option'] === $option_id) {
        return true;
      }
    }
  }

  return false;
}

/**
 * Provides the default options costs.
 *
 * @return array
 *  Costs keyed by option identifier
 */
function emh_request_get_default_options_costs() {
  $costs = array();

  foreach (emh_request_get_options() as $id => $option) {
    $costs[$id] = $option['cost'];
  }

  return $costs;
}

/**
 * Provides the options costs related to a specific request
 * and potentially altered by other modules.
 *
 * @param stdClass $request
 *  The request node
 * @return array
 *  Costs keyed by option identifier
 */
function emh_request_get_options_costs($request) {
  // Stores calculated costs in a static cache to avoid to calculate them
  // each time the function is called.
  $static_costs = &drupal_static(__FUNCTION__, array());
  $nid = empty($request->nid) ? false : $request->nid;

  if ($nid === false || !isset($static_costs[$nid])) {
    $costs = emh_request_get_default_options_costs();
    drupal_alter('emh_request_options_costs', $costs, $request);

    if ($nid === false) {
      return $costs;
    } else {
      $static_costs[$nid] = $costs;
    }
  }

  return $static_costs[$nid];
}

/**
 * Searches an element in a form structure and returns it if found.
 *
 * @param array $form The form (or just a piece of form)
 * @param string $element_name The name of the element to search
 * @return array|null
 */
function emh_request_get_form_element($form, $element_name) {
  if (isset($form[$element_name])) {
    return $form[$element_name];
  } else {
    foreach (element_children($form) as $child) {
      if ($element = emh_request_get_form_element($form[$child], $element_name)) {
        return $element;
      }
    }
  }
}

/**
 * Formats an option cost as a friendly localized text.
 *
 * @param integer $cost
 * @return string
 */
function emh_request_format_cost($cost) {
  if ($cost == 0) {
    return t("Free");
  }
  return t("!amount credits", array('!amount' => $cost));
}

/**
 * Spends the current user's credits for the purchase
 * of the given request's options.
 *
 * @param stdClass $request
 *  The request node
 */
function emh_request_purchase_options($request) {
  $total = 0;

  if ($options = field_get_items('node', $request, 'field_options')) {
    foreach ($options as $option) {
      $total += (int) $option['cost'];
    }
  }

  if ($total > 0) {
    global $user;
    $emindhub = user_load(1);
    emh_points_move_points($user, $emindhub, $total);
  }
}

/**
 * Helper function to render a submission.
 */
function emh_request_render_submission($submission) {
  $output = '';

  foreach ($submission->data as $submission) {
    $output .= $submission[0] . '&nbsp;';
  }

  return strip_tags(views_trim_text(
    array(
      'max_length' => 300,
      'word_boundary' => TRUE,
      'ellipsis' => TRUE,
      'html' => TRUE,
    ),
    $output
  ));
}

/**
 * Helper function to retrieve the type of a request.
 */
function emh_request_get_request_type($node = null) {
  if ($node === null) {
    $node = menu_get_object();
  }
  elseif (is_numeric($node)) {
    $node = node_load($node);
  }

  if (empty($node)) return;

  $node_wrapper = entity_metadata_wrapper('node', $node);
  $term = $node_wrapper->field_request_type->value();

  if (empty($term)) return;

	return $term;
}

function emh_request_get_type_image($term, $size = 25, $style = null) {
	global $base_url, $language;

	$term_wrapper = entity_metadata_wrapper('taxonomy_term', $term);
	$term_name = $term_wrapper->language($language->language)->name_field->value();
	$term_safe_name = preg_replace('/[^A-Za-z0-9\-]/', '', strtolower($term_name));
	$style = isset($style) ? '-' . $style : '';
  return '<img src="' . $base_url . '/' . drupal_get_path('module', 'emh_request') . '/images/ico-' . $term_safe_name . $style . '.svg" width="' . $size . '" height="' . $size . '" alt="' . $term_name . '">';
}

function emh_request_get_request_type_image($node = null, $size = 25, $style = null) {
	$term = emh_request_get_request_type($node);
  if (empty($term)) return;

  return emh_request_get_type_image($term, $size, $style);
}

function emh_request_get_request_type_name($node = null) {
	global $base_url, $language;

	$term = emh_request_get_request_type($node);
  if (empty($term)) return;

	$term_wrapper = entity_metadata_wrapper('taxonomy_term', $term);
	$term_name = $term_wrapper->language($language->language)->name_field->value();
	return '<span class="request-type-name">' . $term_name . '</span>';
}
