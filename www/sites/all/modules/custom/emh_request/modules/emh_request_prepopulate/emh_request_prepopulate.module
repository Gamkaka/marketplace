<?php

/**
 * Implements hook_form_alter().
 */
function emh_request_prepopulate_form_request_node_form_alter(&$form, &$form_state, $form_id) {
  if ($form['field_request_type']) {
    $form['field_request_type'][LANGUAGE_NONE]['#after_build'][] = 'emh_request_prepopulate_form_field_request_type_after_build';
    $form['field_request_type']['#suffix'] .= emh_request_prepopulate_form_field_request_type_switch($form['field_request_type'][LANGUAGE_NONE]['#options'], $form);
  }

  if ($form['field_options']) {
    $form['field_options']['#prefix'] .= emh_request_prepopulate_form_field_options_help($form['field_request_type'][LANGUAGE_NONE]['#options'], $form);
  }

  if (isset($_REQUEST['edit'])) {
    $count = isset($_REQUEST['num_questions']) ? $_REQUEST['questions'] : 3;
    _emh_request_prepopulate_create_field_multiple_value($form, $form_state, $form_id, 'field_request_questions', $count);
  }
}

/**
 * After build callback for field_request_type on request creation forms.
 *
 * Inspired by http://e9p.net/altering-individual-radio-or-checkbox-items-drupal-7-fapi
 */
function emh_request_prepopulate_form_field_request_type_after_build($element, &$form_state) {
  global $base_url, $language;

  // Each renderable radio element.
  foreach (element_children($element) as $tid) {
    // Pull the original form item.
    $field_request_type_item = $element[$tid];

    // Load the term.
    $term = taxonomy_term_load($tid);

    $term_wrapper = entity_metadata_wrapper('taxonomy_term', $term);
    $term_name = $term_wrapper->language($language->language)->name_field->value();
    $term_safe_name = preg_replace('/[^A-Za-z0-9\-]/', '', strtolower($term_name));
    $term_description = $term_wrapper->language($language->language)->description_field->value->value(array('sanitize' => TRUE));
    $term_path = $term_wrapper->language($language->language)->field_prepopulate->value() ? $base_url . '/node/add/request?edit[field_request_type][und][' . $term->tid . '][' . $term->tid . ']=' . $term->tid . '&' . $term_wrapper->language($language->language)->field_prepopulate->value() : $base_url . '/node/add/request?edit[field_request_type][und][' . $term->tid . '][' . $term->tid . ']=' . $term->tid;

    // Update the radio item so the button shows then the rendered term.
    $element[$tid] = array(
      // Wrap the new item for styling.
      '#prefix' => '<div class="request-type type-' . $term_safe_name . '">',
      '#suffix' => '</div>',
      // Make sure to use the initial key so FAPI saves the values correctly.
      $tid => $field_request_type_item,
    );

    $element[$tid][$tid]['#title'] = emh_request_get_type_image($term, 50) ? '<span class="term-image">' . emh_request_get_type_image($term, 50) . '</span>' : '';
    $element[$tid][$tid]['#title'] .= '<span class="term-name">' . $term_name . '</span>';
    $element[$tid][$tid]['#title'] .= $term_description ? '<span class="term-description">' . $term_description . '</span>' : '';

    if (isset($_REQUEST['edit'])) {
      $element[$tid][$tid]['#title'] = l(
                                        $element[$tid][$tid]['#title'],
                                        '',
                                        array(
                                          'attributes' => array(
                                            'data-toggle' => 'modal',
                                            'data-target' => '#modal-request-type-' . $term_safe_name,
                                          ),
                                          'html' => TRUE,
                                          'fragment' => 'modal-request-type-' . $term_safe_name,
                                        )
                                      );
    }
    else {
      $element[$tid][$tid]['#title'] = l(
                                        $element[$tid][$tid]['#title'],
                                        $term_path,
                                        array(
                                          'html' => TRUE,
                                        )
                                      );
    }

  }

  // Always return the element to render in after_build callbacks.
  return $element;
}

function emh_request_prepopulate_form_field_request_type_switch(array $types, $form) {
  global $base_url, $language;
  foreach ($types as $tid => $value) {
    $term = taxonomy_term_load($tid);
    $term_wrapper = entity_metadata_wrapper('taxonomy_term', $term);
    $term_name = $term_wrapper->language($language->language)->name_field->value();
    $term_safe_name = preg_replace('/[^A-Za-z0-9\-]/', '', strtolower($term_name));
    $term_path = $base_url . '/node/add/request?' . $term_wrapper->language($language->language)->field_prepopulate->value() . '&edit[field_request_type][und][' . $term->tid . '][' . $term->tid . ']=' . $term->tid;

    $output .= '<div class="modal fade" id="modal-request-type-' . $term_safe_name . '" tabindex="-1" role="dialog" aria-labelledby="modal-request-type-' . $term_safe_name . 'Label">
              <div class="modal-dialog" role="document">
                <div class="modal-content">
                  <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                    <h4 class="modal-title" id="modal-request-type-' . $term_safe_name . 'Label">' . t('Confirm request type change') . '</h4>
                  </div>
                  <div class="modal-body">
                    ' . t('Are you sure you want to change your request type? If you choose to continue, the data of your request will be lost.') . '
                  </div>
                  <div class="modal-footer">
                    <button type="button" class="btn btn-default" data-dismiss="modal">' . t('Cancel') . '</button>
                    <a href="' . $term_path . '" class="btn btn-primary">' . t('Switch to ') . $term_name . '</a>
                  </div>
                </div>
              </div>
            </div>';
  }

  return $output;
}

function emh_request_prepopulate_form_field_options_help(array $types, $form) {
  global $language;
  foreach ($types as $tid => $term_name) {
    $term = taxonomy_term_load($tid);
    $term_wrapper = entity_metadata_wrapper('taxonomy_term', $term);
    $term_prepopulate = $term_wrapper->language($language->language)->field_prepopulate->value();
    $term_safe_name = preg_replace('/[^A-Za-z0-9\-]/', '', strtolower($term_name));

    if (!empty($term_prepopulate)) {
      $output .= '<div class="collapse request-type-' . $term_safe_name . '">
                <div class="panel panel-default">
                  <div class="panel-body">
                  <div class="type-infos">
                      <p>' . t('To get the most from your @type request, we recommend you to use the options bellow', array('type' => $term_name)) . '</p>
                    </div>
                  </div>
                </div>
              </div>';
    }
  }

  return $output;
}

/**
 * An #after_build function to set the values prepopulated in the request.
 * Fill form elements with data from GET or POST values.
 *
 * @see prepopulate module
 */
function emh_request_prepopulate_form_after_build($form, &$form_state) {
  $request = (array) $_REQUEST['edit'];
  _emh_request_prepopulate_prepopulate_walk($form, $request, $form_state, $form_state['field']);
  return $form;
}

function _emh_request_prepopulate_create_field_multiple_value(&$form, $form_state, $form_id, $field_name, $items_count) {
  $form_theme = $form[$field_name][LANGUAGE_NONE]['#theme'];
  $after_build = $form[$field_name][LANGUAGE_NONE]['#after_build'];
  $items = &$form_state['field'][$field_name][LANGUAGE_NONE];
  // Generate required number of fields
  if ($items_count > 1 and $items['items_count'] !== $items_count) {
    $items['items_count'] = $items_count;
    $form[$field_name][LANGUAGE_NONE] = field_multiple_value_form($items['field'], $items['instance'], LANGUAGE_NONE, array(), $form, $form_state);
    // Reset theme function, as field_multiple_value_form hijacks it
    $form[$field_name][LANGUAGE_NONE]['#theme'] = $form_theme;
    $form[$field_name][LANGUAGE_NONE]['#after_build'] = $after_build;
    $form[$field_name][LANGUAGE_NONE]['#language'] = 'LANGUAGE_NONE';
    $form[$field_name][LANGUAGE_NONE]['#field_parents'] = array();
  }
}

/**
 * Internal helper to set element values from the $_REQUEST variable.
 *
 * @param array &$form
 *   A form element.
 * @param mixed &$request_slice
 *   String or array. Value(s) to be applied to the element.
 */
function _emh_request_prepopulate_prepopulate_walk(&$form, &$request_slice, &$form_state, &$instance) {
  $limited_types = array(
    'actions',
    'button',
    'token',
    'value',
    'hidden',
    'image_button',
    'password',
    'password_confirm',
    'text_format',
    'markup',
  );

  if (is_array($request_slice)) {
    foreach (array_keys($request_slice) as $request_variable) {
      $next_slice =  $request_slice[$request_variable];
      // YBA: to bypass a Behat bug that strips "[0]" from slice, must be replaced by ['0']
      $request_variable = str_replace("'", "", $request_variable);
      if (element_child($request_variable) && !empty($form[$request_variable]) &&
       (!isset($form[$request_variable]['#type']) || !in_array($form[$request_variable]['#type'], $limited_types)) ) {
        if (!isset($form[$request_variable]['#access']) || $form[$request_variable]['#access'] != FALSE) {
          _emh_request_prepopulate_prepopulate_walk($form[$request_variable], $next_slice, $form_state, $instance[$request_variable]);
        }
      }
    }
    if (!empty($form['#default_value']) && is_array($form['#default_value'])) {
      $form['#default_value'] = array_merge($form['#default_value'], $request_slice);
    }
  }
  else {
    if ($form['#type'] == 'markup' || empty($form['#type'])) {
      $form['#value'] = check_plain($request_slice);
    }
    else {
      if ($form['#type'] == 'select') {
        // Try to match taxonomy terms to ease URL expression
        $term = taxonomy_get_term_by_name($request_slice);
        if (count($term) === '1')
          $request_slice = (string) key($term);
      }
      $form['#value'] = $request_slice;
      $form['#default_value'] = $request_slice;
    }
    if ($form['#type'] == 'checkboxes' || $form['#type'] == 'checkbox') {
      $form['#checked'] = TRUE;
      $form['#default_value'] = TRUE;
      $form['#value'] = TRUE;
    }
  }
}
