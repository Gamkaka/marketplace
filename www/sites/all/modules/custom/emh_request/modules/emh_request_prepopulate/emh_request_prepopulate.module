<?php

/**
 * Implements hook_form_alter().
 */
function emh_request_prepopulate_form_alter(&$form, &$form_state, $form_id) {
  if (!isset($form['#node']) || $form['#node']->type !== 'request') {
    return;
  }

  // TODO
  // Request being created or already created & unpublished
  // if (empty($form['#node']->nid) || $form['#node']->status == NODE_NOT_PUBLISHED) {
  //   $form['actions']['switch'] = array(
  //     '#type' => 'submit',
  //     '#value' => t('Activate these options'),
  //     '#submit' => array('emh_request_prepopulate_form_node_switch'),
  //   );
  // }

  if (isset($_REQUEST['edit'])) {
    // URL example:
    // edit[field_options][und][questionnaire][enabled]=&edit[field_options][und][private][enabled]=&edit[field_options][und][questionnaire][enabled]=&edit[field_request_questions][und][%270%27][value]=How%20to%20become%20a%20superhero%3F
    $form['#after_build'][] = 'emh_request_prepopulate_form_after_build';
    _emh_request_prepopulate_create_field_multiple_value($form, $form_state, $form_id, 'field_request_questions', 3);
  }
}

/**
 * Submit callback for the switch button of the request edition form.
 *
 * Redirects the user to the creation page with prepopulated fields.
 */
// function emh_request_prepopulate_form_node_switch($form, &$form_state) {
//   // Only if the user clicked the "Switch" button
//   if ($form_state['triggering_element']['#value'] == $form['actions']['switch']['#value']) {
//     try {
//
//
//       node_save($form['#node']);
//
//       $msg_args = array(
//         '@type' => node_type_get_name($form['#node']),
//         '%title' => $form['#node']->title,
//       );
//
//       // Redirects to the request edit view
//       // $term = taxonomy_term_load($tid);
//       // $term_wrapper = entity_metadata_wrapper('taxonomy_term', $term);
//       // $term_name = $term_wrapper->language($language->language)->name_field->value();
//       // $term_safe_name = preg_replace('/[^A-Za-z0-9\-]/', '', strtolower($term_name));
//       // $term_prepopulate = $term_wrapper->language($language->language)->field_prepopulate_help->value();
//       // $term_path = $base_url . '/node/add/request?' . $term_wrapper->language($language->language)->field_prepopulate->value() . '&edit[field_request_type][und][' . $term->tid . '][' . $term->tid . ']=' . $term->tid;
//
//       $node_wrapper = entity_metadata_wrapper('node', $node);
//       $node_wrapper->field_request_type->set('sepp@example.com');
//
//       $form_state['redirect'] = 'node/' . $form['#node']->nid . '/edit' . $form['actions']['switch']['#path'];
//       drupal_set_message(t('@type %title has been updated.', $msg_args));
//     }
//     catch (Exception $e) {
//       drupal_set_message(t('The request could not be saved.'), 'error');
//     }
//   }
// }

/**
 * An #after_build function to set the values prepopulated in the request.
 * Fill form elements with data from GET or POST values.
 *
 * @see prepopulate module
 */
function emh_request_prepopulate_form_after_build($form, &$form_state) {
  $request = (array) $_REQUEST['edit'];
  _emh_request_prepopulate_prepopulate_walk($form, $request, $form_state, $form_state['field']);
  return $form;
}

function _emh_request_prepopulate_create_field_multiple_value(&$form, $form_state, $form_id, $field_name, $items_count) {
  $form_theme = $form[$field_name][LANGUAGE_NONE]['#theme'];
  $after_build = $form[$field_name][LANGUAGE_NONE]['#after_build'];
  $items = &$form_state['field'][$field_name][LANGUAGE_NONE];
  // Generate required number of fields collection
  if ($items_count > 1 and $items['items_count'] !== $items_count) {
    $items['items_count'] = $items_count;
    $form[$field_name][LANGUAGE_NONE] = field_multiple_value_form($items['field'], $items['instance'], LANGUAGE_NONE, array(), $form, $form_state);
    // Reset theme function, as field_multiple_value_form hijacks it
    $form[$field_name][LANGUAGE_NONE]['#theme'] = $form_theme;
    $form[$field_name][LANGUAGE_NONE]['#after_build'] = $after_build;
    $form[$field_name][LANGUAGE_NONE]['#language'] = 'LANGUAGE_NONE';
    $form[$field_name][LANGUAGE_NONE]['#field_parents'] = array();
  }
}

/**
 * Internal helper to set element values from the $_REQUEST variable.
 *
 * @param array &$form
 *   A form element.
 * @param mixed &$request_slice
 *   String or array. Value(s) to be applied to the element.
 */
function _emh_request_prepopulate_prepopulate_walk(&$form, &$request_slice, &$form_state, &$instance) {
  $limited_types = array(
    'actions',
    'button',
    'token',
    'value',
    'hidden',
    'image_button',
    'password',
    'password_confirm',
    'text_format',
    'markup',
    );

  if (is_array($request_slice)) {
    foreach (array_keys($request_slice) as $request_variable) {
      $next_slice =  $request_slice[$request_variable];
      // YBA: to bypass a behat bug that strips "[0]" from slice, must be replaced by ['0']
      $request_variable = str_replace("'", "", $request_variable);
      if (element_child($request_variable) && !empty($form[$request_variable]) &&
       (!isset($form[$request_variable]['#type']) || !in_array($form[$request_variable]['#type'], $limited_types)) ) {
        if (!isset($form[$request_variable]['#access']) || $form[$request_variable]['#access'] != FALSE) {
          _emh_request_prepopulate_prepopulate_walk($form[$request_variable], $next_slice, $form_state, $instance[$request_variable]);
        }
      }
    }
    if (!empty($form['#default_value']) && is_array($form['#default_value'])) {
      $form['#default_value'] = array_merge($form['#default_value'], $request_slice);
    }
  }
  else {
    if ($form['#type'] == 'markup' || empty($form['#type'])) {
      $form['#value'] = check_plain($request_slice);
    }
    else {
      if ($form['#type'] == 'select') {
        // Try to match taxonomy terms to ease URL expression
        $term = taxonomy_get_term_by_name($request_slice);
        if (count($term) === '1')
          $request_slice = (string) key($term);
      }
      $form['#value'] = $request_slice;
      $form['#default_value'] = $request_slice;
    }
    if ($form['#type'] == 'checkboxes' || $form['#type'] == 'checkbox') {
      $form['#checked'] = TRUE;
      $form['#default_value'] = TRUE;
      $form['#value'] = TRUE;
    }
  }
}
