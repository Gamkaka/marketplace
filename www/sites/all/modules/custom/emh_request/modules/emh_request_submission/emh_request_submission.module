<?php

/**
 * Implements hook_form_alter().
 */
function emh_request_submission_form_alter(&$form, &$form_state, $form_id) {
  if (!isset($form['#node']) || $form['#node']->type !== 'request') {
    return;
  }

  if (isset($form['#node']->nid) && ($form_id == 'webform_client_form_' . $form['#node']->nid)) {

    global $user;
    $account = user_load($user->uid);
    $attach_form = array();

    $required_fields = emh_request_submission_required_profile_fields();
    foreach ($required_fields as $required_field) {
      $field = field_get_items('user', $account, $required_field);
      // echo '<pre>' . print_r($field, true) . '</pre>';
      if (field_access('edit', $required_field, 'user') && !empty($field)) {
        field_attach_form('user', $account, $attach_form, $form_state, NULL, array('field_name' => $required_field));
        $form[$required_field] = $attach_form[$required_field];
      }
      if ($items = field_get_items('user', $account, 'field_skills_set')) {

        //loop through to get the ids so we can take
        //advantage of field_collection_item_load_multiple for
        //greater efficiency
        $field_collection_item_ids = array();
        foreach ($items as $item) {
          $field_collection_item_ids[] = $item['value'];
        }

        if ($field_collection_items = field_collection_item_load_multiple($field_collection_item_ids)) {
          foreach ($field_collection_items as $subitem) {
            echo '<pre>' . print_r($subitem, true) . '</pre>';
            //now we load the items within the field collection
            if ($items = field_get_items('field_collection_item', $subitem, 'field_skills_set')) {

              //And you can then repeat to go deeper and deeper
              //e.g. a field collection item within a field collection
              //for instance to get the urls within your faculty members
              //item. Best to break this into functions or a class
              //to keep your code readable and not have so many nested
              //if statements and for loops

            }

          }
        }

      }
    }

    $form['field_skills_set'][LANGUAGE_NONE][0]['field_skill2']['#required'] = TRUE;
    $form['field_skills_set'][LANGUAGE_NONE][0]['field_skill_autoeval']['#required'] = TRUE;
    $form['field_skills_set'][LANGUAGE_NONE][0]['field_year_of_experiences']['#required'] = TRUE;

    $elements = $form['field_address'][LANGUAGE_NONE][0];

    $elements['#type'] = 'div';

    $elements['street_block']['thoroughfare']['#required'] = FALSE;
    $elements['street_block']['thoroughfare']['#access'] = FALSE;
    $elements['street_block']['premise']['#required'] = FALSE;
    $elements['street_block']['premise']['#access'] = FALSE;

    $elements['locality_block']['postal_code']['#required'] = FALSE;
    $elements['locality_block']['postal_code']['#access'] = FALSE;
    $elements['locality_block']['dependent_locality']['#required'] = FALSE;
    $elements['locality_block']['dependent_locality']['#access'] = FALSE;
    $elements['locality_block']['locality']['#required'] = FALSE;
    $elements['locality_block']['locality']['#access'] = FALSE;
    $elements['locality_block']['administrative_area']['#required'] = FALSE;
    $elements['locality_block']['administrative_area']['#access'] = FALSE;

    $elements['country']['#required'] = FALSE;
    $elements['country']['#access'] = FALSE;

    $elements['phone_block']['phone_number']['phone_number']['#required'] = TRUE;
    $elements['phone_block']['mobile_number']['#required'] = TRUE;

    $form['field_address'][LANGUAGE_NONE][0] = $elements;

    echo '<pre>' . print_r($form['field_skills_set'][LANGUAGE_NONE][0], true) . '</pre>';
  }
}

function emh_request_submission_required_profile_fields() {
  $required_fields = array(
    'field_address',
    'field_position',
    'field_skills_set',
    'field_cv',
  );
  return $required_fields;
}

function emh_request_submission_get_empty_fields_form_submit($form, &$form_state) {

  global $user;
  $account = user_load($user->uid);
  $edit = array();

  $required_fields = emh_request_submission_required_profile_fields();

  foreach ($required_fields as $required_field) {
    $field_name = $required_field;
    $edit[$field_name] = $form_state['values'][$field_name];
  }

  $edit = array_merge( $edit, array(
    'status' => 1,
    'access' => REQUEST_TIME,
  ) );

  // drupal_set_message(t('Your profile has been updated. You have now access to client requests.'));

  user_save($account, $edit);

}

/**
 * Implements hook_block_info().
 */
function emh_request_submission_block_info() {
  $blocks = array();

  $blocks['submission_count'] = array(
    'info' => t("Request - Submission count"),
    'cache' => DRUPAL_CACHE_PER_ROLE,
    'weight' => 1,
    'status' => 1,
    'region' => 'title_right',
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'pages' => 'node/*',
    'node_types' => array(
      0 => 'request',
    ),
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function emh_request_submission_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'submission_count':
      $node = menu_get_object();
      if ($node && $node->status == NODE_PUBLISHED) {
        $submissions_count = emh_request_count_answers($node->nid);
        $value = '<a href="#request-submissions" class="btn btn-submission">';
        if ($submissions_count == 0) {
          $value .= t('No submission');
        }
        else {
          $value .= format_plural($submissions_count, '1 submission', '@count submissions');
        }
        $value .= '</a>';
      }
      else {
        $value = '';
      }

      $block = array(
        'subject' => '<none>',
        'content' => $value,
      );
      break;
  }

  return $block;
}
