<?php
/**
 * @file
 * Code for eMindHub Profiles feature.
 */


include_once 'emh_user.admin.inc';


/**
 * Implements hook_views_api().
 */
function emh_user_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'emh_user') . '/views',
  );
}

/**
 * Implements hook_menu().
 */
function emh_user_menu() {
	$items = array();

	$items['client/register'] = array(
		'title' => 'Register as a client',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('user_register_form_client'),
		'access arguments' => array('access content'),
	);
	$items['expert/register'] = array(
		'title' => 'Register as an expert',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('user_register_form_expert'),
		'access arguments' => array('access content'),
	);
  $items['user/%user/purchase'] = array(
		'title' => 'Buy profile access',
		'page callback' => 'drupal_get_form',
    'page arguments' => array('emh_user_profile_purchase_form', 1),
    'access callback' => 'user_view_access',
    'access arguments' => array(1),
    'type' => MENU_CALLBACK,
	);

  return $items;
}

/**
 * Implements hook_menu_alter().
 */
function emh_user_menu_alter(&$items) {
  unset($items['user/register']);
  $items['user/%user']['access callback'] = 'emh_user_view_access';
  $items['user/%user']['access arguments'] = array(1);
  $items['user/%user/hybridauth']['access callback'] = FALSE;
  $items['user/%user/edit']['title'] = t('Edit account');
  $items['user/%user/change-password']['title'] = t('Change password');
}

/**
 * User view access callback.
 *
 * @param $account
 *   Can either be a full user object or a $uid.
 */
function emh_user_view_access($account) {
  $uid = is_object($account) ? $account->uid : (int) $account;

  // Never allow access to view the anonymous user account.
  if ($uid) {
    // Admins can view all, users can view own profiles at all times.
    if ($GLOBALS['user']->uid == $uid || user_access('administer users')) {
      return TRUE;
    }
    elseif (user_access('access user profiles')) {
      // At this point, load the complete account object.
      if (!is_object($account)) {
        $account = user_load($uid);
      }
      return (is_object($account) && $account->status && emh_access_user_can_see_full_user($GLOBALS['user']->uid, $account->uid));
    }
  }
  return FALSE;
}


/**
 * Implements hook_field_access.
 */
function emh_user_field_access($op, $field, $entity_type, $entity, $account) {

  if ($op == 'view') {
    if (empty($entity)) {
      return TRUE;
    }

    if (empty($account)) {
      global $user;
      $account = $user;
    }

    if (isset($entity->uid) && ($account->uid == $entity->uid)) {
      return TRUE;
    }

    switch ($entity_type) {
      case 'user':
        switch($field['field_name']) {
          // We can always access few fields.
          case 'field_first_name':
          // case 'field_last_name':
          // case 'field_photo':
          case 'field_titre_metier':
          case 'field_employment_history':
          case 'field_entreprise':
          case 'field_sponsor_why':
          case 'field_partner_why':
            return TRUE;
          default:
            return emh_access_user_can_see_full_user($account->uid, $entity->uid);
        }
    }
  }

  return TRUE;
}


/**
 * Builds the profile purchase form.
 */
function emh_user_profile_purchase_form($form, &$form_state, $account) {
  global $user;

  // Checks if the account hasn't already been purchased.
  if (emh_access_user_can_see_full_user($user->uid, $account->uid)) {
    drupal_set_message(t("You have already access to this profile."), 'warning');
    drupal_goto('user/' . $account->uid);
  }

  $form_state['account'] = $account;

  if (isset($_GET['destination'])) {
    $options = drupal_parse_url(urldecode($_GET['destination']));
  } else {
    $options = array('path' => '<front>');
  }

  $amount = (int) variable_get('emh_user_profile_purchase_amount', 100);

  $form['confirmation'] = array(
    '#type' => 'item',
    '#markup' => t("Access !user's profile for !amount credits?", array(
      '!user' => emh_user_get_beautiful_firstname($account),
      '!amount' => $amount,
    )),
  );

  $form['actions'] = array(
    '#type' => 'actions',
    '#tree' => false,
    'cancel' => array(
      '#type' => 'link',
      '#title' => t("Cancel"),
      '#href' => $options['path'],
      '#options' => $options,
    ),
    'submit' => array(
      '#type' => 'submit',
      '#value' => t("Access profile"),
    ),
  );

  return $form;
}


/**
 * Validation callback for the profile purchase form.
 */
function emh_user_profile_purchase_form_validate($form, &$form_state) {
  global $user;
  if (!isset($user->emh_points)) {
    emh_points_entity_load_single($user, 'user');
  }
  if ($user->emh_points < (int) variable_get('emh_user_profile_purchase_amount', 100)) {
    form_error($form, t("You don't have enough credits to access !user's profile.", array(
      '!user' => emh_user_get_beautiful_firstname($form_state['account']),
    )));
  }
}


/**
 * Submit callback for the profile purchase form.
 */
function emh_user_profile_purchase_form_submit($form, &$form_state) {
  $account = $form_state['account'];

  try {
    emh_user_purchase_profile($account);

    drupal_set_message(t("You can now access !user's profile.", array(
      '!user' => emh_user_get_beautiful_firstname($account),
    )));
  }
  catch (\Exception $e) {
    drupal_set_message(t("!user's profile could not be purchased.", array(
      '!user' => emh_user_get_beautiful_firstname($account),
    )), 'error');
  }

  if (!isset($_GET['destination'])) {
    $form_state['redirect'] = 'user/' . $account->uid;
  }
}


/**
 * Implements hook_action_info().
 */
function emh_user_action_info() {
  $actions = array();

  $actions['emh_user_profile_purchase_action'] = array(
    'type' => 'entity',
    'label' => t('Access profiles'),
    'configurable' => false,
    'triggers' => array(),
    'permissions' => array('access user profiles'),
    'aggregate' => true,
    'behavior' => array('emh'),
  );

  return $actions;
}


/**
 * Action to purchase a profil.
 */
function emh_user_profile_purchase_action($entities, $context) {
  global $user;

  foreach ($entities as $entity) {
    if (empty($entity->uid) || $entity->uid == 1) {
      continue;
    }

    try {
      if (emh_access_user_can_see_full_user($user->uid, $entity->uid)) {
        continue;
      }
      emh_user_purchase_profile($entity->uid);
    }
    catch (\Exception $e) {
      drupal_set_message(t("!user's profile could not be purchased.", array(
        '!user' => emh_user_get_beautiful_firstname($entity->uid),
      )), 'error');
    }
  }
}


/**
 * Implements hook_form_alter().
 */
function emh_user_form_user_profile_form_alter(&$form, &$form_state, $form_id) {

  $form['account']['name']['#access'] = FALSE;

  unset($form['account']['roles']);
  unset($form['account']['current_pass']);
  unset($form['account']['current_pass_required_values']);
  $form['#validate'] = array_diff($form['#validate'], array('user_validate_current_pass'));
  $form['#submit'][] = '_emh_user_form_user_profile_handler';

}

/**
 * Implements hook_form_alter().
 */
function emh_user_form_change_pwd_page_form_alter(&$form, &$form_state, $form_id) {
  $form['#submit'][] = 'emh_user_form_change_pwd_page_form_submit';
}

function emh_user_form_change_pwd_page_form_submit($form, &$form_state) {
  $form_state['redirect'] = 'user/' . $form['#account']->uid;
}

/**
 * Implements hook_preprocess_status_messages().
 */
function emh_user_preprocess_status_messages(&$variables) {
  if (module_exists('user_registrationpassword')) {
    // https://api.drupal.org/comment/51793#comment-51793
    $message = 'You have just used your one-time login link. Your account is now active and you are authenticated.';
    if (isset($_SESSION['messages'])) {
      foreach ($_SESSION['messages'] as $type => $messages) {
        if ($type == 'status') {
          $pos = array_search($message, $messages);
          if ($pos !== FALSE) {
            unset($_SESSION['messages'][$type][$pos]);
            // http://dropbucket.org/node/547
            // Remove the empty status message wrapper if no other messages have been set.
            if (empty($_SESSION['messages'][$type])) {
              unset($_SESSION['messages'][$type]);
            }
          }
        }
      }
    }
  }
}


/**
 * Implements hook_form_alter().
 */
function emh_user_form_alter(&$form, &$form_state, $form_id) {
  switch ($form_id) {
    case 'user_login':
    case 'user_login_block':
      unset($form['#action']);
      $form['#submit'][] = 'emh_user_redirect_submit';
      break;
    case 'user_register_form_client':
    case 'user_register_form_expert':
      return $form;
      break;
    default:
      break;
  }
}

/**
 * Implements hook_block_view_MODULE_DELTA_alter().
 */
function emh_user_block_view_roleswitcher_switcher_alter(&$data, $block) {
  $data['content']['#theme'] = 'emh_user_roleswitcher_list';
  $roles = emh_user_roleswitcher_roles();
  $data['content']['#roles'] = $roles;
}

/**
 * Implements hook_theme().
 */
function emh_user_theme() {
  return array(
    'emh_user_roleswitcher_list' => array(
      'variables' => array('roles' => array(), 'attributes' => array()),
    )
  );
}

/**
 * Theme function for roles list.
 */
function theme_emh_user_roleswitcher_list($variables) {
  $output = '';
  $variables['attributes']['query']['destination'] = '<front>';
  $variables['attributes']['html'] = TRUE;
  foreach ($variables['roles'] as $rid => $name) {
    if ($name != 'roleswitcher') {
      if ($name == 'expert') {
        $output .= l('<span class="glyphicon glyphicon-refresh" aria-hidden="true"></span>&nbsp;&nbsp;' . t('Answer requests'), "roleswitcher/$rid", $variables['attributes']);
      }
      else if ($name == 'business') {
        $output .= l('<span class="glyphicon glyphicon-refresh" aria-hidden="true"></span>&nbsp;&nbsp;' . t('Submit requests'), "roleswitcher/$rid", $variables['attributes']);
      } else {
        $output .= l($name, "roleswitcher/$rid", $variables['attributes']);
      }
    }
  }
  return $output;
}

/**
 * Implements hook_forms().
 */
function emh_user_forms($form_id, $args) {
  $forms = array();
  switch ($form_id) {
    case 'user_register_form_client':
      $forms['user_register_form_client'] = array (
        'callback' => 'user_register_form',
      );
      break;
    case 'user_register_form_expert':
      $forms['user_register_form_expert'] = array (
        'callback' => 'user_register_form',
      );
      break;
    default:
      break;
  }
  return $forms;
}

/**
 * Implements hook_username_alter().
 */
function emh_user_username_alter(&$name, $account) {

  $name = emh_user_get_beautiful_realname($account);

}


// HELPERS
function _emh_user_form_user_profile_handler(&$form, &$form_state) {
  $path = $_SERVER['HTTP_REFERER'];
  if (isset($_GET['current'])) {            //if (isset($_GET['destination'])) {
    $path = $_GET['current'];             // $path = $_GET['destination'];
  }                                               // }
  // echo $path;
  $form_state['redirect'] = $path;
}

function emh_user_redirect_submit($form, &$form_state) {
  $form_state['redirect'] = url('<front>', array('absolute'=> true, 'language' =>  (object)array('language' =>  FALSE)));
}

/**
 * Helper function to get user realname instead of username.
 */
function emh_user_get_beautiful_realname($account) {

  global $user;
  $user1 = user_load($user->uid);
  $user2 = user_load($account->uid);

  $name = ''; $items = ''; $firstname = ''; $lastname = '';
  $items = field_get_items('user', $user2, 'field_first_name');
  $firstname = isset($items[0]['value']) ? check_plain(ucwords($items[0]['value'])) : '';

  if (module_exists('emh_access') && emh_access_user_can_see_full_user($user1->uid, $user2->uid)) {
    $items = field_get_items('user', $user2, 'field_last_name');
    $lastname = isset($items[0]['value']) ? check_plain(ucwords($items[0]['value'])) : '';
  }

  $name = !empty($firstname) ? $firstname : $account->name;
  $name .= !empty($lastname) ? ' ' . strtoupper($lastname) : '';

  return $name;

}

/**
 * Helper function to get user firstname.
 *
 * @param stdClass|integer $account
 *  A user account object or an uid
 * @return string
 *  The user's firstname
 */
function emh_user_get_beautiful_firstname($account) {
  if (is_numeric($account)) {
    $account = user_load($account);
  }

  $firstname = field_get_items('user', $account, 'field_first_name');
  if ($firstname) {
    return '<span class="author firstname">' . $firstname[0]['safe_value']  . '</span>';
  }

  return t('unknown');
}

/**
 * Helper function to check if current user has access to other user's realname.
 * TODO: remove this useless function!
 */
function emh_user_get_beautiful_author($node) {
  if (empty($node)) {
    $node = node_load(arg(1));
  }
  if (emh_access_author_name($node)) {
    return emh_user_get_beautiful_realname($node->uid);
  }
  else {
    return '<span class="author anonymous">' . t('Anonymous') . '</span>';
  }
}

/**
 * Helper function to check access to user profile url.
 * TODO: remove this useless function!
 */
function emh_user_get_beautiful_profile_link($uid) {
  global $user;
  $name = emh_user_get_beautiful_realname($uid);
  if (emh_access_user_can_see_full_user($user->uid, $uid)) {
    return '<a href="' . url('user/' . $uid) . '">' . $name . '</a>';
  }
  else {
    return $name;
  }
}

function emh_user_roleswitcher_roles() {
  $roles = array(
    'expert',
    'business',
  );
  $allowed_roles = array();
  foreach ($roles as $role) {
    $rid = user_role_load_by_name($role)->rid;
    $name = user_role_load_by_name($role)->name;
    $allowed_roles[$rid] = $name;
  }
  global $user;
  if (variable_get('roleswitcher_store_mode') == 'session' && !empty($_SESSION['roleswitcher_roles'])) {
    $user->roles = $_SESSION['roleswitcher_roles'];
  }
  $user_roles = $user->roles;
  // We unset current roles matching with allowed ones in order to propose only the other ones
  foreach ($user_roles as $user_role) {
    $rid = user_role_load_by_name($user_role)->rid;
    unset($allowed_roles[$rid]);
  }
  return $allowed_roles;
}

// TODO: add context, as 'author', etc.'
function emh_user_cartouche_view($uid, $context = NULL) {

  global $user;
  $uid1 = $user->uid;
  $uid2 = $uid;
  $u2_account = user_load($uid2);

	$node = menu_get_object();

  $cartouche = ''; $photo_uri = ''; $identity = ''; $organisation = ''; $activity = '';

	// Photo
  if (emh_access_user_can_see_full_user($uid1, $uid2)) {
  	$photo_uri = field_get_items('user', $u2_account, 'field_photo');
    $photo = field_view_field('user', $u2_account, 'field_photo', array('label'=>'hidden'));
    $cartouche .= '<span class="user-badge"><a href="' . url('user/' . $uid2) . '">' . render($photo) . '</a></span>';
  } else {
    $instance = field_info_instance('user', 'field_photo', 'user');
    if ( !empty($instance) && isset($instance['settings']['default_image']) && $instance['settings']['default_image'] > 0 ) {
      $photo_fid = $instance['settings']['default_image'];
      $photo = file_load($photo_fid);
      $photo = array(
        'path' => $photo->uri,
      );
      $cartouche .= '<span class="user-badge">' . theme_image($photo) . '</span>';
    }
  }

	// Identity
  $firstname = field_get_items('user', $u2_account, 'field_first_name');
  $firstname = isset($firstname[0]['value']) ? check_plain(ucwords($firstname[0]['value'])) : '';
  $lastname = field_get_items('user', $u2_account, 'field_last_name');
  $lastname = isset($lastname[0]['value']) ? check_plain(ucwords($lastname[0]['value'])) : '';

  if ($context == 'author' && !(emh_request_has_option($node, 'anonymous') && $node->field_hide_name[LANGUAGE_NONE][0]['value'] == true)) {
    $identity = $firstname . ' ' . strtoupper($lastname);
  }
  else {
    $identity = format_username($u2_account);
    if (emh_request_has_option($node, 'anonymous') && $node->field_hide_name[LANGUAGE_NONE][0]['value'] == true) {
      $identity = t('Anonymous');
    }
  }
  if (emh_access_user_can_see_full_user($uid1, $uid2) && !(emh_request_has_option($node, 'anonymous') && $node->field_hide_name[LANGUAGE_NONE][0]['value'] == true)) {
    $identity = '<a href="' . url('user/' . $uid2) . '">' . $identity . '</a>';
  }
  $cartouche .= '<span class="user-identity">' . $identity . '</a>';

	// Organisation
	$organisation = field_get_items('user', $u2_account, 'field_entreprise');
  if (!empty($organisation)) {
    $organisation = field_view_field('user', $u2_account, 'field_entreprise', array('label'=>'hidden'));
    if (
          ($context == 'author' && !(emh_request_has_option($node, 'anonymous')))
      ||  ($context == 'author' && (emh_request_has_option($node, 'anonymous') && ($node->field_hide_organisation[LANGUAGE_NONE][0]['value'] == false)))
      ||  ($context != 'author' && (emh_access_user_can_see_full_user($uid1, $uid2)))
    ) {
      $cartouche .= '<span class="user-organisation">' . render($organisation) . '</span>';
    }
  }

  // Activity
	$activity = field_get_items('node', $node, 'field_activity');
	if (($context == 'author') && emh_request_has_option($node, 'anonymous') && !empty($activity)) {
    $activity = field_view_field('node', $node, 'field_activity', array('label'=>'hidden'));
		$cartouche .= '<span class="user-activity">' . render($activity) . '</span>';
	}

	// Buy profile access
	if (!emh_access_user_can_see_full_user($uid1, $uid2) && !($context == 'author')) {
    $amount = (int) variable_get('emh_user_profile_purchase_amount', 100);
		$cartouche .= '<a href="' . url("user/$uid2/purchase") . '?destination=node/' . $node->nid . '" class="user-buy-access">' . t('Access profile for ' . $amount . ' credits') . '</a>';
	}

  // Self cartouche
  // if ($uid1 === $uid2) {
  //   $cartouche .= '<span class="user-self"><a href="' . url('user/' . $uid2) . '">' . t('It\'s you :)') . '</a></span>';
  // }

  if ($cartouche) {
    return '<div class="user-cartouche">' . $cartouche . '</div>';
  }

}

/**
 * Purchases an user profile for the current user.
 *
 * @param stdClass|integer $account
 *  Either an user object or a uid
 */
function emh_user_purchase_profile($account) {
  try {
    $transaction = db_transaction();

    global $user;

    if (is_numeric($account)) {
      $account = user_load($account);
    }

    // Spends user's credits
    $amount = (int) variable_get('emh_user_profile_purchase_amount', 100);
    emh_points_move_points($user, $account, $amount);

    // Flags the account to add it in the user's relationships
    $flag = flag_get_flag('my_contacts');
    $flag->flag('flag', $account->uid, $user, true);

    unset($transaction);
  }
  catch (\Exception $e) {
    if ($transaction) {
      try {
        $transaction->rollback();
      }
      catch (\Exception $e2) {
        watchdog_exception('emh_user', $e2);
      }

      watchdog_exception('emh_user', $e);
      throw $e;
    }
  }
}
