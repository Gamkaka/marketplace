<?php
/**
 * @file
 * Code for eMindHub Profiles feature.
 */

include_once 'emh_user.theme.inc';

/**
 * Implements hook_permission().
 */
function emh_user_permission() {
  return array(
    'access EMH profiles' => array('title' => t('Profile: View full users profiles')),
  );
}

/**
 * Implements hook_theme().
 */
function emh_user_theme() {
  return array(
    'emh_user_cartouche' => array(
      'template' => 'emh-user-cartouche',
      'path' => drupal_get_path('module', 'emh_user') . '/theme',
      'variables' => array(
        'context' => NULL,
        'user_profile_link' => NULL,
        'identity' => NULL,
        'photo' => NULL,
        'organisation' => NULL,
        'activity' => NULL,
        'address' => NULL,
        'mail' => NULL,
        'user_purchase_link' => NULL,
        'amount' => NULL,
        'submission_count' => NULL,
        'purchased_count' => NULL,
      ),
    ),
    'emh_user_badge' => array(
      'template' => 'emh-user-badge',
      'path' => drupal_get_path('module', 'emh_user') . '/theme',
      'variables' => array(
        'user_profile_link' => NULL,
        'identity' => NULL,
        'photo' => NULL,
      ),
    ),
  );
}

/**
 * Implements hook_views_api().
 */
function emh_user_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'emh_user') . '/views',
  );
}

/**
 * Implements hook_menu_alter().
 */
function emh_user_menu_alter(&$items) {
  $items['user/%user']['access callback'] = 'emh_user_view_access';
  $items['user/%user']['access arguments'] = array(1);
  $items['user/%user/hybridauth']['access callback'] = FALSE;
  $items['user/%user/edit']['title'] = t('Edit account');
  $items['user/%user/change-password']['title'] = t('Change password');
}

/**
 * User view access callback.
 *
 * @param $account
 *   Can either be a full user object or a $uid.
 */
function emh_user_view_access($account) {
  $uid = is_object($account) ? $account->uid : (int) $account;

  // Never allow access to view the anonymous user account.
  if ($uid) {
    // Admins can view all, users can view own profiles at all times.
    if ($GLOBALS['user']->uid == $uid || user_access('administer users')) {
      return TRUE;
    }
    elseif (user_access('access user profiles')) {
      // At this point, load the complete account object.
      if (!is_object($account)) {
        $account = user_load($uid);
      }
      return (is_object($account) && $account->status && emh_access_user_can_see_full_user($GLOBALS['user']->uid, $account->uid));
    }
  }
  return FALSE;
}


/**
 * Implements hook_field_access.
 */
function emh_user_field_access($op, $field, $entity_type, $entity, $account) {
  if ($op == 'view') {
    if (empty($entity)) {
      return TRUE;
    }

    if (empty($account)) {
      global $user;
      $account = $user;
    }

    if (isset($entity->uid) && ($account->uid == $entity->uid)) {
      return TRUE;
    }

    switch ($entity_type) {
      case 'user':
        switch($field['field_name']) {
          // We can always access few fields.
          case 'field_first_name':
          case 'field_entreprise':
            return TRUE;
          default:
            return emh_access_user_can_see_full_user($account->uid, $entity->uid);
        }
    }
  }

  return TRUE;
}

/**
 * Implements hook_form_alter().
 */
function emh_user_form_alter(&$form, &$form_state, $form_id) {
  switch ($form_id) {
    case 'user_login':
    case 'user_login_block':
      unset($form['#action']);

      // Smart Mobility trick
      global $base_url;
      $form['#action'] = url('<front>', array(
        'base_url' => $base_url,
        'absolute' => TRUE,
        'language' => (object) array('language' => FALSE),
      ));

      $form['#submit'][] = 'emh_user_login_form_submit';
      break;
  }
}

/**
 * Submit callback for the user login form.
 */
function emh_user_login_form_submit($form, &$form_state) {
  global $base_url;
  $form_state['redirect'] = url('<front>', array('base_url' => $base_url, 'absolute' => TRUE, 'language' => (object) array('language' => FALSE)));
}

/**
 * Implements hook_form_alter().
 */
function emh_user_form_user_profile_form_alter(&$form, &$form_state, $form_id) {
  $form['account']['name']['#access'] = FALSE;

  $form['field_address'][LANGUAGE_NONE][0]['street_block']['thoroughfare']['#required'] = FALSE;
  $form['field_address'][LANGUAGE_NONE][0]['street_block']['premise']['#required'] = FALSE;

  $form['field_address'][LANGUAGE_NONE][0]['locality_block']['dependent_locality']['#required'] = FALSE;
  $form['field_address'][LANGUAGE_NONE][0]['locality_block']['locality']['#required'] = FALSE;
  $form['field_address'][LANGUAGE_NONE][0]['locality_block']['administrative_area']['#required'] = FALSE;
  $form['field_address'][LANGUAGE_NONE][0]['locality_block']['postal_code']['#required'] = FALSE;

  $form['field_address'][LANGUAGE_NONE][0]['country']['#required'] = TRUE;

  $form['field_address'][LANGUAGE_NONE][0]['phone_block']['phone_number']['#required'] = FALSE;
  $form['field_address'][LANGUAGE_NONE][0]['phone_block']['mobile_number']['#required'] = FALSE;

  unset($form['account']['roles']);
  unset($form['account']['current_pass']);
  unset($form['account']['current_pass_required_values']);
  $form['#validate'] = array_diff($form['#validate'], array('user_validate_current_pass'));
  $form['#submit'][] = 'emh_user_form_user_profile_submit';
}

function emh_user_form_user_profile_submit(&$form, &$form_state) {
  $path = $_SERVER['HTTP_REFERER'];
  if (isset($_GET['current'])) {
    $path = $_GET['current'];
  }
  $form_state['redirect'] = $path;
}

/**
 * Implements hook_form_alter().
 */
function emh_user_form_change_pwd_page_form_alter(&$form, &$form_state, $form_id) {
  $form['#submit'][] = 'emh_user_form_change_pwd_page_form_submit';
}

function emh_user_form_change_pwd_page_form_submit($form, &$form_state) {
  $form_state['redirect'] = 'user/' . $form['#account']->uid;
}

/**
 * Implements hook_preprocess_status_messages().
 */
function emh_user_preprocess_status_messages(&$variables) {
  if (module_exists('user_registrationpassword')) {
    // https://api.drupal.org/comment/51793#comment-51793
    $message = 'You have just used your one-time login link. Your account is now active and you are authenticated.';
    if (isset($_SESSION['messages'])) {
      foreach ($_SESSION['messages'] as $type => $messages) {
        if ($type == 'status') {
          $pos = array_search($message, $messages);
          if ($pos !== FALSE) {
            unset($_SESSION['messages'][$type][$pos]);
            // http://dropbucket.org/node/547
            // Remove the empty status message wrapper if no other messages have been set.
            if (empty($_SESSION['messages'][$type])) {
              unset($_SESSION['messages'][$type]);
            }
          }
        }
      }
    }
  }
}

/**
 * Implements hook_username_alter().
 */
function emh_user_username_alter(&$name, $account) {
  $name = emh_user_get_beautiful_realname($account);
}

/**
 * Helper function to get user realname instead of username.
 */
function emh_user_get_beautiful_realname($account) {
  global $user;
  $user1 = user_load($user->uid);
  $user2 = user_load($account->uid);

  $name = ''; $items = ''; $firstname = ''; $lastname = '';
  $items = field_get_items('user', $user2, 'field_first_name');
  $firstname = isset($items[0]['value']) ? check_plain(ucwords($items[0]['value'])) : '';

  if (module_exists('emh_access') && emh_access_user_can_see_full_user($user1->uid, $user2->uid)) {
    $items = field_get_items('user', $user2, 'field_last_name');
    $lastname = isset($items[0]['value']) ? check_plain(ucwords($items[0]['value'])) : '';
  }

  $name = !empty($firstname) ? $firstname : $account->name;
  $name .= !empty($lastname) ? ' ' . strtoupper($lastname) : '';

  return $name;
}

/**
 * Helper function to get user firstname.
 *
 * @param stdClass|integer $account
 *  A user account object or an uid
 * @return string
 *  The user's firstname
 */
function emh_user_get_beautiful_firstname($account) {
  if (is_numeric($account)) {
    $account = user_load($account);
  }

  $firstname = field_get_items('user', $account, 'field_first_name');
  if ($firstname) {
    return '<span class="author firstname">' . $firstname[0]['safe_value']  . '</span>';
  }

  return t('unknown');
}

/**
 * Helper function to check if current user has access to other user's realname.
 * TODO: remove this useless function!
 */
function emh_user_get_beautiful_author($node) {
  if (empty($node)) {
    $node = node_load(arg(1));
  }
  if (emh_access_author_name($node)) {
    return emh_user_get_beautiful_realname($node->uid);
  }
  else {
    return '<span class="author anonymous">' . t('Anonymous') . '</span>';
  }
}

/**
 * Helper function to check access to user profile url.
 * TODO: remove this useless function!
 */
function emh_user_get_beautiful_profile_link($uid) {
  global $user;
  $name = emh_user_get_beautiful_realname($uid);
  if (emh_access_user_can_see_full_user($user->uid, $uid)) {
    return '<a href="' . url('user/' . $uid) . '">' . $name . '</a>';
  }
  else {
    return $name;
  }
}
