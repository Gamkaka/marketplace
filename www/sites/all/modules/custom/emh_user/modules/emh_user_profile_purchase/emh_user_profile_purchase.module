<?php

/**
 * @file
 * TODO: description.
 */

const EMH_USER_PROFILE_PURCHASE_TXN_CONTEXT = 'profile_buy';

include_once 'emh_user_profile_purchase.admin.inc';

/**
 * Implements hook_menu().
 */
function emh_user_profile_purchase_menu() {
  $items = array();

  $items['user/%user/purchase'] = array(
    'title' => 'Buy profile access',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('emh_user_profile_purchase_form', 1),
    'access callback' => 'user_view_access',
    'access arguments' => array(1),
    'type' => MENU_CALLBACK,
  );

  $items['user/%user/purchase/%node'] = array(
    'title' => 'Buy profile access',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('emh_user_profile_purchase_form', 1, 3),
    'access callback' => 'user_view_access',
    'access arguments' => array(1),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Builds the profile purchase form.
 */
function emh_user_profile_purchase_form($form, &$form_state, $account, $node) {
  if (module_exists('ethereum')) {
    $web3_local = variable_get('ethereum_web3_local_injection');
    $library = libraries_load('web3');

    if (! (($web3_local && $library && !empty($library['loaded'])) || !$web3_local) ) {
      $form['Error'] = array('#markup' => "Web3.js could not be loaded, ethereum wont work. You should be able to use the site normally though. Contact your adminsitrator");
      //return $form;
    }
  }

  global $user;

  // Checks if the account hasn't already been purchased.
  if (emh_access_user_can_see_full_user($user->uid, $account->uid)) {
    drupal_set_message(t("You have already access to this profile."), 'warning');
    drupal_goto('user/' . $account->uid);
  }

  $form_state['account'] = $account;
  $form_state['node'] = $node;

  if (isset($_GET['destination'])) {
    $options = drupal_parse_url(urldecode($_GET['destination']));
  }
  else {
    $options = array('path' => '<front>');
  }

  $amount = (int) variable_get('emh_user_profile_purchase_amount', 100);

  $form['confirmation'] = array(
    '#type' => 'item',
    '#markup' => '<p><span id="buy-title">' . t("Access !user's profile for !amount credits ?", array(
      '!user' => format_username($account),
      '!amount' => $amount,
    )) . '</span></p>'
		. '<p class="emh-credits-buy">' . t('Do you need more credits? Please contact us at <a href="mailto:credits@emindhub.com?Subject=Credits%20needed%20by%20!current_user&Body=Your%20company%3A%0AYour%20position%3A%0APhone%20number%3A%0AAmount%20of%20credits%20needed%3A">credits@emindhub.com</a>', array(
					'!current_user' => format_username($user),
		)) . '</p>',
  );

  $form['info'] = array('#markup' => "<div id='ethereum-info'></div>");

  $form['actions'] = array(
    '#type' => 'actions',
    '#tree' => FALSE,
    'cancel' => array(
      '#type' => 'link',
      '#title' => t("Cancel"),
      '#href' => $options['path'],
      '#options' => $options,
    ),
    'submit' => array(
      '#type' => 'submit',
      '#value' => t("Access profile"),
    ),
  );

  if (module_exists('ethereum')) {
    $_user = user_load($user->uid);
    $_account = user_load($account->uid);
    _ethereum_smartcontract_load('token_erc20');
    _ethereum_smartcontract_load('register_drupal');
    drupal_add_js(array(
      'emh_blockchain' => array(
        'clientHash' => $_user->hash,
        'clientAddress' => $_user->ethereum_address['und'][0]['ethereum_address'],
        'expertHash' => $_account->hash,
        'expertAddress' => $_account->ethereum_address['und'][0]['ethereum_address'],
        'clientName' => emh_user_get_beautiful_realname($_user),
        'expertName' => emh_user_get_beautiful_realname($_account),
      ),
    ), 'setting');

    drupal_add_js(drupal_get_path('module', 'emh_user_profile_purchase').'/js/buffer.js');
    drupal_add_js(drupal_get_path('module', 'emh_user_profile_purchase').'/js/keythereum.min.js');
    drupal_add_js(drupal_get_path('module', 'emh_user_profile_purchase').'/js/lodash.min.js');
    drupal_add_js(drupal_get_path('module', 'emh_user_profile_purchase').'/js/ethereumjs-tx-1.3.3.min.js');
    drupal_add_js(drupal_get_path('module', 'emh_user_profile_purchase').'/js/ethereum_buy_profile.js');
    //$form['info'] = array('#markup' => $_account->ethereum_user_address['und'][0]['ethereum_address']);
  }

  return $form;
}

/**
 * Submit callback for the profile purchase form.
 */
function emh_user_profile_purchase_form_submit($form, &$form_state) {
  $account = $form_state['account'];
  $node = $form_state['node'];
  try {
    emh_user_profile_purchase($account, $node);

    drupal_set_message(t("You can now access !user's profile.", array(
      '!user' => format_username($account),
    )));
  }
  catch (\Exception $e) {
    drupal_set_message(t("!user's profile could not be purchased.", array(
      '!user' => format_username($account),
    )), 'error');
  }

  if (!isset($_GET['destination'])) {
    $form_state['redirect'] = 'user/' . $account->uid;
  }
}

/**
 * Validation callback for the profile purchase form.
 */
function emh_user_profile_purchase_form_validate($form, &$form_state) {
  global $user;
  if (!isset($user->emh_points)) {
    emh_points_entity_load_single($user, 'user');
  }
  if ($user->emh_points < (int) variable_get('emh_user_profile_purchase_amount', 100)) {
    form_error($form, t("You don't have enough credits to access !user's profile.", array(
      '!user' => format_username($form_state['account']),
    )));
  }
}

/**
 * Implements hook_action_info().
 */
function emh_user_profile_purchase_action_info() {
  $actions = array();

  $actions['emh_user_profile_purchase_action'] = array(
    'type' => 'entity',
    'label' => t('Access profiles'),
    'configurable' => FALSE,
    'triggers' => array(),
    'permissions' => array('access user profiles'),
    'aggregate' => TRUE,
    'behavior' => array('emh'),
  );

  return $actions;
}

/**
 * Action to purchase a profile.
 */
function emh_user_profile_purchase_action($entities, $context) {
  global $user;

  foreach ($entities as $entity) {
    if (empty($entity->uid) || $entity->uid == 1) {
      continue;
    }

    try {
      if (emh_access_user_can_see_full_user($user->uid, $entity->uid)) {
        continue;
      }
      emh_user_profile_purchase($entity->uid, NULL);
    }
    catch (\Exception $e) {
      drupal_set_message(t("!user's profile could not be purchased.", array(
        '!user' => format_username($entity->uid),
      )), 'error');
    }
  }
}

/**
 * Purchases an user profile for the current user.
 *
 * @param object|int $account
 *   Either an user object or a uid.
 */
function emh_user_profile_purchase($account, $node = NULL) {
  try {
    $transaction = db_transaction();

    global $user;

    if (is_numeric($account)) {
      $account = user_load($account);
    }

    // Spends user's credits.
    $amount = (int) variable_get('emh_user_profile_purchase_amount', 100);

    if ($node != NULL) {
      $log = t('!source buy !destination profile on "!title" request',
                  array(
                      '!source' => emh_points_format_entity($user),
                      '!destination' => emh_points_format_entity($account),
                      '!title' => $node->title,
                  ));
      emh_points_move_points($user, $account, $amount, EMH_USER_PROFILE_PURCHASE_TXN_CONTEXT, NULL, $log, $node->nid);
    } else emh_points_move_points($user, $account, $amount, EMH_USER_PROFILE_PURCHASE_TXN_CONTEXT);

    // Flags the account to add it in the user's relationships.
    $flag = flag_get_flag('my_contacts');
    $flag->flag('flag', $account->uid, $user, TRUE);

    // Increment profile counter.
    emh_user_profile_purchase_increment_counter($account);

    // Notify user its profile has been purchased.
    emh_user_profile_purchase_notify_user_profile_purchased($account, $amount);

    unset($transaction);
  }
  catch (\Exception $e) {
    if ($transaction) {
      try {
        $transaction->rollback();
      }
      catch (\Exception $e2) {
        watchdog_exception('emh_user_profile_purchase', $e2);
      }

      watchdog_exception('emh_user_profile_purchase', $e);
      throw $e;
    }
  }
}

/**
 * Send email to user's profile purchased.
 */
function emh_user_profile_purchase_notify_user_profile_purchased($user, $credits) {
  $module = 'emh_user_profile_purchase';
  $key = 'notify_user';
  $mail = $user->mail;
  $language = language_default();
  $piwik_tracking = 'pk_campaign=' . $key . '_' . $user->uid;
  $ga_tracking = 'utm_medium=email&utm_source=' . $key . '&utm_campaign=' . $key . '_' . $user->uid;
  $params = array(
    '@url' => url('credits?' . $piwik_tracking . '&' . $ga_tracking, array('absolute' => TRUE)),
    '@user_firstname' => $user->field_first_name[LANGUAGE_NONE][0]['value'],
    '@credits' => $credits,
    '@threshold' => variable_get('emh_points_monetization_threshold', '1500'),
  );
  drupal_mail($module, $key, $mail, $language, $params);
}

/**
 * Implements hook_mail().
 */
function emh_user_profile_purchase_mail($key, &$message, $params) {
  switch ($key) {
    case 'notify_user':
      $message['subject'] = t('Your profile has been selected!', $params);
      $message['body'] = array();
      $message['body'][] = t('Dear @user_firstname,', $params);
      $message['body'][] = t('Your profile has been selected by a requestor and you earned @credits credits! The requestor may now get in touch with you for further support.', $params);
      $message['body'][] = t('We remind you that you can monetize your credits once you have reached a threshold of @threshold credits.', $params);
      $message['body'][] = t('Should you like to know more, just log into the platform now.');
      $message['body'][] = '<table style="min-width:100%;" width="100%" border="0" cellpadding="0" cellspacing="0" class="emailButton">
        <tbody>
          <tr>
            <td style="padding-top:0;padding-right:18px;padding-bottom:18px;padding-left:18px;" valign="top" align="center">
              <table style="border-collapse:separate!important;border-radius:0px;background-color:rgb(0,159,227);" border="0" cellpadding="0" cellspacing="0">
                <tbody>
                  <tr>
                    <td style="font-family:Arial;font-size:16px;padding:15px;color:rgb(255, 255, 255);" valign="middle" align="center">
                      <a href="' . t('@url', $params) . '&amp;pk_kwd=calltoaction&amp;utm_content=cta" title="' . t('Log in to eMindHub') . '" target="_blank" style="font-weight:bold!important;letter-spacing:normal;line-height:100%;text-align:center;text-decoration:none;color:#FFFFFF!important;">' . t('Log in to eMindHub') . ' </a>
                    </td>
                  </tr>
                </tbody>
              </table>
            </td>
          </tr>
        </tbody>
      </table>';
      break;

    default:
      break;
  }
}

/**
 * Increment custom field of user's profile purchased.
 */
function emh_user_profile_purchase_increment_counter($account) {
  $user_wrapper = entity_metadata_wrapper('user', $account);
  $var = $user_wrapper->field_profile_purchased->value() + 1;
  $user_wrapper->field_profile_purchased->set($var);
  $user_wrapper->save();
}

/**
 * Get user purchase count.
 *
 * @param object $account
 *
 * @return int
 */
function emh_user_profile_purchase_get_count($account) {
  $field_profile_purchased = field_get_items('user', $account, 'field_profile_purchased');
  $purchased_count = $field_profile_purchased[0]['value'] ? $field_profile_purchased[0]['value'] : '0';

  return $purchased_count;
}
