<?php
/**
 * @file
 * Virality's features.
 */

/**
 * Maximum of invitations that an user can send at the same time.
 */
define('VIRAL_INVITATIONS_MAX', 10);

const EMH_VIRALITY_TXN_CONTEXT_USER_SPONSOR = 'user_sponsor';

//----------------------------------------------------------------------
//-- MENU & PERMISSIONS
//----------------------------------------------------------------------


/**
 * Implements hook_menu().
 */
function emh_virality_menu() {
  $items = [];

  // Route for the form page of the current user
  $items['invitations'] = [
    'title' => 'Invitations',
    'page callback' => 'emh_virality_block_view',
    'access callback' => 'emh_virality_user_history_access',
  ];

  // Route for the invitation page of the current user
  $items['my-referrals'] = [
    'title' => 'Referral',
    'page callback' => 'emh_virality_show_user_history',
    'access callback' => 'emh_virality_user_history_access',
  ];

  return $items;
}


/**
 * Implements hook_permission().
 */
function emh_virality_permission() {
  return [
    'invite experts' => ['title' => t('Invite Experts')],
    'view others invitations history' => ['title' => t('View others invitations history')],
  ];
}

/**
 * Access callback for the invitations history page.
 */
function emh_virality_user_history_access($account = NULL) {
  global $user;

  // If the user tries to access its own invitations history (/invitations)
  if ($account == NULL) {
    if (user_access('invite experts')) {
      return TRUE;
    }
  } // If the user tries to access the invitations history of a specific user (/user/%/invitations)
  else {
    if ($account->uid == $user->uid) {
      return TRUE;
    }
    if (user_access('view others invitations history')) {
      return TRUE;
    }
  }

  return FALSE;
}


//----------------------------------------------------------------------
//-- ENTITIES
//----------------------------------------------------------------------


/**
 * Implements hook_entity_info().
 */
function emh_virality_entity_info() {
  $entities = [];

  // Defines the emh_invitation entity
  $entities['emh_invitation'] = [
    'label' => t('Invitation'),
    'entity class' => 'EmhInvitation',
    'controller class' => 'EntityAPIController',
    'base table' => 'emh_invitation',
    'fieldable' => FALSE,
    'entity keys' => ['id' => 'invitation_id'],
  ];

  return $entities;
}


/**
 * Loads a single invitation entity.
 */
function emh_invitation_load($id, $reset = FALSE) {
  $entity = entity_load('emh_invitation', [$id], [], $reset);
  return !empty($entity) ? reset($entity) : NULL;
}


/**
 * Loads multiple invitation entities.
 */
function emh_invitation_load_multiple($ids = FALSE, $conditions = [], $reset = FALSE) {
  return entity_load('emh_invitation', $ids, $conditions, $reset);
}


//----------------------------------------------------------------------
//-- BLOCKS
//----------------------------------------------------------------------


/**
 * Implements hook_block_info().
 */
function emh_virality_block_info() {
  $blocks = [];

  $blocks['invitation_form'] = [
    'info' => t('Virality - Invitation form'),
    'status' => 1,
    'region' => 'content',
    'weight' => -100,
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'pages' => "invitations",
    'cache' => DRUPAL_CACHE_PER_ROLE,
  ];

  return $blocks;
}


/**
 * Implements hook_block_view().
 */
function emh_virality_block_view($delta = '') {
  $block = [];

  switch ($delta) {
    case 'invitation_form':
      if (!user_is_logged_in()) {
        break;
      }

      $reward = _emh_virality_get_invitation_reward();

      if ($reward > 0) {
        $text = 'You can earn credits by inviting <b>experts</b> in your network to join eMindHub and answer clients requests. You will get a reward (' . variable_get('emh_virality_expert_invitation_reward', 50) . ' credits per expert) the first time each the new expert you sponsored is selected by a client for the quality of his contribution.<br />'
          . 'We remind you that you can monetize your credits once you have reached a threshold of at least ' . variable_get('emh_points_monetization_threshold', '1500') . ' credits.';

        $block = [
          'subject' => t('Invite experts and earn credits!'),
          'content' => [
            'text' => [
              '#theme' => 'html_tag',
              '#tag' => 'p',
              '#value' => t($text, ['!amount' => $reward]),
            ],
            'form' => drupal_get_form('emh_virality_invitation_form'),
          ],
        ];
      }
      break;
  }

  return $block;
}


//----------------------------------------------------------------------
//-- POINTS
//----------------------------------------------------------------------


/**
 * Implements hook_move_points_after().
 *
 * @int $txn_id ID of the transaction
 * @param array $transaction
 * @param stdClass $source
 * @param stdClass $destination
 *
 * @see emh_points_move_points()
 */
function emh_virality_move_points_after($txn_id, $transaction, $source, $destination) {
  // If some credits moved from node to user
  if ($transaction['source_type'] == 'user' && $transaction['dest_type'] == 'user') {
    $query = db_select('emh_invitation', 'i')
      ->fields('i', ['invitation_id'])
      ->condition('referral_id', $destination->uid)
      ->condition('status', EmhInvitation::STATUS_WAITING)
      ->orderBy('created_at', 'ASC')
      ->range(0, 1);

    $invitation_id = $query->execute()->fetchField();

    if ($invitation_id) {
      $invitation = emh_invitation_load($invitation_id);

      try {
        $db_trans = db_transaction('invitation_reward');

        // Updates the invitation status
        $invitation->status = EmhInvitation::STATUS_VALIDATED;
        $invitation->save();

        // Rewards the referrer
        $referrer = user_load($invitation->referrer_id);

        $log_vars = [
          '@referrer' => emh_points_format_entity($referrer),
          '@id' => $invitation->invitation_id,
        ];

        emh_points_give_points($referrer, [
          'points' => _emh_virality_get_invitation_reward($referrer),
          'log' => t('eMindHub rewards @referrer for a validated invitation', $log_vars),
          'txn_context' => EMH_VIRALITY_TXN_CONTEXT_USER_SPONSOR,
        ]);
      } catch (Exception $e) {
        $db_trans->rollback();
        watchdog('emh_virality', 'The reward processus for a viral invitation failed: @error', ['@error' => $e->getMessage()], WATCHDOG_ERROR);
      }
    }
  }
}


//----------------------------------------------------------------------
//-- FORMS
//----------------------------------------------------------------------


/**
 * Builds the invitation form.
 */
function emh_virality_invitation_form($form, &$form_state) {
  $parameters = drupal_get_query_parameters();
  //if (isset($parameters['request']) || $form_state['submitted']) {

  if (isset($parameters['request'])) {
    if (emh_virality_is_request_all_experts($parameters['request'])) {
      $nid = $parameters['request'];
    }
  }
  /* elseif (isset($_SESSION['invite_expert_request'])) {
     $nid = $_SESSION['invite_expert_request'];
   }*/

  if (isset($nid) && is_numeric($nid)) {

    $node = node_load($nid);
    //$_SESSION['invite_expert_request'] = $nid;
    if ($node && $node->type == 'request') {
      $form_state['request_nid'] = $node->nid;

      $form['sponsorship_request'] = [
        '#markup' => '<h3>' . $node->title . '</h3>',
      ];
    }

  }

  if (isset($form_state['id_remove'])) {
    $id_remove = $form_state['id_remove'];
    $tab_expert = $form_state['values']['sponsorship_fieldset']['expert'];
    unset($tab_expert[$id_remove]);
    $form_state['values']['sponsorship_fieldset']['expert'] = array_merge([], $tab_expert);
  }

  $form['#tree'] = TRUE;
  $form['#attached']['css'] = [
    drupal_get_path('module', 'emh_virality') . '/theme/emh_virality.css',
  ];
  $form['sponsorship_fieldset'] = [
    '#prefix' => '<div id="sponsorship-fieldset-wrapper">',
    '#suffix' => '</div>',
  ];

  if (empty($form_state['num_experts'])) {
    $form_state['num_experts'] = 1;
  }
  for ($i = 0; $i < $form_state['num_experts']; $i++) {

    $form['sponsorship_fieldset']['expert'][$i] = [
      '#tree' => TRUE,
      '#type' => 'fieldset',
      '#title' => t('Invitation'),
      '#prefix' => '<div id="invite-expert-wrapper">',
      '#suffix' => '</div>',
    ];

    $form['sponsorship_fieldset']['expert'][$i]['last_name'] = [
      '#type' => 'textfield',
      '#title' => t('Last Name'),
      '#required' => TRUE,
      '#validated' => TRUE,
      '#prefix' => '<div class="sponsorship-fieldset-last-name">',
      '#suffix' => '</div>',
    ];
    $form['sponsorship_fieldset']['expert'][$i]['first_name'] = [
      '#type' => 'textfield',
      '#title' => t('First Name'),
      '#required' => TRUE,
      '#validated' => TRUE,
      '#prefix' => '<div class="sponsorship-fieldset-first-name">',
      '#suffix' => '</div>',
    ];
    $form['sponsorship_fieldset']['expert'][$i]['mail'] = [
      '#type' => 'textfield',
      '#title' => t('Mail'),
      '#required' => TRUE,
      '#validated' => TRUE,
      '#prefix' => '<div class="sponsorship-fieldset-mail">',
      '#suffix' => '</div>',
    ];
    $form['sponsorship_fieldset']['expert'][$i]['message'] = [
      '#type' => 'textarea',
      '#title' => t('Message'),
      '#prefix' => '<div class="sponsorship-fieldset-message">',
      '#suffix' => '</div>',
    ];

    $form['sponsorship_fieldset']['expert'][$i]['remove_name'] = [
      '#type' => 'submit',
      '#value' => t('Remove'),
      '#name' => 'op' . $i,
      '#submit' => ['emh_virality_add_more_remove_one'],
      '#prefix' => '<div class="sponsorship-button-remove">',
      '#suffix' => '</div>',
      '#ajax' => [
        'callback' => 'emh_virality_remove_callback',
        'wrapper' => 'sponsorship-fieldset-wrapper',
        'parameters' => ['param1' => $i],
      ],
    ];


  }
  $form['sponsorship_fieldset']['add_expert'] = [
    '#type' => 'submit',
    '#value' => t('Add one more'),
    '#id' => 'emh-virality-button-add-more-expert',
    '#submit' => ['emh_virality_add_more_add_one'],
    '#ajax' => [
      'callback' => 'emh_virality_add_more_callback',
      'wrapper' => 'sponsorship-fieldset-wrapper',
    ],
  ];

  //}
  /*else {
    emh_virality_form_email($form);
  }*/
  //}
  /*else {
    emh_virality_form_email($form);
  }*/

  //}
  /*else {
    emh_virality_form_email($form);
  }*/

  $form['submit'] = [
    '#type' => 'submit',
    '#value' => t('Send invitation'),
    '#id' => 'emh-virality-send-invitation',
  ];

  return $form;
}

/*
function emh_virality_form_email(&$form) {
  $form['emails'] = [
    '#type' => 'textarea',
    '#title' => t('Emails'),
    '#required' => TRUE,
    '#attributes' => [
      'placeholder' => t('Add emails separated by comma'),
    ],
  ];
}*/

function emh_virality_is_empty_add_one_expert($expert_form) {
  if (empty(trim($expert_form['last_name']))
    && empty(trim($expert_form['first_name']))
    && empty(trim($expert_form['mail']))) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Validation callback of the invitation form.
 */
function emh_virality_invitation_form_validate($form, &$form_state) {

  $values = $form_state['values'];

  if (isset($form_state['triggering_element'])) {
    $button = $form_state['triggering_element']['#value'];

    switch ($button) {
      case 'Send invitation' :

        $experts = $values['sponsorship_fieldset']['expert'];

        $nb_expert_empty = 0;
        for ($i = 0; $i < $form_state['num_experts']; $i++) {
          $is_empty = emh_virality_is_empty_add_one_expert($experts[$i]);
          $form_state['values']['sponsorship_fieldset']['expert'][$i]['is_empty'] = $is_empty;

          if ($is_empty) {
            $nb_expert_empty++;
          }

          if (!$is_empty || $nb_expert_empty == $form_state['num_experts']) {
            $last_name = $form['sponsorship_fieldset']['expert'][$i]['last_name'];
            $first_name = $form['sponsorship_fieldset']['expert'][$i]['first_name'];
            $mail = $form['sponsorship_fieldset']['expert'][$i]['mail'];

            $last_name['#validated'] = FALSE;
            $first_name['#validated'] = FALSE;
            $mail['#validated'] = FALSE;

            emh_virality_validation_field($last_name, $form_state);
            emh_virality_validation_field($first_name, $form_state);
            emh_virality_validation_field($mail, $form_state);

          }
        }

        break;

    }
  }
  /*if (isset($values['emails'])) {
    $emails = explode(',', $values['emails']);

    if (count($emails) > VIRAL_INVITATIONS_MAX) {
      form_set_error('emails', t('You can not send more than !max invitations at the same time', ['!max' => VIRAL_INVITATIONS_MAX]));
    }

    foreach ($emails as $email) {
      if (($email = trim($email)) && (!valid_email_address($email))) {
        form_set_error('emails', t('This email is not valid: @email', ['@email' => $email]));
      }
    }
  }*/

  if (isset($values['sponsorship_fieldset'])) {
    $experts = $values['sponsorship_fieldset']['expert'];

    if (count($experts) > VIRAL_INVITATIONS_MAX) {
      form_set_error('emails', t('You can not send more than !max invitations at the same time', ['!max' => VIRAL_INVITATIONS_MAX]));
    }

    foreach ($experts as $expert) {
      $email = $expert['mail'];
      if (($email = trim($email)) && (!valid_email_address($email))) {
        form_set_error('emails', t('This email is not valid: @email', ['@email' => $email]));
      }
    }

  }


}

/**
 * See _form_validate()
 *
 * @param $elements
 * @param $form_state
 */
function emh_virality_validation_field(&$elements, &$form_state) {
  // Validate the current input.
  if (!isset($elements['#validated']) || !$elements['#validated']) {
    // The following errors are always shown.
    if (isset($elements['#needs_validation'])) {
      // Verify that the value is not longer than #maxlength.
      if (isset($elements['#maxlength']) && drupal_strlen($elements['#value']) > $elements['#maxlength']) {
        form_error($elements, t('!name cannot be longer than %max characters but is currently %length characters long.', [
          '!name' => empty($elements['#title']) ? check_plain($elements['#parents'][0]) : $elements['#title'],
          '%max' => $elements['#maxlength'],
          '%length' => drupal_strlen($elements['#value']),
        ]));
      }

      if (isset($elements['#options']) && isset($elements['#value'])) {
        if ($elements['#type'] == 'select') {
          $options = form_options_flatten($elements['#options']);
        }
        else {
          $options = $elements['#options'];
        }
        if (is_array($elements['#value'])) {
          $value = in_array($elements['#type'], [
            'checkboxes',
            'tableselect',
          ]) ? array_keys($elements['#value']) : $elements['#value'];
          foreach ($value as $v) {
            if (!isset($options[$v])) {
              form_error($elements, t('An illegal choice has been detected. Please contact the site administrator.'));
              watchdog('form', 'Illegal choice %choice in !name element.', [
                '%choice' => $v,
                '!name' => empty($elements['#title']) ? $elements['#parents'][0] : $elements['#title'],
              ], WATCHDOG_ERROR);
            }
          }
        }
        // Non-multiple select fields always have a value in HTML. If the user
        // does not change the form, it will be the value of the first option.
        // Because of this, form validation for the field will almost always
        // pass, even if the user did not select anything. To work around this
        // browser behavior, required select fields without a #default_value get
        // an additional, first empty option. In case the submitted value is
        // identical to the empty option's value, we reset the element's value
        // to NULL to trigger the regular #required handling below.
        // @see form_process_select()
        elseif ($elements['#type'] == 'select' && !$elements['#multiple'] && $elements['#required'] && !isset($elements['#default_value']) && $elements['#value'] === $elements['#empty_value']) {
          $elements['#value'] = NULL;
          form_set_value($elements, NULL, $form_state);
        }
        elseif (!isset($options[$elements['#value']])) {
          form_error($elements, t('An illegal choice has been detected. Please contact the site administrator.'));
          watchdog('form', 'Illegal choice %choice in %name element.', [
            '%choice' => $elements['#value'],
            '%name' => empty($elements['#title']) ? $elements['#parents'][0] : $elements['#title'],
          ], WATCHDOG_ERROR);
        }
      }
    }

    // While this element is being validated, it may be desired that some calls
    // to form_set_error() be suppressed and not result in a form error, so
    // that a button that implements low-risk functionality (such as "Previous"
    // or "Add more") that doesn't require all user input to be valid can still
    // have its submit handlers triggered. The triggering element's
    // #limit_validation_errors property contains the information for which
    // errors are needed, and all other errors are to be suppressed. The
    // #limit_validation_errors property is ignored if submit handlers will run,
    // but the element doesn't have a #submit property, because it's too large a
    // security risk to have any invalid user input when executing form-level
    // submit handlers.
    if (isset($form_state['triggering_element']['#limit_validation_errors']) && ($form_state['triggering_element']['#limit_validation_errors'] !== FALSE) && !($form_state['submitted'] && !isset($form_state['triggering_element']['#submit']))) {
      form_set_error(NULL, '', $form_state['triggering_element']['#limit_validation_errors']);
    }
    // If submit handlers won't run (due to the submission having been triggered
    // by an element whose #executes_submit_callback property isn't TRUE), then
    // it's safe to suppress all validation errors, and we do so by default,
    // which is particularly useful during an Ajax submission triggered by a
    // non-button. An element can override this default by setting the
    // #limit_validation_errors property. For button element types,
    // #limit_validation_errors defaults to FALSE (via system_element_info()),
    // so that full validation is their default behavior.
    elseif (isset($form_state['triggering_element']) && !isset($form_state['triggering_element']['#limit_validation_errors']) && !$form_state['submitted']) {
      form_set_error(NULL, '', []);
    }
    // As an extra security measure, explicitly turn off error suppression if
    // one of the above conditions wasn't met. Since this is also done at the
    // end of this function, doing it here is only to handle the rare edge case
    // where a validate handler invokes form processing of another form.
    else {
      drupal_static_reset('form_set_error:limit_validation_errors');
    }

    // Make sure a value is passed when the field is required.
    if (isset($elements['#needs_validation']) && $elements['#required']) {
      // A simple call to empty() will not cut it here as some fields, like
      // checkboxes, can return a valid value of '0'. Instead, check the
      // length if it's a string, and the item count if it's an array.
      // An unchecked checkbox has a #value of integer 0, different than string
      // '0', which could be a valid value.
      $is_empty_multiple = (!count($elements['#value']));
      $is_empty_string = (is_string($elements['#value']) && drupal_strlen(trim($elements['#value'])) == 0);
      $is_empty_value = ($elements['#value'] === 0);
      if ($is_empty_multiple || $is_empty_string || $is_empty_value) {
        // Although discouraged, a #title is not mandatory for form elements. In
        // case there is no #title, we cannot set a form error message.
        // Instead of setting no #title, form constructors are encouraged to set
        // #title_display to 'invisible' to improve accessibility.
        if (isset($elements['#title'])) {
          form_error($elements, t('!name field is required.', ['!name' => $elements['#title']]));
        }
        else {
          form_error($elements);
        }
      }
    }

    // Call user-defined form level validators.
    if (isset($form_id)) {
      form_execute_handlers('validate', $elements, $form_state);
    }
    // Call any element-specific validators. These must act on the element
    // #value data.
    elseif (isset($elements['#element_validate'])) {
      foreach ($elements['#element_validate'] as $function) {
        $function($elements, $form_state, $form_state['complete form']);
      }
    }
    $elements['#validated'] = TRUE;
  }
}


/**
 * Submit callback of the invitation form.
 */
function emh_virality_invitation_form_submit($form, &$form_state) {

  global $user;
  $values = $form_state['values'];

  $emails = [];
  // Cleans the received emails list
  /*if (isset($values['emails'])) {
    $emails = explode(',', $values['emails']);
  }
  elseif (isset($values['sponsorship_fieldset'])) {
    $emails = $values['sponsorship_fieldset']['expert'];
  }*/
  if (isset($values['sponsorship_fieldset'])) {
    $emails = $values['sponsorship_fieldset']['expert'];
  }

  $valid_emails = [];
  foreach ($emails as $email) {

    /*if (isset($values['sponsorship_fieldset'])) {
      $email_expert = $email['mail'];
    }
    else {
      $email_expert = $email;
    }*/

    if (isset($email['is_empty']) && !$email['is_empty']) {
      $email_expert = $email['mail'];

      if ($email_expert = trim($email_expert)) {
        /*if (isset($values['sponsorship_fieldset'])) {
          $email['mail'] = $email_expert;
        }*/
        $email['mail'] = $email_expert;
        $valid_emails[] = $email_expert;
      }
    }

  }

  // Retrieves the emails already used by users
  $query = db_select('users', 'u')
    ->fields('u', ['mail'])
    ->condition('mail', $valid_emails, 'IN');

  // TODO:this may represents thousands (millions?) of email, some day... hope we'll get 25Go of RAM per PHP process
  // to handle that...
  $user_emails = $query->execute()->fetchCol();

  // Retrieves the emails already invited
  // TODO: same thing here...
  // TODO: create temporary table, with index on that table, let MySQl check with joins which records should be removed
  // this way no record is loaded into the PHP memory.
  $query = db_select('emh_invitation', 'i')
    ->fields('i', ['referral_mail'])
    ->condition('referral_mail', $valid_emails, 'IN');

  $invited_emails = $query->execute()->fetchCol();

  // Records each invitation if:
  // - the email doesn't already exist in the users table
  // - the email hasn't already been invited
  $recorded_emails = [];

  foreach ($emails as $email) {

    if (isset($email['is_empty']) && !$email['is_empty']) {

      $mail = NULL;
      if (isset($values['sponsorship_fieldset'])) {
        $mail = $email['mail'];
      }
      /*else {
        $mail = $email;
      }*/


      if (in_array($mail, $user_emails)) {
        // SECURITY: check user is present on site ? should I know that?
        drupal_set_message(t('@email is already registered on eMindHub, the invitation hasn\'t been sent', ['@email' => $mail]), 'warning');
        continue;
      }

      if (in_array($mail, $invited_emails)) {
        drupal_set_message(t('@email has already been invited, the invitation hasn\'t been sent', ['@email' => $mail]), 'warning');
        continue;
      }

      try {

        $request = NULL;
        $message = NULL;
        $params = NULL;
        $language = 'en';
        if (isset($form_state['request_nid']) &&
          ($node = emh_virality_is_request_all_experts($form_state['request_nid']))) {

          //request sponsorship
          $request = $form_state['request_nid'];
          $language = $node->language;
          $params = [
            'nid' => $request,
          ];

          //choose template email
          if (!empty($email['message'])) {
            $template_email = 'emh_sponsorship_request';
            $message = $email['message'];
          }
          else {
            $template_email = 'emh_sponsorship_request_without_message';
          }
        }
        else {
          //general sponsorhip
          if (!empty($email['message'])) {
            $template_email = 'emh_sponsorship_general';
            $message = $email['message'];
          }
          else {
            $template_email = 'emh_sponsorship_general_without_message';
          }
        }

        //if (isset($values['sponsorship_fieldset'])) {
        $invitation = new EmhInvitation([
          'referrer_id' => $user->uid,
          'referral_mail' => $mail,
          'created_at' => time(),
          'request_id' => $request,
          'referral_firstname' => $email['first_name'],
          'referral_lastname' => $email['last_name'],
          'message' => $message,
        ]);

        $invitation->save();

        //prepare template to send email
        pet_send_mail($template_email, [
          [
            'mail' => $mail,
            'uid' => $user->uid,
            'first_name' => $email['first_name'],
            'last_name' => $email['last_name'],
            'referrer_message' => $message,
          ],
        ],
          $params, $language);


        /*}
        else {
          $invitation = new EmhInvitation([
            'referrer_id' => $user->uid,
            'referral_mail' => $email,
            'created_at' => time(),
            'request_id' => $request,
          ]);
        }*/


        $recorded_emails[] = check_plain($mail);
      } catch (Exception $e) {
        $text = t('Invitation recording failed: @error', ['@error' => $e->getMessage()]);
        watchdog('emh_virality', $text);
      }
    }


  }

  // Displays a success message if some invitations have been recorded
  if (count($recorded_emails)) {
    $record_list = theme('item_list', [
      '#theme' => 'item_list',
      '#items' => $recorded_emails,
    ]);

    // Special indentation for to fix a bug from the module coder review.
    drupal_set_message(t(
      'You just sent invitations to: !emails',
      ['!emails' => $record_list]
    ));
  }
}


/**
 * Implements hook_form_alter().
 */
function emh_virality_form_alter(&$form, &$form_state, $form_id) {
  // Forms placed in the invitations history page must be submitted to the "/invitations"
  // url if the user is currently viewing its own history
  if (drupal_match_path(current_path(), 'invitations')) {
    global $user;
    $account = menu_get_object('user');
    ddl('je suis là');
    if ($user->uid == $account->uid) {
      $form['#action'] = url('my-referrals');
      $form['#submit'][] = 'emh_virality_invitations_history_forms_submit';
    }
  }
}


/**
 * Additional submit callback for forms placed in the invitations history
 * page.
 */
function emh_virality_invitations_history_forms_submit($form, &$form_state) {
  $form_state['redirect'] = 'my-referrals';
}

/**
 * Additional submit callbacks for to add and remove an user form.
 */
function emh_virality_add_more_add_one($form, &$form_state) {
  $form_state['num_experts']++;
  $form_state['rebuild'] = TRUE;
}

function emh_virality_remove_callback($form, $form_state) {
  $form_expert = $form['sponsorship_fieldset']['expert'];
  $experts = $form_state['values']['sponsorship_fieldset']['expert'];
  //replace value into textfield
  for ($i = 0; $i < $form_state['num_experts']; $i++) {
    $form_expert[$i]['last_name']['#value'] = $experts[$i]['last_name'];
    $form_expert[$i]['first_name']['#value'] = $experts[$i]['first_name'];
    $form_expert[$i]['mail']['#value'] = $experts[$i]['mail'];
    $form_expert[$i]['message']['#value'] = $experts[$i]['message'];
  }
  $form['sponsorship_fieldset']['expert'] = $form_expert;
  return $form['sponsorship_fieldset'];
}

function emh_virality_add_more_callback($form, $form_state) {
  return $form['sponsorship_fieldset'];
}

function emh_virality_add_more_remove_one($form, &$form_state) {
  if (isset($form_state['id_remove'])) {
    unset($form_state['id_remove']);
  }

  if ($form_state['triggering_element']) {
    $form_state['id_remove'] = $form_state['triggering_element']['#ajax']['parameters']['param1'];
  }

  if ($form_state['num_experts'] > 1) {
    $form_state['num_experts']--;
  }
  $form_state['rebuild'] = TRUE;
}

//----------------------------------------------------------------------
//-- USERS
//----------------------------------------------------------------------


/**
 * Implements hook_user_insert().
 */
function emh_virality_user_insert(&$edit, $account, $category) {
  // If the user is already enabled
  if ($account->status == 1 && in_array('expert', $account->roles)) {
    // Changes status from "sent" to "registered"
    // and sets the referral ID
    db_update('emh_invitation')
      ->fields([
        'updated_at' => time(),
        'referral_id' => $account->uid,
        'status' => EmhInvitation::STATUS_REGISTERED,
      ])
      ->condition('referral_mail', $account->mail)
      ->condition('status', EmhInvitation::STATUS_SENT)
      ->execute();
  }
}


/**
 * Implements hook_user_update().
 */
function emh_virality_user_update(&$edit, $account, $category) {
  // If the user has been enabled
  if ($account->status == 1 && $account->original->status == 0 && in_array('expert', $account->roles)) {
    // Changes status from "sent" to "registered"
    // and sets the referral ID
    db_update('emh_invitation')
      ->fields([
        'updated_at' => time(),
        'referral_id' => $account->uid,
        'status' => EmhInvitation::STATUS_REGISTERED,
      ])
      ->condition('referral_mail', $account->mail)
      ->condition('status', EmhInvitation::STATUS_SENT)
      ->execute();
  }
}

/**
 * Implements hook_webform_submission_insert().
 */
function emh_virality_webform_submission_insert($node, $submission) {

  // If the node is a request and answer no draft
  if ($node->type == 'request' && !$submission->is_draft) {
    // Changes status from "registered" to "waiting"
    $user = user_load($submission->uid);
    db_update('emh_invitation')
      ->fields([
        'updated_at' => time(),
        'status' => EmhInvitation::STATUS_WAITING,
      ])
      ->condition('referral_mail', $user->mail)
      ->condition('status', EmhInvitation::STATUS_REGISTERED)
      ->execute();
  }
}

/**
 * Implements hook_webform_submission_update().
 */
function emh_virality_webform_submission_update($node, $submission) {

  // If the node is a request and answer no draft
  if ($node->type == 'request' && !$submission->is_draft) {
    // Changes status from "registered" to "waiting"
    $user = user_load($submission->uid);
    db_update('emh_invitation')
      ->fields([
        'updated_at' => time(),
        'status' => EmhInvitation::STATUS_WAITING,
      ])
      ->condition('referral_mail', $user->mail)
      ->condition('status', EmhInvitation::STATUS_REGISTERED)
      ->execute();
  }
}


//----------------------------------------------------------------------
//-- TOKENS
//----------------------------------------------------------------------


/**
 * Implements hook_token_info().
 */
function emh_virality_token_info() {
  $tokens = [];

  $tokens['tokens']['emh_invitation']['referrer-firstname'] = [
    'name' => t('Referrer firstname'),
    'description' => t('Invitation referrer firstname'),
    'type' => 'text',
    'entity-token' => TRUE,
  ];

  $tokens['tokens']['emh_invitation']['referrer-lastname'] = [
    'name' => t('Referrer lastname'),
    'description' => t('Invitation referrer lastname'),
    'type' => 'text',
    'entity-token' => TRUE,
  ];

  $tokens['tokens']['emh_invitation']['referral-firstname'] = [
    'name' => t('Referral firstname'),
    'description' => t('Invitation referral firstname'),
    'type' => 'text',
    'entity-token' => TRUE,
  ];

  $tokens['tokens']['emh_invitation']['referral-lastname'] = [
    'name' => t('Referral lastname'),
    'description' => t('Invitation referral lastname'),
    'type' => 'text',
    'entity-token' => TRUE,
  ];

  return $tokens;
}


/**
 * Implements hook_tokens().
 */
function emh_virality_tokens($type, $tokens, array $data = [], array $options = []) {
  $replacements = [];


  if ($type == 'emh_invitation') {
    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'referrer-firstname':
          $invitation = $data['emh_invitation'];
          $referrer = user_load($invitation->referrer_id);
          $firstname = field_get_items('user', $referrer, 'field_first_name');
          $replacements[$original] = empty($firstname[0]['safe_value']) ? '' : trim($firstname[0]['safe_value']);
          break;

        case 'referrer-lastname':
          $invitation = $data['emh_invitation'];
          $referrer = user_load($invitation->referrer_id);
          $lastname = field_get_items('user', $referrer, 'field_last_name');
          $replacements[$original] = empty($lastname[0]['safe_value']) ? '' : trim($lastname[0]['safe_value']);
          break;

        case 'referral-firstname':
          $invitation = $data['emh_invitation'];
          $firstname = $invitation->referral_first_name;
          $replacements[$original] = empty($firstname) ? '' : trim($firstname);

          break;

        case 'referral-lastname':
          $invitation = $data['emh_invitation'];
          $lastname = $invitation->referral_last_name;
          $replacements[$original] = empty($lastname) ? '' : trim($lastname);
          break;
      }
    }
  }

  return $replacements;
}

/**
 * Implements hook_pet_substitutions_alter().
 */
function emh_virality_pet_substitutions_alter(&$substitutions, $params) {
  // Make my tokens available to PET
  if (isset($params['pet_recipients'][0]['last_name'])) {
    $substitutions['emh_invitation'] = (object) [
      'referrer_id' => $params['pet_uid'],
      'referral_last_name' => $params['pet_recipients'][0]['last_name'],
      'referral_first_name' => $params['pet_recipients'][0]['first_name'],
      'message' => $params['pet_recipients'][0]['referrer_message'],
    ];
  }
}


//----------------------------------------------------------------------
//-- MISC
//----------------------------------------------------------------------


function emh_virality_show_user_history($account = NULL) {
  global $user;
  global $base_url;

  if ($account == NULL) {
    $account = $user;
  }

  $query = db_select('emh_invitation', 'i')
    ->extend('PagerDefault')
    ->element(2)
    ->fields('i', [])
    ->condition('referrer_id', $account->uid)
    ->orderBy('updated_at', 'DESC')
    ->limit(30);

  $invitations = $query->execute()->fetchAll(PDO::FETCH_OBJ);

  $rows = [];
  foreach ($invitations as $invitation) {
    // Prepares status
    switch ($invitation->status) {
      case EmhInvitation::STATUS_SENT:
        $status = t('Invited');
        break;
      case EmhInvitation::STATUS_REGISTERED:
        $status = t('Registered');
        break;
      case EmhInvitation::STATUS_WAITING:
        $status = t('Answered to a request');
        break;
      case EmhInvitation::STATUS_VALIDATED:
        $status = t('Validated');
        break;
    }

    $request = NULL;
    if (isset($invitation->request_id)) {
      $node = node_load($invitation->request_id);
      $request = '<a href="' . $base_url . '/node/' . $invitation->request_id . '">'
        . $node->title . '<a/>';
    }
    else {
      $request = "You did not recommand " . $invitation->referral_firstname . " for a specific request";
    }

    $rows[] = [
      $invitation->referral_mail,
      format_date($invitation->updated_at, 'short_date'),
      $request,
      $status,
    ];
  }

  $build = [];

  $build['title'] = [
    '#theme' => 'html_tag',
    '#tag' => 'h2',
    '#value' => t('Invitations statement'),
  ];

  $text = 'You can earn credits by inviting <b>experts</b> in your network to join eMindHub and answer clients requests. You will get a reward (' . variable_get('emh_virality_expert_invitation_reward', 50) . ' credits per expert) the first time each the new expert you sponsored is selected by a client for the quality of his contribution.<br />'
    . 'We remind you that you can monetize your credits once you have reached a threshold of at least ' . variable_get('emh_points_monetization_threshold', '1500') . ' credits.';

  $build['text'] = [
    '#theme' => 'html_tag',
    '#tag' => 'p',
    '#value' => t($text),
  ];

  $build['table'] = [
    '#theme' => 'table',
    '#header' => [t('Email'), t('Date'), t('Request'), t('Status')],
    '#rows' => $rows,
    '#empty' => t('No invitation.'),
  ];

  $build['pager'] = [
    '#theme' => 'pager',
    '#element' => 2,
  ];

  drupal_alter('invitations_history_page', $build, $account);

  return $build;
}


//----------------------------------------------------------------------
//-- HELPERS
//----------------------------------------------------------------------


function _emh_virality_get_invitation_reward($account = NULL) {
  if ($account == NULL) {
    global $user;
    $account = $user;
  }

  if (in_array('business', $account->roles)) {
    return variable_get('emh_virality_business_invitation_reward', 0);
  }
  elseif (in_array('expert', $account->roles)) {
    return variable_get('emh_virality_expert_invitation_reward', 0);
  }

  return 0;
}

function emh_virality_user_is_referrer($referral, $referrer = NULL) {
  if (empty($referrer)) {
    global $user;
    $referrer = $user->uid;
  }
  $query = db_select('emh_invitation', 'i')
    ->fields('i', ['invitation_id'])
    ->condition('referrer_id', $referrer)
    ->condition('referral_id', $referral)
    ->condition('status', EmhInvitation::STATUS_VALIDATED);
  $referring = $query->execute()->fetchField();
  if (!empty($referring)) {
    return TRUE;
  }
  return FALSE;
}


//----------------------------------------------------------------------
//-- REQUEST
//----------------------------------------------------------------------

/*
 * Implements hook_node_view().
 */
function emh_virality_node_view($node, $view_mode, $langcode) {
  global $base_url;
  switch ($node->type) {
    case 'request' :
      if (emh_virality_is_request_all_experts($node->nid)) {
        $node->content['sponsorship'] = [
          '#attributes' => [
            'class' => [
              'btn',
              'btn-flash',
              'icon-user',

            ],
            'id' => [
              'btn-sponsorship',
            ],
            'href' => [
              $base_url . '/' . drupal_get_path_alias('invitations') . '?request=' . $node->nid,
            ],
          ],
          '#attached' => [
            'css' => [
              drupal_get_path('module', 'emh_virality') . '/theme/emh_virality.css',
            ],
          ],
          '#theme' => 'html_tag',
          '#tag' => 'a',
          '#value' => t('Recommand an expert'),
        ];
      }

      break;
  }
}

/**
 * If the node is "All Experts".
 *
 * @param $nid Nid of node
 *
 * @return bool|mixed
 */
function emh_virality_is_request_all_experts($nid) {

  $node = node_load($nid);
  if ($node && $node->type == 'request') {
    if (isset($node->og_group_ref['und'])) {
      $circles = $node->og_group_ref['und'];
      foreach ($circles as $circle) {

        //Circles "All Experts" => nid 314
        if ($circle['target_id'] == '314') {
          return $node;
        }
      }
    }

  }


  return FALSE;
}
