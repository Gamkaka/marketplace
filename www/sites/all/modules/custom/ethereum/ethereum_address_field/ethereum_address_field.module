<?php

/**
 * @file
 * Ethereum address field module.
 *
 * Provides an Ethereum address field.
 */

const ETHEREUM_ADDRESS_FIELD_EXPLORER = 'https://etherscan.io/address/';

/**
 * Implements hook_field_info().
 */
function ethereum_address_field_field_info() {
  return array(
    'ethereum_address' => array(
      'label' => t('Ethereum address'),
      'description' => t('Ethereum address.'),
      'settings' => array('max_length' => 42),
      'instance_settings' => array(
        'text_processing' => 0,
      ),
      'default_widget' => 'ethereum_address_text',
      'default_formatter' => 'ethereum_address_text',
      'property_type' => 'text',
    ),
  );
}

/**
 * Implements hook_field_validate().
 */
function ethereum_address_field_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
  foreach ($items as $delta => $item) {
    if (!empty($item['ethereum_address'])) {
      if (!preg_match('/^0x[0-9a-f]{40}/is', $item['ethereum_address'])) {
        $errors[$field['field_name']][$langcode][$delta][] = array(
          'error' => 'ethereum_address_invalid',
          'message' => t('Ethereum addresses must begin with "0x" and 40 hexadecimals characters must follow.'),
        );
      }
    }
  }
}

/**
 * Implements hook_field_is_empty().
 */
function ethereum_address_field_field_is_empty($item, $field) {
  return empty($item['ethereum_address']);
}

/**
 * Implements hook_field_formatter_info().
 */
function ethereum_address_field_field_formatter_info() {
  return array(
    'ethereum_address_text' => array(
      'label' => t('Plain text'),
      'field types' => array('ethereum_address'),
    ),
    'ethereum_address_link' => array(
      'label' => t('Link to Etherscan.io'),
      'field types' => array('ethereum_address'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function ethereum_address_field_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  switch ($display['type']) {

    case 'ethereum_address_text':
      foreach ($items as $delta => $item) {
        $element[$delta] = array(
          '#markup' => $item['ethereum_address'],
        );
      }
      break;

    case 'ethereum_address_link':
      foreach ($items as $delta => $item) {
        $element[$delta] = array(
          '#type' => 'html_tag',
          '#tag' => 'a',
          '#value' => $item['ethereum_address'],
          '#attributes' => array(
            'href' => ETHEREUM_ADDRESS_FIELD_EXPLORER . $item['ethereum_address'],
            'target' => '_blank',
          ),
        );
      }
      break;
  }

  return $element;
}

/**
 * Implements hook_field_widget_info().
 */
function ethereum_address_field_field_widget_info() {
  return array(
    'ethereum_address_text' => array(
      'label' => t('Text'),
      'field types' => array('ethereum_address'),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 */
function ethereum_address_field_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $value = isset($items[$delta]['ethereum_address']) ? $items[$delta]['ethereum_address'] : '';

  $widget = $element;
  $widget['#delta'] = $delta;

  switch ($instance['widget']['type']) {

    case 'ethereum_address_text':
      $widget += array(
        '#type' => 'textfield',
        '#default_value' => $value,
        '#size' => 42,
        '#maxlength' => 42,
      );
      break;
  }

  $element['ethereum_address'] = $widget;
  return $element;
}

/**
 * Implements hook_field_widget_error().
 */
function ethereum_address_field_field_widget_error($element, $error, $form, &$form_state) {
  switch ($error['error']) {
    case 'ethereum_address_invalid':
      form_error($element, $error['message']);
      break;
  }
}
