<?php

/**
 * @file
 * Ethereum user.
 *
 * Allows users to sign a User Registry contract on Ethereum.
 */

/**
 * Implements hook_menu().
 */
function ethereum_user_menu() {
  $items = array();

  $items['admin/config/people/ethereum'] = array(
    'title' => 'Ethereum',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ethereum_user_admin_form'),
    'access arguments' => array('access administration pages'),
    'file' => 'ethereum_user.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  $items['ethereum'] = array(
    'title' => 'Ethereum',
    'page callback' => 'ethereum_main',
    'access arguments' => array('ethereum user'),
    'menu_name' => 'user-menu',
    'type' => MENU_NORMAL_ITEM,
  );

  //$items['user/%user/ethereum'] = array(
  $items['ethereum/user'] = array(
  //$items['ethereum/user/%user'] = array(
    'title' => 'Ethereum user',
    'page callback' => '_ethereum_user',
    'access arguments' => array('ethereum user'),
    //'page arguments' => array(2),
    //'access callback' => 'user_is_logged_in',
    //'access arguments' => array(2),
    'menu_name' => 'user-menu',
    //'type' => MENU_LOCAL_TASK,
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

function ethereum_main() { return ''; }

/**
 * Implements hook_permission().
 */
function ethereum_user_permission() {
  return array(
    'ethereum user' => array('title' => t('Use Ethereum')),
  );
}

/**
 * Implements hook_form().
 */
function ethereum_user_form($form, &$form_state) {
  $form = array();
  global $user;
  $account = user_load($user->uid);
  $form['ethereum_user_address'] = array(
    '#title' => t('Ethereum address'),
    '#title_display' => 'invisible',
    '#type' => 'textfield',
    '#size' => 42,
    '#maxlength' => 42,
    '#default_value' => $account->ethereum_user_address['und'][0]['ethereum_address'], //'TODO: default value, form validation and user field save',
    '#description' => t('Ethereum addresses must begin with 0x and 40 hexadecimals characters must follow.'),
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Submit',
  );

  $form['#attached']['css'] = array(
    drupal_get_path('module', 'ethereum_user') . '/css/ethereum_user_form.css',
  );

  $form['#attached']['js'] = array(
    drupal_get_path('module', 'ethereum_user') . '/js/ethereum_user_form.js',
  );

  return $form;
}

/**
 * Implements hook_form_submit().
 */
function ethereum_user_form_submit($form, &$form_state) {
  $address = $form_state['input']['ethereum_user_address'];
  global $user;
  $account = user_load($user->uid);
  $account->ethereum_user_address['und'][0]['ethereum_address'] = $address;
  user_save($account);
}

/**
 * Tab for /user/UID/ethereum.
 *
 * @object $this_user: User beeing viewed (UID), not necessarly the current user.
 */
function _ethereum_user(/*$this_user*/) {

  // Current user (who is viewing $this_user, an admin or the same person).
  global $user;
  $this_user = $user;

  // TODO: better check (if $user_viewed exists, ...)
  if (!is_numeric($this_user->uid)) {
    drupal_access_denied();
    return;
  }
  elseif ($user->uid != $this_user->uid && !user_access('administrate users')) {
    drupal_access_denied();
    return;
  }
  elseif (!$web3_local && !$library = libraries_load('web3') || !$web3_local) {
    drupal_access_denied();
    return;
  }
  else {

    // User can access the tab and there is a Web3 instance with account.
    // TODO: better check: is there really an injected Web3 lib & account?
    $output = array();

    $this_user_wrapper = entity_metadata_wrapper('user', $this_user);
    $this_user_ethereum_address = $this_user_wrapper->ethereum_user_address->value();

    // Ethereum user address.
    $address = '<div id="ethereum_user_address">';
    $address .= '<h2>' . t('Ethereum address') . '</h2>';
    $address .= '<p>';
    $address .= $this_user_ethereum_address ? $this_user_ethereum_address : t('Please add your Ethereum address');
    $address .= ' <a href="#">' . t('edit') . '</a>';
    $address .= '</p>';
    $address .= '</div>';
    $output['ethereum_user_address'] = array(
      '#type' => 'markup',
      '#markup' => $address,
    );
    $output['ethereum_user_address_form'] = drupal_get_form('ethereum_user_form');

    if ($this_user_ethereum_address) {

      // User registry check.
      $loader = theme_image(array('path' => drupal_get_path('module', 'ethereum_user') . '/img/puff.svg'));
      $registry = '<div id="ethereum_user_registry">';
      $registry  .= '<h2>' . t('Ethereum user registry') . '</h2>';
      $registry  .= '<div id="ethereum_user_registry_wait"><p>' . t('Please wait while we check if you are in our user registry on Ethereum...') . '</p><p>' . $loader . '</p></diV>';
      $registry  .= '<p id="ethereum_user_registry_validated">' . t('Yes, you are in our Ethereum user registry!') . '</p>';
      $register_link = ($user->uid == $this_user->uid) ? '<a href="#">' . t('To use Ethereum features with us, please sign our user registry.') . '</a>' : t('User did not sign the registry and you can not do it as an admin');
      $registry  .= '<p id="ethereum_user_registry_sign">' . $register_link . '</p>';
      $registry  .= '</div>';
      $output['ethereum_user_registry'] = array(
        '#type' => 'markup',
        '#markup' => $registry,
        '#attached' => array(
          'css' => array(
            drupal_get_path('module', 'ethereum_user') . '/css/ethereum_user_registry.css',
          ),
          'js' => array(
            drupal_get_path('module', 'ethereum_user') . '/contracts/ethereum_user_register_drupal/js/ethereum_user_register_drupal.js',
          ),
        ),
      );

      // Generate user hash, if necessary.
      if (!$this_user->hash) {
        $data = array(
          '@name' => $this_user->name,
          '!id' => $this_user->uid,
        );
        $hash = user_hash_generate();
        $this_user = user_save($this_user, array('hash' => $hash));
      }

      // Pass variables to JS.
      drupal_add_js(array(
        'ethereum_user' => array(
          'contract' => array(
            'address' => variable_get('ethereum_user_register_drupal_deployed_contract_address'),
            'abi' => variable_get('ethereum_user_register_drupal_deployed_contract_abi'),
          ),
          'fallback_node' => variable_get('ethereum_user_register_drupal_fallback_node'),
          'user' => array(
            'hash' => $this_user->hash,
            'address' => $this_user_ethereum_address,
          ),
        ),
      ), 'setting');
    }
    return $output;
  }
}
