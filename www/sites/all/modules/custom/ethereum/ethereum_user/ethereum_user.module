<?php

/**
 * @file
 * Ethereum user.
 *
 * Allows users to sign a User Registry contract on Ethereum.
 */

/**
 * Implements hook_menu().
 */
function ethereum_user_menu() {
  $items = array();

  $items['admin/config/ethereum/registry'] = array(
    'title' => 'Users registry',
    'description' => 'Ethereum users registry.',
    'page callback' => '_ethereum_user_registry_list',
    'access arguments' => array('administer site configuration'),
    'file' => 'ethereum_user.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/config/ethereum/registry/callback/%/%'] = array(
    'page callback' => '_ethereum_user_registry_list_callback',
    'page arguments' => array(5),
    'access callback' => '_ethereum_user_registry_list_callback_access',
    'access arguments' => array(5, 6),
    'type' => MENU_CALLBACK,
  );

  $items['admin/config/ethereum/registry/settings'] = array(
    'title' => 'Settings',
    'description' => 'Ethereum users registry settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ethereum_user_admin_form'),
    'access arguments' => array('administer site configuration'),
    'file' => 'ethereum_user.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  $items['user/%user/ethereum'] = array(
    'title' => 'Ethereum',
    'page callback' => '_ethereum_user',
    'page arguments' => array(1),
    'access callback' => '_ethereum_user_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function ethereum_user_permission() {
  return array(
    'use ethereum' => array(
      'title' => t('Use Ethereum'),
    ),
    'sign ethereum contracts' => array(
      'title' => t('Sign Ethereum contracts'),
    ),
  );
}

/**
 * Implements hook_form().
 */
function ethereum_user_form($form, &$form_state) {
  $form = array();

  global $user;
  $user_wrapper = entity_metadata_wrapper('user', $user);

  $form['ethereum_user_address'] = array(
    '#title' => t('Ethereum address'),
    '#title_display' => 'invisible',
    '#type' => 'textfield',
    '#size' => 42,
    '#maxlength' => 42,
    '#default_value' => $user_wrapper->ethereum_user_address->value(),
    '#description' => t('Ethereum addresses must begin with 0x and 40 hexadecimals characters must follow.'),
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Submit',
  );

  $form['#attached'] = array(
    'css' => array(
      drupal_get_path('module', 'ethereum_user') . '/css/ethereum_user_form.css',
    ),
    'js' => array(
      drupal_get_path('module', 'ethereum_user') . '/js/ethereum_user_form.js',
    ),
  );

  return $form;
}

/**
 * Implements hook_form_validate().
 */
function ethereum_user_form_validate($form, &$form_state) {
  if (!preg_match('/^0x[0-9a-f]{40}/is', $form_state['values']['ethereum_user_address'])) {
    form_set_error('ethereum_user_address', t('Ethereum addresses must begin with "0x" and 40 hexadecimals characters must follow.'));
  }
}

/**
 * Implements hook_form_submit().
 */
function ethereum_user_form_submit($form, &$form_state) {
  global $user;
  $user_wrapper = entity_metadata_wrapper('user', $user);
  $address = $form_state['input']['ethereum_user_address'];
  $user_wrapper->ethereum_user_address->set($address);
  $user_wrapper->save();
}

/**
 * Tab for /user/UID/ethereum.
 *
 * @object $this_user: User beeing viewed (UID), not necessarly the current user.
 */
function _ethereum_user($this_user) {

  $build = array();

  global $user;
  if ($user->uid == $this_user->uid) {
    $is_the_ethereum_user = TRUE;
  }
  $this_user_wrapper = entity_metadata_wrapper('user', $this_user);
  $this_user_ethereum_address = $this_user_wrapper->ethereum_user_address->value();

  // Ethereum user address.
  $address = '<div id="ethereum_user_address">';
  $address .= '<h2>' . t('Ethereum address') . '</h2>';
  $address .= '<p>';
  $address .= $this_user_ethereum_address ? $this_user_ethereum_address : t('Please add an Ethereum address');
  $address .= ' ';
  $address .= $is_the_ethereum_user ? '<a id="ethereum_user_address_trigger" href="#">' . t('edit') . '</a>' : l(t('edit'), 'user/' . $this_user->uid . '/edit');
  $address .= '</p>';
  $address .= '</div>';
  $build['ethereum_user_address'] = array(
    '#type' => 'markup',
    '#markup' => $address,
  );
  $build['ethereum_user_address_form'] = drupal_get_form('ethereum_user_form');

  // If the user has an ethereum address:
  if ($this_user_ethereum_address) {

    // Inject local Web3.js if configured so.
    if (variable_get('ethereum_web3_local_injection')) {
      $build['ethereum_user']['#attached']['libraries_load'][] = array('web3');
    }

    // User registry check.
    $loader = theme_image(array('path' => '/misc/throbber-active.gif'));
    $registry = '<div id="ethereum_user_registry">';
    $registry  .= '<h2>' . t('Ethereum user registry') . '</h2>';
    $registry  .= '<div id="ethereum_user_registry_wait"><p>' . t('Please wait while we check if you are in our user registry on Ethereum...') . '</p><p>' . $loader . '</p></diV>';
    $registry  .= '<p id="ethereum_user_registry_validated">' . t('Yes, this account is linked to our Ethereum user registry!') . '</p>';
    $register_link = ($user->uid == $this_user->uid) ? '<a href="#">' . t('To use Ethereum features with us, please sign our user registry.') . '</a>' : t('User did not sign the registry and you can not do it as an admin');
    $registry  .= '<p id="ethereum_user_registry_sign">' . $register_link . '</p>';
    $registry  .= '</div>';
    $build['ethereum_user_registry'] = array(
      '#type' => 'markup',
      '#markup' => $registry,
      '#attached' => array(
        'css' => array(
          drupal_get_path('module', 'ethereum_user') . '/css/ethereum_user_registry.css',
        ),
        'js' => array(
          drupal_get_path('module', 'ethereum_user') . '/js/ethereum_user_register_drupal.js',
        ),
      ),
    );

    // Generate user hash, if necessary.
    if (!$this_user->hash) {
      $data = array(
        '@name' => $this_user->name,
        '!id' => $this_user->uid,
      );
      $hash = user_hash_generate();
      $this_user = user_save($this_user, array('hash' => $hash));
    }

    // Pass variables to JS.
    drupal_add_js(array(
      'ethereum_user' => array(
        'contract' => array(
          'address' => variable_get('ethereum_user_register_drupal_deployed_contract_address'),
          'abi' => variable_get('ethereum_user_register_drupal_deployed_contract_abi'),
        ),
        'node' => variable_get('ethereum_web3_node'),
        'token' => variable_get('ethereum_user_registry_list_token'),
        'user' => array(
          'hash' => $this_user->hash,
          'address' => $this_user_ethereum_address,
        ),
      ),
    ), 'setting');
  }

  /*
   * Defines hook_ethereum_user_tab().
   *
   * array $render
   * string $ethereum_user_address
   */
  foreach (module_implements('ethereum_user_tab') as $module) {
    $function = $module . '_ethereum_user_tab';
    $function($build, $this_user_ethereum_address);
  }

  // Return the content to Drupal Render API.
  return $build;
}

/**
 * Access callback for user Ethereum tab.
 */
function _ethereum_user_access($account) {
  return (($GLOBALS['user']->uid == $account->uid && user_access('use ethereum')) || user_access('administer users')) && $account->uid > 0;
}

/**
 * Callback to retrieve a user from his hash.
 */
function _ethereum_user_registry_list_callback($hash) {

  $hash = substr($hash, 2);

  $user = db_select('users', 'u')
    ->fields('u', array('uid', 'name'))
    ->condition('hash', $hash)
    ->range(0, 1)
    ->execute()
    ->fetch();

  drupal_json_output(
    array(
      'status' => 0,
      'data' => array(
        'uid' => $user->uid,
        'name' => $user->name,
      ),
    )
  );
}

/**
 * Access callback to retrieve a user from his hash.
 */
function _ethereum_user_registry_list_callback_access($hash, $token) {
  if (!ctype_xdigit(substr($hash, 2))) {
    return FALSE;
  }
  elseif (check_plain($token) != variable_get('ethereum_user_registry_list_token')) {
    return FALSE;
  }
  else {
    return TRUE;
  }
}
