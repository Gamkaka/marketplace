<?php

/**
 * @file
 * Ethereum_smartcontract module file.
 *
 * Manages Smart Contracts.
 */

/**
 * Implements hook_entity_info().
 */
function ethereum_smartcontract_entity_info() {

  $info = array();

  $info['smartcontract'] = array(
    'label' => t('Smart Contract'),
    'plural label' => t('Smart Contracts'),
    'description' => t('Smart Contracts entities.'),
    'base table' => 'smartcontract',
    'entity keys' => array(
      'id' => 'id',
      'label' => 'name',
    ),
    'module' => 'ethereum_smartcontract',
    'entity class' => 'Entity',
    'controller class' => 'EntityAPIController',
    'access callback' => '_ethereum_smartcontract_access_callback',
    'admin ui' => array(
      'path' => 'admin/config/ethereum/smartcontract',
      'controller class' => 'EntityDefaultUIController',
    ),
    'fieldable' => TRUE,
    'views controller class' => 'EntityDefaultViewsController',
    'extra fields controller class' => 'EntityDefaultExtraFieldsController',
  );

  return $info;
}

/**
 * Implements hook_entity_property_info().
 */
function smartcontract_entity_property_info() {

  $info = array();

  $info['smartcontract']['properties']['id'] = array(
    'label' => t('ID'),
    'description' => t('ID of the Smart Contract.'),
    'type' => 'integer',
    'schema field' => 'id',
  );

  $info['smartcontract']['properties']['name'] = array(
    'label' => t('Name'),
    'description' => t('Name of the Smart Contract.'),
    'type' => 'text',
    'schema field' => 'name',
  );

  $info['smartcontract']['properties']['description'] = array(
    'label' => t('Description'),
    'description' => t('Description of the Smart Contract.'),
    'type' => 'text',
    'schema field' => 'description',
  );

  $info['smartcontract']['properties']['machine_name'] = array(
    'label' => t('Machine name'),
    'description' => t('Machine name of the Smart Contract.'),
    'type' => 'text',
    'schema field' => 'machine_name',
  );

  $info['smartcontract']['properties']['abi'] = array(
    'label' => t('Smart Contract ABI'),
    'description' => t('Application Binary Interface of the Smart Contract.'),
    'type' => 'text',
    'schema field' => 'abi',
  );

  $info['smartcontract']['properties']['module'] = array(
    'label' => t('Module'),
    'description' => t('Module providing Smart Contract.'),
    'type' => 'text',
    'schema field' => 'machine_name',
  );

  $info['smartcontract']['properties']['js'] = array(
    'label' => t('Javascript'),
    'description' => t('Path to the module generic Javascript.'),
    'type' => 'text',
    'schema field' => 'js',
    'setter callback' => 'entity_property_verbatim_set',
  );

  return $info;
}

/**
 * Implements hook_menu().
 */
function ethereum_smartcontract_menu() {

  $items = array();

  // TODO: We don't really need to view the contract, rather inject it.
  $items['admin/config/ethereum/smartcontract/view/%'] = array(
    'title' => 'Smart Contract',
    'page callback' => '_ethereum_smartcontract_view_smartcontract',
    'page arguments' => array(5),
    'access arguments' => array('use ethereum'),
  );

  $items['admin/config/ethereum/smartcontract/test'] = array(
    'title' => 'Test',
    'page callback' => '_ethereum_smartcontract_test',
    'access arguments' => array('use ethereum'),
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function ethereum_smartcontract_permission() {
  return array(
    'manage smart contracts' => array(
      'title' => t('Manage Smart Contracts'),
    ),
  );
}

/**
 * Access callback for Smart Contract entities.
 */
function _ethereum_smartcontract_access_callback($op, $smartcontract = NULL, $account = NULL) {
  if (user_access('manage smart contracts')) {
    if ($op == 'view' || $op == 'update' || $op == 'create' || $op == 'delete') {
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * Implements hook_ENTITY_TYPE_form().
 */
function smartcontract_form($form, &$form_state, $smartcontract = NULL) {

  $form['name'] = array(
    '#title' => t('Name'),
    '#type' => 'textfield',
    '#default_value' => isset($smartcontract->name) ? $smartcontract->name : '',
    '#weight' => '-50',
  );

  $form['machine_name'] = array(
    '#title' => t('Machine name'),
    '#description' => t('A unique machine-readable name containing letters, numbers, and underscores.'),
    '#type' => 'machine_name',
    '#machine_name' => array(
      'exists' => '_ethereum_smartcontract_machine_name_exists',
    ),
    '#default_value' => isset($smartcontract->machine_name) ? $smartcontract->machine_name : '',
    '#required' => TRUE,
    '#disabled' => isset($smartcontract->machine_name),
    '#weight' => '-40',
  );

  $form['description'] = array(
    '#title' => t('Description'),
    '#type' => 'textarea',
    '#default_value' => isset($smartcontract->description) ? $smartcontract->description : '',
    '#weight' => '-30',
  );

  field_attach_form('smartcontract', $smartcontract, $form, $form_state);

  $form['abi'] = array(
    '#title' => t('Application Binary Interface (ABI)'),
    '#type' => 'textarea',
    '#default_value' => isset($smartcontract->abi) ? $smartcontract->abi : '',
    '#required' => TRUE,
    '#weight' => '10',
  );

  $form['module'] = array(
    '#title' => t('Module'),
    '#type' => 'textfield',
    '#description' => t('Module providing the Smart Contract (optional)'),
    '#default_value' => isset($smartcontract->module) ? $smartcontract->module : '',
    '#maxlength' => 21,
    '#weight' => '20',
    '#disabled' => TRUE,
  );

  $form['js'] = array(
    '#title' => t('Javascript'),
    '#type' => 'textfield',
    '#description' => t('Path to generic Javascript (optional, relative to module folder'),
    '#default_value' => isset($smartcontract->js) ? $smartcontract->js : '',
    '#weight' => '30',
    '#disabled' => TRUE,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => isset($smartcontract->id) ? t('Update Smart Contract') : t('Save Smart Contract'),
    '#weight' => 50,
  );

  return $form;
}

/**
 * Implements hook_ENTITY_TYPE_form_validate().
 */
function smartcontract_form_validate($form, &$form_state) {
  entity_form_field_validate('smartcontract', $form, $form_state);
}

/**
 * Implements hook_ENTITY_TYPE_form_submit().
 */
function smartcontract_form_submit($form, &$form_state) {
  $smartcontract = entity_ui_form_submit_build_entity($form, $form_state);
  $smartcontract->save();
  drupal_set_message(t('The Smart Contract: @name has been saved.', array('@name' => $smartcontract->name)));
  $form_state['redirect'] = 'admin/config/ethereum/smartcontract';
}

/**
 * Check if the machine name is available.
 */
function _ethereum_smartcontract_machine_name_exists($value) {
  $exists = db_query_range('SELECT 1 FROM {smartcontract} WHERE machine_name = :machine_name', 0, 1, array(':machine_name' => $value))->fetchField();
  return $exists;
}

/**
 * Implements hook_library().
 */
function ethereum_smartcontract_library() {

  $libraries = array();

  // Get the Smart Contracts.
  $contracts = entity_load('smartcontract');

  // Register each contract as a library.
  foreach ($contracts as $contract) {

    $wrapper = entity_metadata_wrapper('smartcontract', $contract);
    $libraries[$contract->machine_name] = array(
      'title' => $contract->name,
      'version' => 'N/A',
      'js' => array(
        drupal_get_path('module', 'ethereum_smartcontract') . '/js/ethereum_smartcontract_load.js' => array(
          'scope' => 'footer',
        ),
        array(
          'type' => 'setting',
          'data' => array(
            'ethereum_smartcontract' => array(
              'contracts' => array(
                $contract->machine_name => array(
                  'abi' => $contract->abi,
                  'address' => $wrapper->ethereum_address->value(),
                ),
              ),
            ),
          ),
        ),
      ),
    );
    if ($contract->module && $contract->js) {
      $libraries[$contract->machine_name]['js'][drupal_get_path('module', $contract->module) . '/' . $contract->js] = array(
        'scope' => 'footer',
      );
    }
  }

  return $libraries;
}

function get_smartcontract($machine_name) {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'smartcontract')
    ->propertyCondition('machine_name', $machine_name);
  $result = $query->execute();
  if (isset($result['smartcontract'])) {
    $contracts = entity_load('smartcontract', array_keys($result['smartcontract']));
    $contract = reset($contracts);  
    $wrapper = entity_metadata_wrapper('smartcontract', $contract);
    return $wrapper;
  }
  return NULL;
}

/**
 * Helper function to load a Smart Contract.
 *
 * For convenience.
 * Instead of using this, it's better to attach the library to a render array.
 *
 * @see ethereum_registry/ethereum_registry_ethereum_user_tab()
 */
function _ethereum_smartcontract_load($machine_name) {
  drupal_add_library('ethereum_smartcontract', $machine_name);
}
